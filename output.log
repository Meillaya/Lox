
Build your own Interpreter
Build your own Interpreter
using Rust
Introduction
Repository Setup
Scanning: Empty file
Scanning: Parentheses
Scanning: Braces
Scanning: Other single-character tokens
Scanning: Lexical errors
Scanning: Assignment & equality Operators
Scanning: Negation & inequality operators
Scanning: Relational operators
Scanning: Division operator & comments
Scanning: Whitespace
Scanning: Multi-line errors
Scanning: String literals
Scanning: Number literals
Scanning: Identifiers
Scanning: Reserved words
Base stages complete!
Parsing Expressions
Booleans & Nil
Number literals
String literals
Parentheses
Unary Operators
Arithmetic operators (1/2)
Arithmetic operators (2/2)
Comparison operators
Equality operators
Syntactic errors
Extension complete!
Evaluating Expressions
Literals: Booleans & Nil
Literals: Strings & Numbers
Parentheses
Unary Operators: Negation & Not
Arithmetic Operators (1/2)
Arithmetic Operators (2/2)
String Concatenation
Relational Operators
Equality Operators
Runtime Errors: Unary Operators
Runtime Errors: Binary Operators (1/2)
Runtime Errors: Binary Operators (2/2)
Runtime Errors: Relational Operators
Extension complete!
Statements & State
Print: Generate output
Print: Multiple statements
Expression statements
Variables: Declare variables
Variables: Runtime Errors
Variables: Initialize variables
Variables: Redeclare variables
Assignment operation
Block syntax
Scopes
Extension complete!
Control Flow
If statements
Else statements
Else-if statements
Nested if statements
Logical OR operator
Logical AND operator
While statements
For statements
Syntactic errors
Extension complete!
Functions
Native functions
Functions without arguments
Functions with arguments
Syntax errors
Return statements
Higher order functions
Runtime errors
Function scope
Closures
Extension complete!
Resolving & Binding
Identifier Resolution
Self Initialization
Variable Redeclaration
Invalid Return
Extension complete!
Classes
Class Declarations
Class Instances
Getters & Setters
Instance Methods
The 'this' keyword
Invalid usages of 'this'
Constructor calls
Return within constructors
Extension complete!
Inheritance
Class Hierarchy
Inheriting Methods
Overriding Methods
Inheritance errrors
The super keyword
Invalid Usages of the super Keyword
FREE DURING BETA
system
light
dark
Upgrade
Invalid Usages of the super Keyword #ib9
In-progress
Instructions
Code Examples
Forum
Test Runner:
Tests passed!

You can either refactor your code or move on the next step.

    Move to next step
    Refactor code

Click the button below to move on to the next step:
Your Task
In-progress
Medium

In this stage, you'll add validation for the super keyword to ensure it's only used in appropriate contexts. This involves detecting and reporting errors when super is used incorrectly.
Book reference

The code for this stage is implemented in Section 13.3: Calling Superclass Methods, specifically the error handling parts.
Tests

The tester will run a series of tests with test.lox files that contain invalid usages of super.

For example, if test.lox contains the following:

class Foo {
  cook() {
    // Foo is not a subclass
    super.cook(); // expect compile error
  }
}

The tester will run your program like this:

$ ./your_program.sh run test.lox
[line 4] Error at 'super': Can't use 'super' in a class with no superclass.

The tester will run multiple tests with invalid super usage, for example:

Test Case 1:

Input:

// super can't be used outside of a class
super.notEvenInAClass(); // expect compile error

Expected Output:

[line 2] Error at 'super': Can't use 'super' outside of a class.

Test Case 2:

Input:

class A {}

class B < A {
  method() {
    // super must be followed by `.`
    // and an expression
    super; // expect compile error
  }
}

Expected Output:

[line 7] Error at ';': Expect '.' after 'super'.

The tester will assert that your program correctly detects and reports invalid uses of super with appropriate error messages and exit codes. For invalid uses of super the program should exit with code 65 (compile error).
Notes

    The super keyword should only be used in subclasses.
    The super keyword should always be followed by . and an expression.
    This output format matches the spec in the book's repository
    Error messages should be written to stderr, but the exact error messages are not checked.

Hints
Filter by Rust
avatar
Write
Preview
Markdown supported.
RECENT ATTEMPTS 9
avatar
Caceresenzo Java
84 / 84
avatar
ThomasBollmeier Go
84 / 84
avatar
alicanipek C#
84 / 84
avatar
samuel-cavalcanti Java
84 / 84
avatar
Meillaya Rust
83 / 84
avatar
hackedd Rust
78 / 84
avatar
Cheshulko Rust
76 / 84
avatar
nasgul951 Python
55 / 84
avatar
Sedose Kotlin
16 / 84
Invite a friend

    Logs

[compile] warning: method `call` is never used
[compile]   --> src/parser.rs:61:8
[compile]    |
[compile] 59 | impl Parser {
[compile]    | ----------- method in this implementation
[compile] 60 |
[compile] 61 |     fn call(&mut self, expr: Expr) -> Result<Expr, String> {
[compile]    |        ^^^^
[compile]    |
[compile]    = note: `#[warn(dead_code)]` on by default
[compile] 
[compile] warning: field `source_statements` is never read
[compile]    --> src/evaluator.rs:412:5
[compile]     |
[compile] 411 | pub struct Interpreter {
[compile]     |            ----------- field in this struct
[compile] 412 |     source_statements: Rc<Vec<Stmt>>,
[compile]     |     ^^^^^^^^^^^^^^^^^
[compile] 
[compile] warning: method `get_stmt_id` is never used
[compile]    --> src/evaluator.rs:448:8
[compile]     |
[compile] 419 | impl Interpreter {
[compile]     | ---------------- method in this implementation
[compile] ...
[compile] 448 |     fn get_stmt_id(&self, stmt: &Stmt) -> usize { stmt as *const _ as usize }
[compile]     |        ^^^^^^^^^^^
[compile] 
[compile] warning: method `define_natives` is never used
[compile]   --> src/environment.rs:91:12
[compile]    |
[compile] 14 | impl Environment {
[compile]    | ---------------- method in this implementation
[compile] ...
[compile] 91 |     pub fn define_natives(&mut self) {
[compile]    |            ^^^^^^^^^^^^^^
[compile] 
[compile] Moved ./.codecrafters/run.sh → ./your_program.sh
[compile] Compilation successful.
Debug = true
[tester::#IB9] Running tests for Stage #IB9 (Inheritance - Invalid Usages of the super Keyword)
[tester::#IB9] [test-1] Running test case: 1
[tester::#IB9] [test-1] Writing contents to ./test.lox:
[tester::#IB9] [test-1.lox] class Foo {
[tester::#IB9] [test-1.lox]   cook() {
[tester::#IB9] [test-1.lox]     // Foo is not a subclass
[tester::#IB9] [test-1.lox]     super.cook(); // expect compile error
[tester::#IB9] [test-1.lox]   }
[tester::#IB9] [test-1.lox] }
[tester::#IB9] [test-1] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class Foo with superclass None
[your_program] Resolver: Adding 'this' to scope for class Foo
[your_program] Resolver: Resolving method cook in class Foo
[your_program] Resolver Error: Cannot use 'super' in a class with no superclass at line 4
[your_program] Error: Cannot use 'super' in a class with no superclass at line 4.
[tester::#IB9] [test-1] ✓ 1 line(s) match on stdout
[tester::#IB9] [test-1] ✓ Received exit code 65.
[tester::#IB9] [test-2] Running test case: 2
[tester::#IB9] [test-2] Writing contents to ./test.lox:
[tester::#IB9] [test-2.lox] // super can't be used outside of a class
[tester::#IB9] [test-2.lox] super.notEvenInAClass(); // expect compile error
[tester::#IB9] [test-2] $ ./your_program.sh run test.lox
[your_program] Resolver Error: Cannot use 'super' outside of a class at line 2
[your_program] Error: Cannot use 'super' outside of a class at line 2.
[tester::#IB9] [test-2] ✓ 1 line(s) match on stdout
[tester::#IB9] [test-2] ✓ Received exit code 65.
[tester::#IB9] [test-3] Running test case: 3
[tester::#IB9] [test-3] Writing contents to ./test.lox:
[tester::#IB9] [test-3.lox] class A {
[tester::#IB9] [test-3.lox]   method() {}
[tester::#IB9] [test-3.lox] }
[tester::#IB9] [test-3.lox] 
[tester::#IB9] [test-3.lox] class B < A {
[tester::#IB9] [test-3.lox]   method() {
[tester::#IB9] [test-3.lox]     // super must be followed by `.`
[tester::#IB9] [test-3.lox]     // and an expression
[tester::#IB9] [test-3.lox]     (super).method(); // expect compile error
[tester::#IB9] [test-3.lox]   }
[tester::#IB9] [test-3.lox] }
[tester::#IB9] [test-3] $ ./your_program.sh run test.lox
[your_program] Error: Expect '.' after 'super'.
[tester::#IB9] [test-3] ✓ 1 line(s) match on stdout
[tester::#IB9] [test-3] ✓ Received exit code 65.
[tester::#IB9] [test-4] Running test case: 4
[tester::#IB9] [test-4] Writing contents to ./test.lox:
[tester::#IB9] [test-4.lox] class A {}
[tester::#IB9] [test-4.lox] 
[tester::#IB9] [test-4.lox] class B < A {
[tester::#IB9] [test-4.lox]   method() {
[tester::#IB9] [test-4.lox]     // super must be followed by `.`
[tester::#IB9] [test-4.lox]     // and an expression
[tester::#IB9] [test-4.lox]     super; // expect compile error
[tester::#IB9] [test-4.lox]   }
[tester::#IB9] [test-4.lox] }
[tester::#IB9] [test-4] $ ./your_program.sh run test.lox
[your_program] Error: Expect '.' after 'super'.
[tester::#IB9] [test-4] ✓ 1 line(s) match on stdout
[tester::#IB9] [test-4] ✓ Received exit code 65.
[tester::#IB9] Test passed.
[tester::#QI0] Running tests for Stage #QI0 (Inheritance - The super keyword)
[tester::#QI0] [test-1] Running test case: 1
[tester::#QI0] [test-1] Writing contents to ./test.lox:
[tester::#QI0] [test-1.lox] class Doughnut {
[tester::#QI0] [test-1.lox]   cook() {
[tester::#QI0] [test-1.lox]     print "Fry until golden brown.";
[tester::#QI0] [test-1.lox]   }
[tester::#QI0] [test-1.lox] }
[tester::#QI0] [test-1.lox] 
[tester::#QI0] [test-1.lox] // Super can be used to call the overridden method
[tester::#QI0] [test-1.lox] // of the parent class
[tester::#QI0] [test-1.lox] class BostonCream < Doughnut {
[tester::#QI0] [test-1.lox]   cook() {
[tester::#QI0] [test-1.lox]     super.cook();
[tester::#QI0] [test-1.lox]   }
[tester::#QI0] [test-1.lox] }
[tester::#QI0] [test-1.lox] 
[tester::#QI0] [test-1.lox] BostonCream().cook();
[tester::#QI0] [test-1] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class Doughnut with superclass None
[your_program] Resolver: Adding 'this' to scope for class Doughnut
[your_program] Resolver: Resolving method cook in class Doughnut
[your_program] Resolver: Resolving class BostonCream with superclass Some(Variable(Token { token_type: Identifier, lexeme: "Doughnut", literal: None, line: 9 }))
[your_program] Resolver: Resolving local variable 'Doughnut' at line 9
[your_program]   'Doughnut' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class BostonCream
[your_program] Resolver: Adding 'this' to scope for class BostonCream
[your_program] Resolver: Resolving method cook in class BostonCream
[your_program] Resolver: Resolving 'super' in subclass at line 11
[your_program]   Found 'super' at distance 2 (line: 11)
[your_program] Resolver: Resolving local variable 'super' at line 11
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["this"]
[your_program]   Checking scope 2: ["super"]
[your_program]   Found 'super' at distance 2 (Expr ID: 94265049292816)
[your_program] Resolver: Ending superclass scope for BostonCream
[your_program] Fry until golden brown.
[your_program] Resolver: Resolving local variable 'BostonCream' at line 15
[your_program]   'BostonCream' not found in any scope, assuming global
[your_program] Evaluator: Found super at line 11 with distance 2
[tester::#QI0] [test-1] ✓ 1 line(s) match on stdout
[tester::#QI0] [test-1] ✓ Received exit code 0.
[tester::#QI0] [test-2] Running test case: 2
[tester::#QI0] [test-2] Writing contents to ./test.lox:
[tester::#QI0] [test-2.lox] class A {
[tester::#QI0] [test-2.lox]   say() {
[tester::#QI0] [test-2.lox]     print "A";
[tester::#QI0] [test-2.lox]   }
[tester::#QI0] [test-2.lox] }
[tester::#QI0] [test-2.lox] 
[tester::#QI0] [test-2.lox] class B < A {
[tester::#QI0] [test-2.lox]   // test calls say() from A
[tester::#QI0] [test-2.lox]   test() {
[tester::#QI0] [test-2.lox]     super.say();
[tester::#QI0] [test-2.lox]   }
[tester::#QI0] [test-2.lox] 
[tester::#QI0] [test-2.lox]   say() {
[tester::#QI0] [test-2.lox]     print "B";
[tester::#QI0] [test-2.lox]   }
[tester::#QI0] [test-2.lox] }
[tester::#QI0] [test-2.lox] 
[tester::#QI0] [test-2.lox] // C inherits test() from B
[tester::#QI0] [test-2.lox] // But the super keyword used in test()
[tester::#QI0] [test-2.lox] // should still have a binding to B
[tester::#QI0] [test-2.lox] class C < B {
[tester::#QI0] [test-2.lox]   say() {
[tester::#QI0] [test-2.lox]     print "C";
[tester::#QI0] [test-2.lox]   }
[tester::#QI0] [test-2.lox] }
[tester::#QI0] [test-2.lox] 
[tester::#QI0] [test-2.lox] C().say();
[tester::#QI0] [test-2.lox] C().test(); // expect: A
[tester::#QI0] [test-2] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class A with superclass None
[your_program] Resolver: Adding 'this' to scope for class A
[your_program] Resolver: Resolving method say in class A
[your_program] Resolver: Resolving class B with superclass Some(Variable(Token { token_type: Identifier, lexeme: "A", literal: None, line: 7 }))
[your_program] Resolver: Resolving local variable 'A' at line 7
[your_program]   'A' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class B
[your_program] Resolver: Adding 'this' to scope for class B
[your_program] Resolver: Resolving method test in class B
[your_program] Resolver: Resolving 'super' in subclass at line 10
[your_program]   Found 'super' at distance 2 (line: 10)
[your_program] Resolver: Resolving local variable 'super' at line 10
[your_program] C
[your_program]   Checking scope 0: []
[your_program] A
[your_program]   Checking scope 1: ["this"]
[your_program]   Checking scope 2: ["super"]
[your_program]   Found 'super' at distance 2 (Expr ID: 94727614239184)
[your_program] Resolver: Resolving method say in class B
[your_program] Resolver: Ending superclass scope for B
[your_program] Resolver: Resolving class C with superclass Some(Variable(Token { token_type: Identifier, lexeme: "B", literal: None, line: 21 }))
[your_program] Resolver: Resolving local variable 'B' at line 21
[your_program]   'B' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class C
[your_program] Resolver: Adding 'this' to scope for class C
[your_program] Resolver: Resolving method say in class C
[your_program] Resolver: Ending superclass scope for C
[your_program] Resolver: Resolving local variable 'C' at line 27
[your_program]   'C' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'C' at line 28
[your_program]   'C' not found in any scope, assuming global
[your_program] Evaluator: Found super at line 10 with distance 2
[tester::#QI0] [test-2] ✓ 2 line(s) match on stdout
[tester::#QI0] [test-2] ✓ Received exit code 0.
[tester::#QI0] [test-3] Running test case: 3
[tester::#QI0] [test-3] Writing contents to ./test.lox:
[tester::#QI0] [test-3.lox] class A {
[tester::#QI0] [test-3.lox]   say() {
[tester::#QI0] [test-3.lox]     print "A";
[tester::#QI0] [test-3.lox]   }
[tester::#QI0] [test-3.lox] }
[tester::#QI0] [test-3.lox] 
[tester::#QI0] [test-3.lox] class B < A {
[tester::#QI0] [test-3.lox]   getClosure() {
[tester::#QI0] [test-3.lox]     fun closure() {
[tester::#QI0] [test-3.lox]       super.say();
[tester::#QI0] [test-3.lox]     }
[tester::#QI0] [test-3.lox]     return closure;
[tester::#QI0] [test-3.lox]   }
[tester::#QI0] [test-3.lox] 
[tester::#QI0] [test-3.lox]   say() {
[tester::#QI0] [test-3.lox]     print "B";
[tester::#QI0] [test-3.lox]   }
[tester::#QI0] [test-3.lox] }
[tester::#QI0] [test-3.lox] 
[tester::#QI0] [test-3.lox] class C < B {
[tester::#QI0] [test-3.lox]   say() {
[tester::#QI0] [test-3.lox]     print "C";
[tester::#QI0] [test-3.lox]   }
[tester::#QI0] [test-3.lox] }
[tester::#QI0] [test-3.lox] 
[tester::#QI0] [test-3.lox] // C inherits getClosure() from B
[tester::#QI0] [test-3.lox] // But the super keyword used in getClosure()
[tester::#QI0] [test-3.lox] // should still have a binding to B
[tester::#QI0] [test-3.lox] C().getClosure()(); // expect: A
[tester::#QI0] [test-3] $ ./your_program.sh run test.lox
[your_program] A
[your_program] Resolver: Resolving class A with superclass None
[your_program] Resolver: Adding 'this' to scope for class A
[your_program] Resolver: Resolving method say in class A
[your_program] Resolver: Resolving class B with superclass Some(Variable(Token { token_type: Identifier, lexeme: "A", literal: None, line: 7 }))
[your_program] Resolver: Resolving local variable 'A' at line 7
[your_program]   'A' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class B
[your_program] Resolver: Adding 'this' to scope for class B
[your_program] Resolver: Resolving method getClosure in class B
[your_program] Resolver: Resolving 'super' in subclass at line 10
[your_program]   Found 'super' at distance 3 (line: 10)
[your_program] Resolver: Resolving local variable 'super' at line 10
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["closure"]
[your_program]   Checking scope 2: ["this"]
[your_program]   Checking scope 3: ["super"]
[your_program]   Found 'super' at distance 3 (Expr ID: 94005922935280)
[your_program] Resolver: Resolving local variable 'closure' at line 12
[your_program]   Checking scope 0: ["closure"]
[your_program]   Found 'closure' at distance 0 (Expr ID: 94005922936568)
[your_program] Resolver: Resolving method say in class B
[your_program] Resolver: Ending superclass scope for B
[your_program] Resolver: Resolving class C with superclass Some(Variable(Token { token_type: Identifier, lexeme: "B", literal: None, line: 20 }))
[your_program] Resolver: Resolving local variable 'B' at line 20
[your_program]   'B' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class C
[your_program] Resolver: Adding 'this' to scope for class C
[your_program] Resolver: Resolving method say in class C
[your_program] Resolver: Ending superclass scope for C
[your_program] Resolver: Resolving local variable 'C' at line 29
[your_program]   'C' not found in any scope, assuming global
[your_program] Evaluator: Found super at line 10 with distance 3
[tester::#QI0] [test-3] ✓ 1 line(s) match on stdout
[tester::#QI0] [test-3] ✓ Received exit code 0.
[tester::#QI0] [test-4] Running test case: 4
[tester::#QI0] [test-4] Writing contents to ./test.lox:
[tester::#QI0] [test-4.lox] class Base {
[tester::#QI0] [test-4.lox]   method() {
[tester::#QI0] [test-4.lox]     print "Base.method()";
[tester::#QI0] [test-4.lox]   }
[tester::#QI0] [test-4.lox] }
[tester::#QI0] [test-4.lox] 
[tester::#QI0] [test-4.lox] // Parent inherits method from Base
[tester::#QI0] [test-4.lox] class Parent < Base {
[tester::#QI0] [test-4.lox]   method() {
[tester::#QI0] [test-4.lox]     super.method();
[tester::#QI0] [test-4.lox]   }
[tester::#QI0] [test-4.lox] }
[tester::#QI0] [test-4.lox] 
[tester::#QI0] [test-4.lox] // Child inherits method from Parent
[tester::#QI0] [test-4.lox] class Child < Parent {
[tester::#QI0] [test-4.lox]   method() {
[tester::#QI0] [test-4.lox]     super.method();
[tester::#QI0] [test-4.lox]   }
[tester::#QI0] [test-4.lox] }
[tester::#QI0] [test-4.lox] 
[tester::#QI0] [test-4.lox] var parent = Parent();
[tester::#QI0] [test-4.lox] parent.method(); // expect: Base.method()
[tester::#QI0] [test-4.lox] var child = Child();
[tester::#QI0] [test-4.lox] child.method(); // expect: Base.method()
[tester::#QI0] [test-4] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class Base with superclass None
[your_program] Resolver: Adding 'this' to scope for class Base
[your_program] Resolver: Resolving method method in class Base
[your_program] Base.method()
[your_program] Base.method()
[your_program] Resolver: Resolving class Parent with superclass Some(Variable(Token { token_type: Identifier, lexeme: "Base", literal: None, line: 8 }))
[your_program] Resolver: Resolving local variable 'Base' at line 8
[your_program]   'Base' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class Parent
[your_program] Resolver: Adding 'this' to scope for class Parent
[your_program] Resolver: Resolving method method in class Parent
[your_program] Resolver: Resolving 'super' in subclass at line 10
[your_program]   Found 'super' at distance 2 (line: 10)
[your_program] Resolver: Resolving local variable 'super' at line 10
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["this"]
[your_program]   Checking scope 2: ["super"]
[your_program]   Found 'super' at distance 2 (Expr ID: 94111765303808)
[your_program] Resolver: Ending superclass scope for Parent
[your_program] Resolver: Resolving class Child with superclass Some(Variable(Token { token_type: Identifier, lexeme: "Parent", literal: None, line: 15 }))
[your_program] Resolver: Resolving local variable 'Parent' at line 15
[your_program]   'Parent' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class Child
[your_program] Resolver: Adding 'this' to scope for class Child
[your_program] Resolver: Resolving method method in class Child
[your_program] Resolver: Resolving 'super' in subclass at line 17
[your_program]   Found 'super' at distance 2 (line: 17)
[your_program] Resolver: Resolving local variable 'super' at line 17
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["this"]
[your_program]   Checking scope 2: ["super"]
[your_program]   Found 'super' at distance 2 (Expr ID: 94111765305776)
[your_program] Resolver: Ending superclass scope for Child
[your_program] Resolver: Resolving local variable 'Parent' at line 21
[your_program]   'Parent' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'parent' at line 22
[your_program]   'parent' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'Child' at line 23
[your_program]   'Child' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'child' at line 24
[your_program]   'child' not found in any scope, assuming global
[your_program] Evaluator: Found super at line 10 with distance 2
[your_program] Evaluator: Found super at line 17 with distance 2
[your_program] Evaluator: Found super at line 10 with distance 2
[tester::#QI0] [test-4] ✓ 2 line(s) match on stdout
[tester::#QI0] [test-4] ✓ Received exit code 0.
[tester::#QI0] Test passed.
[tester::#AB0] Running tests for Stage #AB0 (Inheritance - Inheritance errrors)
[tester::#AB0] [test-1] Running test case: 1
[tester::#AB0] [test-1] Writing contents to ./test.lox:
[tester::#AB0] [test-1.lox] // A class can't inherit from itself.
[tester::#AB0] [test-1.lox] class Foo < Foo {} // expect compile error
[tester::#AB0] [test-1] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class Foo with superclass Some(Variable(Token { token_type: Identifier, lexeme: "Foo", literal: None, line: 2 }))
[your_program] Error: A class cannot inherit from itself at line 2.
[tester::#AB0] [test-1] ✓ 1 line(s) match on stdout
[tester::#AB0] [test-1] ✓ Received exit code 65.
[tester::#AB0] [test-2] Running test case: 2
[tester::#AB0] [test-2] Writing contents to ./test.lox:
[tester::#AB0] [test-2.lox] fun A() {}
[tester::#AB0] [test-2.lox] 
[tester::#AB0] [test-2.lox] // A class can only inherit from a class.
[tester::#AB0] [test-2.lox] class B < A {} // expect runtime error
[tester::#AB0] [test-2.lox] 
[tester::#AB0] [test-2.lox] print A();
[tester::#AB0] [test-2.lox] print B();
[tester::#AB0] [test-2] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class B with superclass Some(Variable(Token { token_type: Identifier, lexeme: "A", literal: None, line: 4 }))
[your_program] Resolver: Resolving local variable 'A' at line 4
[your_program]   'A' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class B
[your_program] Resolver: Adding 'this' to scope for class B
[your_program] Resolver: Ending superclass scope for B
[your_program] Resolver: Resolving local variable 'A' at line 6
[your_program]   'A' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'B' at line 7
[your_program]   'B' not found in any scope, assuming global
[your_program] Superclass must be a class, got <fn A> [line 4]
[tester::#AB0] [test-2] ✓ 1 line(s) match on stdout
[tester::#AB0] [test-2] ✓ Received exit code 70.
[tester::#AB0] [test-3] Running test case: 3
[tester::#AB0] [test-3] Writing contents to ./test.lox:
[tester::#AB0] [test-3.lox] var A = "class";
[tester::#AB0] [test-3.lox] 
[tester::#AB0] [test-3.lox] // A class can only inherit from a class
[tester::#AB0] [test-3.lox] class B < A {} // expect runtime error
[tester::#AB0] [test-3.lox] 
[tester::#AB0] [test-3.lox] print B();
[tester::#AB0] [test-3] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class B with superclass Some(Variable(Token { token_type: Identifier, lexeme: "A", literal: None, line: 4 }))
[your_program] Resolver: Resolving local variable 'A' at line 4
[your_program]   'A' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class B
[your_program] Resolver: Adding 'this' to scope for class B
[your_program] Resolver: Ending superclass scope for B
[your_program] Resolver: Resolving local variable 'B' at line 6
[your_program]   'B' not found in any scope, assuming global
[your_program] Superclass must be a class, got class [line 4]
[tester::#AB0] [test-3] ✓ 1 line(s) match on stdout
[tester::#AB0] [test-3] ✓ Received exit code 70.
[tester::#AB0] [test-4] Running test case: 4
[tester::#AB0] [test-4] Writing contents to ./test.lox:
[tester::#AB0] [test-4.lox] class A {
[tester::#AB0] [test-4.lox]   method() {
[tester::#AB0] [test-4.lox]     print "A";
[tester::#AB0] [test-4.lox]   }
[tester::#AB0] [test-4.lox] }
[tester::#AB0] [test-4.lox] 
[tester::#AB0] [test-4.lox] class B < A {}
[tester::#AB0] [test-4.lox] class C < B {}
[tester::#AB0] [test-4.lox] class D < A {}
[tester::#AB0] [test-4.lox] 
[tester::#AB0] [test-4.lox] // B is updated to a non-class value
[tester::#AB0] [test-4.lox] B = "not a class";
[tester::#AB0] [test-4.lox] // E inherits from B, which is not a class
[tester::#AB0] [test-4.lox] class E < B {}  // expect runtime error
[tester::#AB0] [test-4] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class A with superclass None
[your_program] Resolver: Adding 'this' to scope for class A
[your_program] Resolver: Resolving method method in class A
[your_program] Resolver: Resolving class B with superclass Some(Variable(Token { token_type: Identifier, lexeme: "A", literal: None, line: 7 }))
[your_program] Resolver: Resolving local variable 'A' at line 7
[your_program]   'A' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class B
[your_program] Resolver: Adding 'this' to scope for class B
[your_program] Resolver: Ending superclass scope for B
[your_program] Resolver: Resolving class C with superclass Some(Variable(Token { token_type: Identifier, lexeme: "B", literal: None, line: 8 }))
[your_program] Resolver: Resolving local variable 'B' at line 8
[your_program]   'B' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class C
[your_program] Resolver: Adding 'this' to scope for class C
[your_program] Resolver: Ending superclass scope for C
[your_program] Resolver: Resolving class D with superclass Some(Variable(Token { token_type: Identifier, lexeme: "A", literal: None, line: 9 }))
[your_program] Resolver: Resolving local variable 'A' at line 9
[your_program]   'A' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class D
[your_program] Resolver: Adding 'this' to scope for class D
[your_program] Resolver: Ending superclass scope for D
[your_program] Resolver: Resolving local variable 'B' at line 12
[your_program]   'B' not found in any scope, assuming global
[your_program] Resolver: Resolving class E with superclass Some(Variable(Token { token_type: Identifier, lexeme: "B", literal: None, line: 14 }))
[your_program] Resolver: Resolving local variable 'B' at line 14
[your_program]   'B' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class E
[your_program] Resolver: Adding 'this' to scope for class E
[your_program] Resolver: Ending superclass scope for E
[your_program] Superclass must be a class, got not a class [line 14]
[tester::#AB0] [test-4] ✓ 1 line(s) match on stdout
[tester::#AB0] [test-4] ✓ Received exit code 70.
[tester::#AB0] Test passed.
[tester::#KA5] Running tests for Stage #KA5 (Inheritance - Overriding Methods)
[tester::#KA5] [test-1] Running test case: 1
[tester::#KA5] [test-1] Writing contents to ./test.lox:
[tester::#KA5] [test-1.lox] class A {
[tester::#KA5] [test-1.lox]   method() {
[tester::#KA5] [test-1.lox]     print "A method";
[tester::#KA5] [test-1.lox]   }
[tester::#KA5] [test-1.lox] }
[tester::#KA5] [test-1.lox] 
[tester::#KA5] [test-1.lox] 
[tester::#KA5] [test-1.lox] // B inherits method `method` from A
[tester::#KA5] [test-1.lox] // and overrides it with a new implementation
[tester::#KA5] [test-1.lox] class B < A {
[tester::#KA5] [test-1.lox]   method() {
[tester::#KA5] [test-1.lox]     print "B method";
[tester::#KA5] [test-1.lox]   }
[tester::#KA5] [test-1.lox] }
[tester::#KA5] [test-1.lox] 
[tester::#KA5] [test-1.lox] var b = B();
[tester::#KA5] [test-1.lox] b.method();  // expect: B method
[tester::#KA5] [test-1] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class A with superclass None
[your_program] Resolver: Adding 'this' to scope for class A
[your_program] Resolver: Resolving method method in class A
[your_program] B method
[your_program] Resolver: Resolving class B with superclass Some(Variable(Token { token_type: Identifier, lexeme: "A", literal: None, line: 10 }))
[your_program] Resolver: Resolving local variable 'A' at line 10
[your_program]   'A' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class B
[your_program] Resolver: Adding 'this' to scope for class B
[your_program] Resolver: Resolving method method in class B
[your_program] Resolver: Ending superclass scope for B
[your_program] Resolver: Resolving local variable 'B' at line 16
[your_program]   'B' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'b' at line 17
[your_program]   'b' not found in any scope, assuming global
[tester::#KA5] [test-1] ✓ 1 line(s) match on stdout
[tester::#KA5] [test-1] ✓ Received exit code 0.
[tester::#KA5] [test-2] Running test case: 2
[tester::#KA5] [test-2] Writing contents to ./test.lox:
[tester::#KA5] [test-2.lox] class Base {
[tester::#KA5] [test-2.lox]   init(a) {
[tester::#KA5] [test-2.lox]     this.a = a;
[tester::#KA5] [test-2.lox]   }
[tester::#KA5] [test-2.lox] }
[tester::#KA5] [test-2.lox] 
[tester::#KA5] [test-2.lox] 
[tester::#KA5] [test-2.lox] // Constructors can also be overridden
[tester::#KA5] [test-2.lox] class Derived < Base {
[tester::#KA5] [test-2.lox]   init(a, b) {
[tester::#KA5] [test-2.lox]     this.a = a;
[tester::#KA5] [test-2.lox]     this.b = b;
[tester::#KA5] [test-2.lox]   }
[tester::#KA5] [test-2.lox] }
[tester::#KA5] [test-2.lox] 
[tester::#KA5] [test-2.lox] var derived = Derived(26, 84);
[tester::#KA5] [test-2.lox] print derived.a;
[tester::#KA5] [test-2.lox] print derived.b;
[tester::#KA5] [test-2] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class Base with superclass None
[your_program] Resolver: Adding 'this' to scope for class Base
[your_program] Resolver: Resolving method init in class Base
[your_program] Resolver: Resolving local variable 'a' at line 3
[your_program]   Checking scope 0: ["a"]
[your_program]   Found 'a' at distance 0 (Expr ID: 93928377607968)
[your_program] Resolver: Resolving local variable 'this' at line 3
[your_program]   Checking scope 0: ["a"]
[your_program]   Checking scope 1: ["this"]
[your_program] 26
[your_program] 84
[your_program]   Found 'this' at distance 1 (Expr ID: 93928377607824)
[your_program] Resolver: Resolving class Derived with superclass Some(Variable(Token { token_type: Identifier, lexeme: "Base", literal: None, line: 9 }))
[your_program] Resolver: Resolving local variable 'Base' at line 9
[your_program]   'Base' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class Derived
[your_program] Resolver: Adding 'this' to scope for class Derived
[your_program] Resolver: Resolving method init in class Derived
[your_program] Resolver: Resolving local variable 'a' at line 11
[your_program]   Checking scope 0: ["a", "b"]
[your_program]   Found 'a' at distance 0 (Expr ID: 93928377611264)
[your_program] Resolver: Resolving local variable 'this' at line 11
[your_program]   Checking scope 0: ["a", "b"]
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 93928377611120)
[your_program] Resolver: Resolving local variable 'b' at line 12
[your_program]   Checking scope 0: ["a", "b"]
[your_program]   Found 'b' at distance 0 (Expr ID: 93928377611552)
[your_program] Resolver: Resolving local variable 'this' at line 12
[your_program]   Checking scope 0: ["a", "b"]
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 93928377611408)
[your_program] Resolver: Ending superclass scope for Derived
[your_program] Resolver: Resolving local variable 'Derived' at line 16
[your_program]   'Derived' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'derived' at line 17
[your_program]   'derived' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'derived' at line 18
[your_program]   'derived' not found in any scope, assuming global
[tester::#KA5] [test-2] ✓ 2 line(s) match on stdout
[tester::#KA5] [test-2] ✓ Received exit code 0.
[tester::#KA5] [test-3] Running test case: 3
[tester::#KA5] [test-3] Writing contents to ./test.lox:
[tester::#KA5] [test-3.lox] class Base {
[tester::#KA5] [test-3.lox]   init(a) {
[tester::#KA5] [test-3.lox]     this.a = a;
[tester::#KA5] [test-3.lox]   }
[tester::#KA5] [test-3.lox] 
[tester::#KA5] [test-3.lox]   cook() {
[tester::#KA5] [test-3.lox]     return "Base cooking " + this.a;
[tester::#KA5] [test-3.lox]   }
[tester::#KA5] [test-3.lox] }
[tester::#KA5] [test-3.lox] 
[tester::#KA5] [test-3.lox] class Derived < Base {
[tester::#KA5] [test-3.lox]   init(a, b) {
[tester::#KA5] [test-3.lox]     this.a = a;
[tester::#KA5] [test-3.lox]     this.b = b;
[tester::#KA5] [test-3.lox]   }
[tester::#KA5] [test-3.lox] 
[tester::#KA5] [test-3.lox]   // Derived overrides the cook method of Base
[tester::#KA5] [test-3.lox]   cook() {
[tester::#KA5] [test-3.lox]     return "Derived cooking " + this.b + " with "
[tester::#KA5] [test-3.lox]     + this.a + " and " + this.b;
[tester::#KA5] [test-3.lox]   }
[tester::#KA5] [test-3.lox] 
[tester::#KA5] [test-3.lox]   makeFood() {
[tester::#KA5] [test-3.lox]     return this.cook();
[tester::#KA5] [test-3.lox]   }
[tester::#KA5] [test-3.lox] }
[tester::#KA5] [test-3.lox] 
[tester::#KA5] [test-3.lox] var derived = Derived("onions", "shallots");
[tester::#KA5] [test-3.lox] print derived.a;
[tester::#KA5] [test-3.lox] print derived.b;
[tester::#KA5] [test-3.lox] 
[tester::#KA5] [test-3.lox] print Base("ingredient").cook();
[tester::#KA5] [test-3.lox] print derived.cook();
[tester::#KA5] [test-3] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class Base with superclass None
[your_program] Resolver: Adding 'this' to scope for class Base
[your_program] Resolver: Resolving method init in class Base
[your_program] Resolver: Resolving local variable 'a' at line 3
[your_program]   Checking scope 0: ["a"]
[your_program]   Found 'a' at distance 0 (Expr ID: 94631194298448)
[your_program] onions
[your_program] shallots
[your_program] Resolver: Resolving local variable 'this' at line 3
[your_program]   Checking scope 0: ["a"]
[your_program]   Checking scope 1: ["this"]
[your_program] Base cooking ingredient
[your_program] Derived cooking shallots with onions and shallots
[your_program]   Found 'this' at distance 1 (Expr ID: 94631194298304)
[your_program] Resolver: Resolving method cook in class Base
[your_program] Resolver: Resolving local variable 'this' at line 7
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 94631194300416)
[your_program] Resolver: Resolving class Derived with superclass Some(Variable(Token { token_type: Identifier, lexeme: "Base", literal: None, line: 11 }))
[your_program] Resolver: Resolving local variable 'Base' at line 11
[your_program]   'Base' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class Derived
[your_program] Resolver: Adding 'this' to scope for class Derived
[your_program] Resolver: Resolving method init in class Derived
[your_program] Resolver: Resolving local variable 'a' at line 13
[your_program]   Checking scope 0: ["a", "b"]
[your_program]   Found 'a' at distance 0 (Expr ID: 94631194303088)
[your_program] Resolver: Resolving local variable 'this' at line 13
[your_program]   Checking scope 0: ["a", "b"]
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 94631194302944)
[your_program] Resolver: Resolving local variable 'b' at line 14
[your_program]   Checking scope 0: ["a", "b"]
[your_program]   Found 'b' at distance 0 (Expr ID: 94631194304288)
[your_program] Resolver: Resolving local variable 'this' at line 14
[your_program]   Checking scope 0: ["a", "b"]
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 94631194304144)
[your_program] Resolver: Resolving method cook in class Derived
[your_program] Resolver: Resolving local variable 'this' at line 19
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 94631194305344)
[your_program] Resolver: Resolving local variable 'this' at line 20
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 94631194306064)
[your_program] Resolver: Resolving local variable 'this' at line 20
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 94631194320528)
[your_program] Resolver: Resolving method makeFood in class Derived
[your_program] Resolver: Resolving local variable 'this' at line 24
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 94631194321872)
[your_program] Resolver: Ending superclass scope for Derived
[your_program] Resolver: Resolving local variable 'Derived' at line 28
[your_program]   'Derived' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'derived' at line 29
[your_program]   'derived' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'derived' at line 30
[your_program]   'derived' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'Base' at line 32
[your_program]   'Base' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'derived' at line 33
[your_program]   'derived' not found in any scope, assuming global
[tester::#KA5] [test-3] ✓ 4 line(s) match on stdout
[tester::#KA5] [test-3] ✓ Received exit code 0.
[tester::#KA5] [test-4] Running test case: 4
[tester::#KA5] [test-4] Writing contents to ./test.lox:
[tester::#KA5] [test-4.lox] class Animal {
[tester::#KA5] [test-4.lox]   speak() {
[tester::#KA5] [test-4.lox]     return "Animal speaks";
[tester::#KA5] [test-4.lox]   }
[tester::#KA5] [test-4.lox] 
[tester::#KA5] [test-4.lox]   makeSound() {
[tester::#KA5] [test-4.lox]     return "Generic sound";
[tester::#KA5] [test-4.lox]   }
[tester::#KA5] [test-4.lox] 
[tester::#KA5] [test-4.lox]   communicate() {
[tester::#KA5] [test-4.lox]     return this.speak() + " : " + this.makeSound();
[tester::#KA5] [test-4.lox]   }
[tester::#KA5] [test-4.lox] }
[tester::#KA5] [test-4.lox] 
[tester::#KA5] [test-4.lox] // Dog inherits the speak and makeSound methods
[tester::#KA5] [test-4.lox] // from Animal and overrides them with new
[tester::#KA5] [test-4.lox] // implementations specific to dogs
[tester::#KA5] [test-4.lox] class Dog < Animal {
[tester::#KA5] [test-4.lox]   speak() {
[tester::#KA5] [test-4.lox]     return "Dog speaks";
[tester::#KA5] [test-4.lox]   }
[tester::#KA5] [test-4.lox] 
[tester::#KA5] [test-4.lox]   makeSound() {
[tester::#KA5] [test-4.lox]     return "Woof";
[tester::#KA5] [test-4.lox]   }
[tester::#KA5] [test-4.lox] }
[tester::#KA5] [test-4.lox] 
[tester::#KA5] [test-4.lox] // Puppy inherits the speak and makeSound methods
[tester::#KA5] [test-4.lox] // from Dog and overrides them with new
[tester::#KA5] [test-4.lox] // implementations specific to puppies
[tester::#KA5] [test-4.lox] class Puppy < Dog {
[tester::#KA5] [test-4.lox]   speak() {
[tester::#KA5] [test-4.lox]     return "Puppy speaks";
[tester::#KA5] [test-4.lox]   }
[tester::#KA5] [test-4.lox] }
[tester::#KA5] [test-4.lox] 
[tester::#KA5] [test-4.lox] var animal = Animal();
[tester::#KA5] [test-4.lox] var dog = Dog();
[tester::#KA5] [test-4.lox] var puppy = Puppy();
[tester::#KA5] [test-4.lox] 
[tester::#KA5] [test-4.lox] print animal.communicate();
[tester::#KA5] [test-4.lox] print dog.communicate();
[tester::#KA5] [test-4.lox] print puppy.communicate();
[tester::#KA5] [test-4] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class Animal with superclass None
[your_program] Animal speaks : Generic sound
[your_program] Dog speaks : Woof
[your_program] Resolver: Adding 'this' to scope for class Animal
[your_program] Puppy speaks : Woof
[your_program] Resolver: Resolving method speak in class Animal
[your_program] Resolver: Resolving method makeSound in class Animal
[your_program] Resolver: Resolving method communicate in class Animal
[your_program] Resolver: Resolving local variable 'this' at line 11
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 94266397565872)
[your_program] Resolver: Resolving local variable 'this' at line 11
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 94266397566448)
[your_program] Resolver: Resolving class Dog with superclass Some(Variable(Token { token_type: Identifier, lexeme: "Animal", literal: None, line: 18 }))
[your_program] Resolver: Resolving local variable 'Animal' at line 18
[your_program]   'Animal' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class Dog
[your_program] Resolver: Adding 'this' to scope for class Dog
[your_program] Resolver: Resolving method speak in class Dog
[your_program] Resolver: Resolving method makeSound in class Dog
[your_program] Resolver: Ending superclass scope for Dog
[your_program] Resolver: Resolving class Puppy with superclass Some(Variable(Token { token_type: Identifier, lexeme: "Dog", literal: None, line: 31 }))
[your_program] Resolver: Resolving local variable 'Dog' at line 31
[your_program]   'Dog' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class Puppy
[your_program] Resolver: Adding 'this' to scope for class Puppy
[your_program] Resolver: Resolving method speak in class Puppy
[your_program] Resolver: Ending superclass scope for Puppy
[your_program] Resolver: Resolving local variable 'Animal' at line 37
[your_program]   'Animal' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'Dog' at line 38
[your_program]   'Dog' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'Puppy' at line 39
[your_program]   'Puppy' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'animal' at line 41
[your_program]   'animal' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'dog' at line 42
[your_program]   'dog' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'puppy' at line 43
[your_program]   'puppy' not found in any scope, assuming global
[tester::#KA5] [test-4] ✓ 3 line(s) match on stdout
[tester::#KA5] [test-4] ✓ Received exit code 0.
[tester::#KA5] Test passed.
[tester::#KY1] Running tests for Stage #KY1 (Inheritance - Inheriting Methods)
[tester::#KY1] [test-1] Running test case: 1
[tester::#KY1] [test-1] Writing contents to ./test.lox:
[tester::#KY1] [test-1.lox] class Doughnut {
[tester::#KY1] [test-1.lox]   cook() {
[tester::#KY1] [test-1.lox]     print "Fry until golden brown.";
[tester::#KY1] [test-1.lox]     }
[tester::#KY1] [test-1.lox]   }
[tester::#KY1] [test-1.lox] 
[tester::#KY1] [test-1.lox] // BostonCream is a subclass of Doughnut
[tester::#KY1] [test-1.lox] class BostonCream < Doughnut {}
[tester::#KY1] [test-1.lox] 
[tester::#KY1] [test-1.lox] // BostonCream class should inherit the cook
[tester::#KY1] [test-1.lox] // method from Doughnut class
[tester::#KY1] [test-1.lox] BostonCream().cook();
[tester::#KY1] [test-1] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class Doughnut with superclass None
[your_program] Fry until golden brown.
[your_program] Resolver: Adding 'this' to scope for class Doughnut
[your_program] Resolver: Resolving method cook in class Doughnut
[your_program] Resolver: Resolving class BostonCream with superclass Some(Variable(Token { token_type: Identifier, lexeme: "Doughnut", literal: None, line: 8 }))
[your_program] Resolver: Resolving local variable 'Doughnut' at line 8
[your_program]   'Doughnut' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class BostonCream
[your_program] Resolver: Adding 'this' to scope for class BostonCream
[your_program] Resolver: Ending superclass scope for BostonCream
[your_program] Resolver: Resolving local variable 'BostonCream' at line 12
[your_program]   'BostonCream' not found in any scope, assuming global
[tester::#KY1] [test-1] ✓ 1 line(s) match on stdout
[tester::#KY1] [test-1] ✓ Received exit code 0.
[tester::#KY1] [test-2] Running test case: 2
[tester::#KY1] [test-2] Writing contents to ./test.lox:
[tester::#KY1] [test-2.lox] class Root {
[tester::#KY1] [test-2.lox]   getName() {
[tester::#KY1] [test-2.lox]     print "Root class";
[tester::#KY1] [test-2.lox]   }
[tester::#KY1] [test-2.lox] }
[tester::#KY1] [test-2.lox] 
[tester::#KY1] [test-2.lox] class Parent < Root {
[tester::#KY1] [test-2.lox]   parentMethod() {
[tester::#KY1] [test-2.lox]     print "Method defined in Parent";
[tester::#KY1] [test-2.lox]   }
[tester::#KY1] [test-2.lox] }
[tester::#KY1] [test-2.lox] 
[tester::#KY1] [test-2.lox] class Child < Parent {
[tester::#KY1] [test-2.lox]   childMethod() {
[tester::#KY1] [test-2.lox]     print "Method defined in Child";
[tester::#KY1] [test-2.lox]   }
[tester::#KY1] [test-2.lox] }
[tester::#KY1] [test-2.lox] 
[tester::#KY1] [test-2.lox] var root = Root();
[tester::#KY1] [test-2.lox] var parent = Parent();
[tester::#KY1] [test-2.lox] var child = Child();
[tester::#KY1] [test-2.lox] 
[tester::#KY1] [test-2.lox] // Root methods are available to all
[tester::#KY1] [test-2.lox] root.getName();
[tester::#KY1] [test-2.lox] parent.getName();
[tester::#KY1] [test-2.lox] child.getName();
[tester::#KY1] [test-2.lox] 
[tester::#KY1] [test-2.lox] // Parent methods are available to Parent and Child
[tester::#KY1] [test-2.lox] parent.parentMethod();
[tester::#KY1] [test-2.lox] child.parentMethod();
[tester::#KY1] [test-2.lox] 
[tester::#KY1] [test-2.lox] // Child methods are only available to Child
[tester::#KY1] [test-2.lox] child.childMethod();
[tester::#KY1] [test-2] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class Root with superclass None
[your_program] Resolver: Adding 'this' to scope for class Root
[your_program] Root class
[your_program] Root class
[your_program] Root class
[your_program] Resolver: Resolving method getName in class Root
[your_program] Method defined in Parent
[your_program] Resolver: Resolving class Parent with superclass Some(Variable(Token { token_type: Identifier, lexeme: "Root", literal: None, line: 7 }))
[your_program] Method defined in Parent
[your_program] Method defined in Child
[your_program] Resolver: Resolving local variable 'Root' at line 7
[your_program]   'Root' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class Parent
[your_program] Resolver: Adding 'this' to scope for class Parent
[your_program] Resolver: Resolving method parentMethod in class Parent
[your_program] Resolver: Ending superclass scope for Parent
[your_program] Resolver: Resolving class Child with superclass Some(Variable(Token { token_type: Identifier, lexeme: "Parent", literal: None, line: 13 }))
[your_program] Resolver: Resolving local variable 'Parent' at line 13
[your_program]   'Parent' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class Child
[your_program] Resolver: Adding 'this' to scope for class Child
[your_program] Resolver: Resolving method childMethod in class Child
[your_program] Resolver: Ending superclass scope for Child
[your_program] Resolver: Resolving local variable 'Root' at line 19
[your_program]   'Root' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'Parent' at line 20
[your_program]   'Parent' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'Child' at line 21
[your_program]   'Child' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'root' at line 24
[your_program]   'root' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'parent' at line 25
[your_program]   'parent' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'child' at line 26
[your_program]   'child' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'parent' at line 29
[your_program]   'parent' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'child' at line 30
[your_program]   'child' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'child' at line 33
[your_program]   'child' not found in any scope, assuming global
[tester::#KY1] [test-2] ✓ 6 line(s) match on stdout
[tester::#KY1] [test-2] ✓ Received exit code 0.
[tester::#KY1] [test-3] Running test case: 3
[tester::#KY1] [test-3] Writing contents to ./test.lox:
[tester::#KY1] [test-3.lox] class Foo {
[tester::#KY1] [test-3.lox]   init() {
[tester::#KY1] [test-3.lox]     this.secret = 42;
[tester::#KY1] [test-3.lox]   }
[tester::#KY1] [test-3.lox] }
[tester::#KY1] [test-3.lox] 
[tester::#KY1] [test-3.lox] // Bar is a subclass of Foo
[tester::#KY1] [test-3.lox] class Bar < Foo {}
[tester::#KY1] [test-3.lox] 
[tester::#KY1] [test-3.lox] // Baz is a subclass of Bar
[tester::#KY1] [test-3.lox] class Baz < Bar {}
[tester::#KY1] [test-3.lox] 
[tester::#KY1] [test-3.lox] var baz = Baz();
[tester::#KY1] [test-3.lox] 
[tester::#KY1] [test-3.lox] // Baz should inherit the constructor from Foo
[tester::#KY1] [test-3.lox] // which should set the secret value to 42
[tester::#KY1] [test-3.lox] print baz.secret;
[tester::#KY1] [test-3] $ ./your_program.sh run test.lox
[your_program] 42
[your_program] Resolver: Resolving class Foo with superclass None
[your_program] Resolver: Adding 'this' to scope for class Foo
[your_program] Resolver: Resolving method init in class Foo
[your_program] Resolver: Resolving local variable 'this' at line 3
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 93888649937552)
[your_program] Resolver: Resolving class Bar with superclass Some(Variable(Token { token_type: Identifier, lexeme: "Foo", literal: None, line: 8 }))
[your_program] Resolver: Resolving local variable 'Foo' at line 8
[your_program]   'Foo' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class Bar
[your_program] Resolver: Adding 'this' to scope for class Bar
[your_program] Resolver: Ending superclass scope for Bar
[your_program] Resolver: Resolving class Baz with superclass Some(Variable(Token { token_type: Identifier, lexeme: "Bar", literal: None, line: 11 }))
[your_program] Resolver: Resolving local variable 'Bar' at line 11
[your_program]   'Bar' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class Baz
[your_program] Resolver: Adding 'this' to scope for class Baz
[your_program] Resolver: Ending superclass scope for Baz
[your_program] Resolver: Resolving local variable 'Baz' at line 13
[your_program]   'Baz' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'baz' at line 17
[your_program]   'baz' not found in any scope, assuming global
[tester::#KY1] [test-3] ✓ 1 line(s) match on stdout
[tester::#KY1] [test-3] ✓ Received exit code 0.
[tester::#KY1] [test-4] Running test case: 4
[tester::#KY1] [test-4] Writing contents to ./test.lox:
[tester::#KY1] [test-4.lox] class world {
[tester::#KY1] [test-4.lox]   inworld() {
[tester::#KY1] [test-4.lox]     print "from world";
[tester::#KY1] [test-4.lox]   }
[tester::#KY1] [test-4.lox] }
[tester::#KY1] [test-4.lox] 
[tester::#KY1] [test-4.lox] class baz < world {
[tester::#KY1] [test-4.lox]   inbaz() {
[tester::#KY1] [test-4.lox]     print "from baz";
[tester::#KY1] [test-4.lox]   }
[tester::#KY1] [test-4.lox] }
[tester::#KY1] [test-4.lox] 
[tester::#KY1] [test-4.lox] class hello < baz {
[tester::#KY1] [test-4.lox]   inhello() {
[tester::#KY1] [test-4.lox]     print "from hello";
[tester::#KY1] [test-4.lox]   }
[tester::#KY1] [test-4.lox] }
[tester::#KY1] [test-4.lox] 
[tester::#KY1] [test-4.lox] // hello should inherit the methods
[tester::#KY1] [test-4.lox] // from both world and baz
[tester::#KY1] [test-4.lox] var hello = hello();
[tester::#KY1] [test-4.lox] hello.inworld();
[tester::#KY1] [test-4.lox] hello.inbaz();
[tester::#KY1] [test-4.lox] hello.inhello();
[tester::#KY1] [test-4] $ ./your_program.sh run test.lox
[your_program] from world
[your_program] from baz
[your_program] from hello
[your_program] Resolver: Resolving class world with superclass None
[your_program] Resolver: Adding 'this' to scope for class world
[your_program] Resolver: Resolving method inworld in class world
[your_program] Resolver: Resolving class baz with superclass Some(Variable(Token { token_type: Identifier, lexeme: "world", literal: None, line: 7 }))
[your_program] Resolver: Resolving local variable 'world' at line 7
[your_program]   'world' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class baz
[your_program] Resolver: Adding 'this' to scope for class baz
[your_program] Resolver: Resolving method inbaz in class baz
[your_program] Resolver: Ending superclass scope for baz
[your_program] Resolver: Resolving class hello with superclass Some(Variable(Token { token_type: Identifier, lexeme: "baz", literal: None, line: 13 }))
[your_program] Resolver: Resolving local variable 'baz' at line 13
[your_program]   'baz' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class hello
[your_program] Resolver: Adding 'this' to scope for class hello
[your_program] Resolver: Resolving method inhello in class hello
[your_program] Resolver: Ending superclass scope for hello
[your_program] Resolver: Resolving local variable 'hello' at line 21
[your_program]   'hello' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'hello' at line 22
[your_program]   'hello' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'hello' at line 23
[your_program]   'hello' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'hello' at line 24
[your_program]   'hello' not found in any scope, assuming global
[tester::#KY1] [test-4] ✓ 3 line(s) match on stdout
[tester::#KY1] [test-4] ✓ Received exit code 0.
[tester::#KY1] Test passed.
[tester::#MF6] Running tests for Stage #MF6 (Inheritance - Class Hierarchy)
[tester::#MF6] [test-1] Running test case: 1
[tester::#MF6] [test-1] Writing contents to ./test.lox:
[tester::#MF6] [test-1.lox] class Doughnut {}
[tester::#MF6] [test-1.lox] 
[tester::#MF6] [test-1.lox] // BostonCream is a subclass of Doughnut
[tester::#MF6] [test-1.lox] class BostonCream < Doughnut {}
[tester::#MF6] [test-1.lox] 
[tester::#MF6] [test-1.lox] print Doughnut();
[tester::#MF6] [test-1.lox] print BostonCream();
[tester::#MF6] [test-1] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class Doughnut with superclass None
[your_program] Doughnut instance
[your_program] Resolver: Adding 'this' to scope for class Doughnut
[your_program] BostonCream instance
[your_program] Resolver: Resolving class BostonCream with superclass Some(Variable(Token { token_type: Identifier, lexeme: "Doughnut", literal: None, line: 4 }))
[your_program] Resolver: Resolving local variable 'Doughnut' at line 4
[your_program]   'Doughnut' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class BostonCream
[your_program] Resolver: Adding 'this' to scope for class BostonCream
[your_program] Resolver: Ending superclass scope for BostonCream
[your_program] Resolver: Resolving local variable 'Doughnut' at line 6
[your_program]   'Doughnut' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'BostonCream' at line 7
[your_program]   'BostonCream' not found in any scope, assuming global
[tester::#MF6] [test-1] ✓ 2 line(s) match on stdout
[tester::#MF6] [test-1] ✓ Received exit code 0.
[tester::#MF6] [test-2] Running test case: 2
[tester::#MF6] [test-2] Writing contents to ./test.lox:
[tester::#MF6] [test-2.lox] {
[tester::#MF6] [test-2.lox]   class A {}
[tester::#MF6] [test-2.lox] 
[tester::#MF6] [test-2.lox]   // B is a subclass of A
[tester::#MF6] [test-2.lox]   class B < A {}
[tester::#MF6] [test-2.lox] 
[tester::#MF6] [test-2.lox]   // C is also a subclass of A
[tester::#MF6] [test-2.lox]   class C < A {}
[tester::#MF6] [test-2.lox] 
[tester::#MF6] [test-2.lox]   print A();
[tester::#MF6] [test-2.lox]   print B();
[tester::#MF6] [test-2.lox]   print C();
[tester::#MF6] [test-2.lox] }
[tester::#MF6] [test-2] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class A with superclass None
[your_program] Resolver: Adding 'this' to scope for class A
[your_program] A instance
[your_program] B instance
[your_program] C instance
[your_program] Resolver: Resolving class B with superclass Some(Variable(Token { token_type: Identifier, lexeme: "A", literal: None, line: 5 }))
[your_program] Resolver: Resolving local variable 'A' at line 5
[your_program]   Checking scope 0: ["B", "A"]
[your_program]   Found 'A' at distance 0 (Expr ID: 94333502777344)
[your_program] Resolver: Adding 'super' to scope for class B
[your_program] Resolver: Adding 'this' to scope for class B
[your_program] Resolver: Ending superclass scope for B
[your_program] Resolver: Resolving class C with superclass Some(Variable(Token { token_type: Identifier, lexeme: "A", literal: None, line: 8 }))
[your_program] Resolver: Resolving local variable 'A' at line 8
[your_program]   Checking scope 0: ["B", "A", "C"]
[your_program]   Found 'A' at distance 0 (Expr ID: 94333502777568)
[your_program] Resolver: Adding 'super' to scope for class C
[your_program] Resolver: Adding 'this' to scope for class C
[your_program] Resolver: Ending superclass scope for C
[your_program] Resolver: Resolving local variable 'A' at line 10
[your_program]   Checking scope 0: ["B", "A", "C"]
[your_program]   Found 'A' at distance 0 (Expr ID: 94333502776832)
[your_program] Resolver: Resolving local variable 'B' at line 11
[your_program]   Checking scope 0: ["B", "A", "C"]
[your_program]   Found 'B' at distance 0 (Expr ID: 94333502776976)
[your_program] Resolver: Resolving local variable 'C' at line 12
[your_program]   Checking scope 0: ["B", "A", "C"]
[your_program]   Found 'C' at distance 0 (Expr ID: 94333502774000)
[tester::#MF6] [test-2] ✓ 3 line(s) match on stdout
[tester::#MF6] [test-2] ✓ Received exit code 0.
[tester::#MF6] [test-3] Running test case: 3
[tester::#MF6] [test-3] Writing contents to ./test.lox:
[tester::#MF6] [test-3.lox] class A {}
[tester::#MF6] [test-3.lox] 
[tester::#MF6] [test-3.lox] fun f() {
[tester::#MF6] [test-3.lox]   // B is a subclass of A
[tester::#MF6] [test-3.lox]   class B < A {}
[tester::#MF6] [test-3.lox]   return B;
[tester::#MF6] [test-3.lox] }
[tester::#MF6] [test-3.lox] 
[tester::#MF6] [test-3.lox] print f();
[tester::#MF6] [test-3] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class A with superclass None
[your_program] Resolver: Adding 'this' to scope for class A
[your_program] Resolver: Resolving class B with superclass Some(Variable(Token { token_type: Identifier, lexeme: "A", literal: None, line: 5 }))
[your_program] Resolver: Resolving local variable 'A' at line 5
[your_program]   Checking scope 0: ["B"]
[your_program]   'A' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class B
[your_program] Resolver: Adding 'this' to scope for class B
[your_program] Resolver: Ending superclass scope for B
[your_program] Resolver: Resolving local variable 'B' at line 6
[your_program]   Checking scope 0: ["B"]
[your_program]   Found 'B' at distance 0 (Expr ID: 94889574457464)
[your_program] Resolver: Resolving local variable 'f' at line 9
[your_program]   'f' not found in any scope, assuming global
[your_program] B
[tester::#MF6] [test-3] ✓ 1 line(s) match on stdout
[tester::#MF6] [test-3] ✓ Received exit code 0.
[tester::#MF6] [test-4] Running test case: 4
[tester::#MF6] [test-4] Writing contents to ./test.lox:
[tester::#MF6] [test-4.lox] class Vehicle {}
[tester::#MF6] [test-4.lox] 
[tester::#MF6] [test-4.lox] // Car is a subclass of Vehicle
[tester::#MF6] [test-4.lox] class Car < Vehicle {}
[tester::#MF6] [test-4.lox] 
[tester::#MF6] [test-4.lox] // Sedan is a subclass of Car
[tester::#MF6] [test-4.lox] class Sedan < Car {}
[tester::#MF6] [test-4.lox] 
[tester::#MF6] [test-4.lox] print Vehicle();
[tester::#MF6] [test-4.lox] print Car();
[tester::#MF6] [test-4.lox] print Sedan();
[tester::#MF6] [test-4.lox] 
[tester::#MF6] [test-4.lox] {
[tester::#MF6] [test-4.lox]   // Truck is a subclass of Vehicle
[tester::#MF6] [test-4.lox]   class Truck < Vehicle {}
[tester::#MF6] [test-4.lox]   print Truck();
[tester::#MF6] [test-4.lox] }
[tester::#MF6] [test-4] $ ./your_program.sh run test.lox
[your_program] Vehicle instance
[your_program] Car instance
[your_program] Sedan instance
[your_program] Truck instance
[your_program] Resolver: Resolving class Vehicle with superclass None
[your_program] Resolver: Adding 'this' to scope for class Vehicle
[your_program] Resolver: Resolving class Car with superclass Some(Variable(Token { token_type: Identifier, lexeme: "Vehicle", literal: None, line: 4 }))
[your_program] Resolver: Resolving local variable 'Vehicle' at line 4
[your_program]   'Vehicle' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class Car
[your_program] Resolver: Adding 'this' to scope for class Car
[your_program] Resolver: Ending superclass scope for Car
[your_program] Resolver: Resolving class Sedan with superclass Some(Variable(Token { token_type: Identifier, lexeme: "Car", literal: None, line: 7 }))
[your_program] Resolver: Resolving local variable 'Car' at line 7
[your_program]   'Car' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class Sedan
[your_program] Resolver: Adding 'this' to scope for class Sedan
[your_program] Resolver: Ending superclass scope for Sedan
[your_program] Resolver: Resolving local variable 'Vehicle' at line 9
[your_program]   'Vehicle' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'Car' at line 10
[your_program]   'Car' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'Sedan' at line 11
[your_program]   'Sedan' not found in any scope, assuming global
[your_program] Resolver: Resolving class Truck with superclass Some(Variable(Token { token_type: Identifier, lexeme: "Vehicle", literal: None, line: 15 }))
[your_program] Resolver: Resolving local variable 'Vehicle' at line 15
[your_program]   Checking scope 0: ["Truck"]
[your_program]   'Vehicle' not found in any scope, assuming global
[your_program] Resolver: Adding 'super' to scope for class Truck
[your_program] Resolver: Adding 'this' to scope for class Truck
[your_program] Resolver: Ending superclass scope for Truck
[your_program] Resolver: Resolving local variable 'Truck' at line 16
[your_program]   Checking scope 0: ["Truck"]
[your_program]   Found 'Truck' at distance 0 (Expr ID: 94279641775088)
[tester::#MF6] [test-4] ✓ 4 line(s) match on stdout
[tester::#MF6] [test-4] ✓ Received exit code 0.
[tester::#MF6] Test passed.
[tester::#EB9] Running tests for Stage #EB9 (Classes - Return within constructors)
[tester::#EB9] [test-1] Running test case: 1
[tester::#EB9] [test-1] Writing contents to ./test.lox:
[tester::#EB9] [test-1.lox] class Person {
[tester::#EB9] [test-1.lox]   init() {
[tester::#EB9] [test-1.lox]     print "hello";
[tester::#EB9] [test-1.lox]     // constructor should return nothing
[tester::#EB9] [test-1.lox]     return;
[tester::#EB9] [test-1.lox]   }
[tester::#EB9] [test-1.lox] }
[tester::#EB9] [test-1.lox] 
[tester::#EB9] [test-1.lox] Person();
[tester::#EB9] [test-1] $ ./your_program.sh run test.lox
[your_program] hello
[your_program] Resolver: Resolving class Person with superclass None
[your_program] Resolver: Adding 'this' to scope for class Person
[your_program] Resolver: Resolving method init in class Person
[your_program] Resolver: Resolving local variable 'Person' at line 9
[your_program]   'Person' not found in any scope, assuming global
[tester::#EB9] [test-1] ✓ 1 line(s) match on stdout
[tester::#EB9] [test-1] ✓ Received exit code 0.
[tester::#EB9] [test-2] Running test case: 2
[tester::#EB9] [test-2] Writing contents to ./test.lox:
[tester::#EB9] [test-2.lox] class ThingDefault {
[tester::#EB9] [test-2.lox]   init() {
[tester::#EB9] [test-2.lox]     this.x = "foo";
[tester::#EB9] [test-2.lox]     this.y = 42;
[tester::#EB9] [test-2.lox]     // constructor should not return the instance
[tester::#EB9] [test-2.lox]     return this; // expect compile error
[tester::#EB9] [test-2.lox]   }
[tester::#EB9] [test-2.lox] }
[tester::#EB9] [test-2.lox] var out = ThingDefault();
[tester::#EB9] [test-2.lox] print out;
[tester::#EB9] [test-2] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class ThingDefault with superclass None
[your_program] Resolver: Adding 'this' to scope for class ThingDefault
[your_program] Resolver: Resolving method init in class ThingDefault
[your_program] Resolver: Resolving local variable 'this' at line 3
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 94683419480368)
[your_program] Resolver: Resolving local variable 'this' at line 4
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 94683419482640)
[your_program] Error: Can't return a value from an initializer at line 6.
[tester::#EB9] [test-2] ✓ 1 line(s) match on stdout
[tester::#EB9] [test-2] ✓ Received exit code 65.
[tester::#EB9] [test-3] Running test case: 3
[tester::#EB9] [test-3] Writing contents to ./test.lox:
[tester::#EB9] [test-3.lox] class Foo {
[tester::#EB9] [test-3.lox]   init() {
[tester::#EB9] [test-3.lox]     // constructor should not return anything
[tester::#EB9] [test-3.lox]     return "something"; // expect compile error
[tester::#EB9] [test-3.lox]   }
[tester::#EB9] [test-3.lox] }
[tester::#EB9] [test-3.lox] 
[tester::#EB9] [test-3.lox] Foo();
[tester::#EB9] [test-3] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class Foo with superclass None
[your_program] Resolver: Adding 'this' to scope for class Foo
[your_program] Resolver: Resolving method init in class Foo
[your_program] Error: Can't return a value from an initializer at line 4.
[tester::#EB9] [test-3] ✓ 1 line(s) match on stdout
[tester::#EB9] [test-3] ✓ Received exit code 65.
[tester::#EB9] [test-4] Running test case: 4
[tester::#EB9] [test-4] Writing contents to ./test.lox:
[tester::#EB9] [test-4.lox] class Foo {
[tester::#EB9] [test-4.lox]   init() {
[tester::#EB9] [test-4.lox]     // just calling the callback should've worked
[tester::#EB9] [test-4.lox]     // but returning it is not allowed
[tester::#EB9] [test-4.lox]     return this.callback(); // expect compile error
[tester::#EB9] [test-4.lox]   }
[tester::#EB9] [test-4.lox] 
[tester::#EB9] [test-4.lox]   callback() {
[tester::#EB9] [test-4.lox]     return "callback";
[tester::#EB9] [test-4.lox]   }
[tester::#EB9] [test-4.lox] }
[tester::#EB9] [test-4.lox] 
[tester::#EB9] [test-4.lox] Foo();
[tester::#EB9] [test-4] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class Foo with superclass None
[your_program] Resolver: Adding 'this' to scope for class Foo
[your_program] Resolver: Resolving method init in class Foo
[your_program] Error: Can't return a value from an initializer at line 5.
[tester::#EB9] [test-4] ✓ 1 line(s) match on stdout
[tester::#EB9] [test-4] ✓ Received exit code 65.
[tester::#EB9] Test passed.
[tester::#OU5] Running tests for Stage #OU5 (Classes - Constructor calls)
[tester::#OU5] [test-1] Running test case: 1
[tester::#OU5] [test-1] Writing contents to ./test.lox:
[tester::#OU5] [test-1.lox] class Default {
[tester::#OU5] [test-1.lox]   // this is the constructor
[tester::#OU5] [test-1.lox]   init() {
[tester::#OU5] [test-1.lox]     // it should be able to set<|SPACE|>    // properties on the instance
[tester::#OU5] [test-1.lox]     this.x = "bar";
[tester::#OU5] [test-1.lox]     this.y = 60;
[tester::#OU5] [test-1.lox]   }
[tester::#OU5] [test-1.lox] }
[tester::#OU5] [test-1.lox] 
[tester::#OU5] [test-1.lox] // the constructor should be called
[tester::#OU5] [test-1.lox] // automatically  when the class is being<|SPACE|>// instantiated
[tester::#OU5] [test-1.lox] print Default().x;
[tester::#OU5] [test-1.lox] print Default().y;
[tester::#OU5] [test-1] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class Default with superclass None
[your_program] Resolver: Adding 'this' to scope for class Default
[your_program] bar
[your_program] 60
[your_program] Resolver: Resolving method init in class Default
[your_program] Resolver: Resolving local variable 'this' at line 6
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 94848842457552)
[your_program] Resolver: Resolving local variable 'this' at line 7
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 94848842459760)
[your_program] Resolver: Resolving local variable 'Default' at line 14
[your_program]   'Default' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'Default' at line 15
[your_program]   'Default' not found in any scope, assuming global
[tester::#OU5] [test-1] ✓ 2 line(s) match on stdout
[tester::#OU5] [test-1] ✓ Received exit code 0.
[tester::#OU5] [test-2] Running test case: 2
[tester::#OU5] [test-2] Writing contents to ./test.lox:
[tester::#OU5] [test-2.lox] class Robot {
[tester::#OU5] [test-2.lox]   // constructors should be able to accept
[tester::#OU5] [test-2.lox]   // one or more parameters
[tester::#OU5] [test-2.lox]   init(model, function) {
[tester::#OU5] [test-2.lox]     this.model = model;
[tester::#OU5] [test-2.lox]     this.function = function;
[tester::#OU5] [test-2.lox]   }
[tester::#OU5] [test-2.lox] }
[tester::#OU5] [test-2.lox] print Robot("R2-D2", "Astromech").model;
[tester::#OU5] [test-2] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class Robot with superclass None
[your_program] Resolver: Adding 'this' to scope for class Robot
[your_program] Resolver: Resolving method init in class Robot
[your_program] R2-D2
[your_program] Resolver: Resolving local variable 'model' at line 5
[your_program]   Checking scope 0: ["model", "function"]
[your_program]   Found 'model' at distance 0 (Expr ID: 94793609990560)
[your_program] Resolver: Resolving local variable 'this' at line 5
[your_program]   Checking scope 0: ["model", "function"]
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 94793609990416)
[your_program] Resolver: Resolving local variable 'function' at line 6
[your_program]   Checking scope 0: ["model", "function"]
[your_program]   Found 'function' at distance 0 (Expr ID: 94793609992864)
[your_program] Resolver: Resolving local variable 'this' at line 6
[your_program]   Checking scope 0: ["model", "function"]
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 94793609992720)
[your_program] Resolver: Resolving local variable 'Robot' at line 9
[your_program]   'Robot' not found in any scope, assuming global
[tester::#OU5] [test-2] ✓ 1 line(s) match on stdout
[tester::#OU5] [test-2] ✓ Received exit code 0.
[tester::#OU5] [test-3] Running test case: 3
[tester::#OU5] [test-3] Writing contents to ./test.lox:
[tester::#OU5] [test-3.lox] class Counter {
[tester::#OU5] [test-3.lox]   init(startValue) {
[tester::#OU5] [test-3.lox]     if (startValue < 0) {
[tester::#OU5] [test-3.lox]       print "startValue can't be negative";
[tester::#OU5] [test-3.lox]       this.count = 0;
[tester::#OU5] [test-3.lox]     } else {
[tester::#OU5] [test-3.lox]       this.count = startValue;
[tester::#OU5] [test-3.lox]     }
[tester::#OU5] [test-3.lox]   }
[tester::#OU5] [test-3.lox] }
[tester::#OU5] [test-3.lox] 
[tester::#OU5] [test-3.lox] // constructor is called automatically here
[tester::#OU5] [test-3.lox] var instance = Counter(-28);
[tester::#OU5] [test-3.lox] print instance.count;
[tester::#OU5] [test-3.lox] 
[tester::#OU5] [test-3.lox] // it should be possible to call the constructor
[tester::#OU5] [test-3.lox] // on a class instance as well
[tester::#OU5] [test-3.lox] print instance.init(28).count;
[tester::#OU5] [test-3] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class Counter with superclass None
[your_program] startValue can't be negative
[your_program] 0
[your_program] 28
[your_program] Resolver: Adding 'this' to scope for class Counter
[your_program] Resolver: Resolving method init in class Counter
[your_program] Resolver: Resolving local variable 'startValue' at line 3
[your_program]   Checking scope 0: ["startValue"]
[your_program]   Found 'startValue' at distance 0 (Expr ID: 93897391753088)
[your_program] Resolver: Resolving local variable 'this' at line 5
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["startValue"]
[your_program]   Checking scope 2: ["this"]
[your_program]   Found 'this' at distance 2 (Expr ID: 93897391754288)
[your_program] Resolver: Resolving local variable 'startValue' at line 7
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["startValue"]
[your_program]   Found 'startValue' at distance 1 (Expr ID: 93897391754960)
[your_program] Resolver: Resolving local variable 'this' at line 7
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["startValue"]
[your_program]   Checking scope 2: ["this"]
[your_program]   Found 'this' at distance 2 (Expr ID: 93897391754816)
[your_program] Resolver: Resolving local variable 'Counter' at line 13
[your_program]   'Counter' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'instance' at line 14
[your_program]   'instance' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'instance' at line 18
[your_program]   'instance' not found in any scope, assuming global
[tester::#OU5] [test-3] ✓ 3 line(s) match on stdout
[tester::#OU5] [test-3] ✓ Received exit code 0.
[tester::#OU5] [test-4] Running test case: 4
[tester::#OU5] [test-4] Writing contents to ./test.lox:
[tester::#OU5] [test-4.lox] class Vehicle {
[tester::#OU5] [test-4.lox]   init(type) {
[tester::#OU5] [test-4.lox]     this.type = type;
[tester::#OU5] [test-4.lox]   }
[tester::#OU5] [test-4.lox] }
[tester::#OU5] [test-4.lox] 
[tester::#OU5] [test-4.lox] class Car {
[tester::#OU5] [test-4.lox]   init(make, model) {
[tester::#OU5] [test-4.lox]     this.make = make;
[tester::#OU5] [test-4.lox]     this.model = model;
[tester::#OU5] [test-4.lox]     this.wheels = "four";
[tester::#OU5] [test-4.lox]   }
[tester::#OU5] [test-4.lox] 
[tester::#OU5] [test-4.lox]   describe() {
[tester::#OU5] [test-4.lox]     // expression across multiple lines should work
[tester::#OU5] [test-4.lox]     print this.make + " " + this.model +
[tester::#OU5] [test-4.lox]     " with " + this.wheels + " wheels";
[tester::#OU5] [test-4.lox]   }
[tester::#OU5] [test-4.lox] }
[tester::#OU5] [test-4.lox] 
[tester::#OU5] [test-4.lox] var vehicle = Vehicle("Generic");
[tester::#OU5] [test-4.lox] print "Generic " + vehicle.type;
[tester::#OU5] [test-4.lox] 
[tester::#OU5] [test-4.lox] var myCar = Car("Toyota", "Corolla");
[tester::#OU5] [test-4.lox] myCar.describe();
[tester::#OU5] [test-4] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class Vehicle with superclass None
[your_program] Resolver: Adding 'this' to scope for class Vehicle
[your_program] Resolver: Resolving method init in class Vehicle
[your_program] Resolver: Resolving local variable 'type' at line 3
[your_program] Generic Generic
[your_program]   Checking scope 0: ["type"]
[your_program]   Found 'type' at distance 0 (Expr ID: 94356127107072)
[your_program] Toyota Corolla with four wheels
[your_program] Resolver: Resolving local variable 'this' at line 3
[your_program]   Checking scope 0: ["type"]
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 94356127106928)
[your_program] Resolver: Resolving class Car with superclass None
[your_program] Resolver: Adding 'this' to scope for class Car
[your_program] Resolver: Resolving method init in class Car
[your_program] Resolver: Resolving local variable 'make' at line 9
[your_program]   Checking scope 0: ["make", "model"]
[your_program]   Found 'make' at distance 0 (Expr ID: 94356127110368)
[your_program] Resolver: Resolving local variable 'this' at line 9
[your_program]   Checking scope 0: ["make", "model"]
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 94356127110224)
[your_program] Resolver: Resolving local variable 'model' at line 10
[your_program]   Checking scope 0: ["make", "model"]
[your_program]   Found 'model' at distance 0 (Expr ID: 94356127111568)
[your_program] Resolver: Resolving local variable 'this' at line 10
[your_program]   Checking scope 0: ["make", "model"]
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 94356127111424)
[your_program] Resolver: Resolving local variable 'this' at line 11
[your_program]   Checking scope 0: ["make", "model"]
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 94356127111712)
[your_program] Resolver: Resolving method describe in class Car
[your_program] Resolver: Resolving local variable 'this' at line 16
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 94356127112912)
[your_program] Resolver: Resolving local variable 'this' at line 16
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 94356127113344)
[your_program] Resolver: Resolving local variable 'this' at line 17
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 94356127114064)
[your_program] Resolver: Resolving local variable 'Vehicle' at line 21
[your_program]   'Vehicle' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'vehicle' at line 22
[your_program]   'vehicle' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'Car' at line 24
[your_program]   'Car' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'myCar' at line 25
[your_program]   'myCar' not found in any scope, assuming global
[tester::#OU5] [test-4] ✓ 2 line(s) match on stdout
[tester::#OU5] [test-4] ✓ Received exit code 0.
[tester::#OU5] Test passed.
[tester::#DG2] Running tests for Stage #DG2 (Classes - Invalid usages of 'this')
[tester::#DG2] [test-1] Running test case: 1
[tester::#DG2] [test-1] Writing contents to ./test.lox:
[tester::#DG2] [test-1.lox] // The this keyword used outside of a class<|SPACE|>// should be a compile error
[tester::#DG2] [test-1.lox] print this;
[tester::#DG2] [test-1] $ ./your_program.sh run test.lox
[your_program] Error: Cannot use 'this' outside of a class at line 3.
[tester::#DG2] [test-1] ✓ 1 line(s) match on stdout
[tester::#DG2] [test-1] ✓ Received exit code 65.
[tester::#DG2] [test-2] Running test case: 2
[tester::#DG2] [test-2] Writing contents to ./test.lox:
[tester::#DG2] [test-2.lox] // using this outside of a class shouldn't work
[tester::#DG2] [test-2.lox] fun notAMethod() {
[tester::#DG2] [test-2.lox]   print this; // expect compile error
[tester::#DG2] [test-2.lox] }
[tester::#DG2] [test-2] $ ./your_program.sh run test.lox
[your_program] Error: Cannot use 'this' outside of a class at line 3.
[tester::#DG2] [test-2] ✓ 1 line(s) match on stdout
[tester::#DG2] [test-2] ✓ Received exit code 65.
[tester::#DG2] [test-3] Running test case: 3
[tester::#DG2] [test-3] Writing contents to ./test.lox:
[tester::#DG2] [test-3.lox] class Person {
[tester::#DG2] [test-3.lox]   sayName() {
[tester::#DG2] [test-3.lox]     // this is not a callable object
[tester::#DG2] [test-3.lox]     print this(); // expect runtime error
[tester::#DG2] [test-3.lox]   }
[tester::#DG2] [test-3.lox] }
[tester::#DG2] [test-3.lox] Person().sayName();
[tester::#DG2] [test-3] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class Person with superclass None
[your_program] Resolver: Adding 'this' to scope for class Person
[your_program] Resolver: Resolving method sayName in class Person
[your_program] Resolver: Resolving local variable 'this' at line 4
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 94356122885168)
[your_program] Resolver: Resolving local variable 'Person' at line 7
[your_program]   'Person' not found in any scope, assuming global
[your_program] Can only call functions, classes, and methods. [line 4]
[tester::#DG2] [test-3] ✓ 1 line(s) match on stdout
[tester::#DG2] [test-3] ✓ Received exit code 70.
[tester::#DG2] [test-4] Running test case: 4
[tester::#DG2] [test-4] Writing contents to ./test.lox:
[tester::#DG2] [test-4.lox] class Confused {
[tester::#DG2] [test-4.lox]   method() {
[tester::#DG2] [test-4.lox]     fun inner(instance) {
[tester::#DG2] [test-4.lox]       // this is a local variable
[tester::#DG2] [test-4.lox]       var feeling = "confused";
[tester::#DG2] [test-4.lox]       // Unless explicitly set, feeling can't be<|SPACE|>      // accessed using this keyword
[tester::#DG2] [test-4.lox]       print this.feeling; // expect runtime error
[tester::#DG2] [test-4.lox]     }
[tester::#DG2] [test-4.lox]     return inner;
[tester::#DG2] [test-4.lox]   }
[tester::#DG2] [test-4.lox] }
[tester::#DG2] [test-4.lox] 
[tester::#DG2] [test-4.lox] var instance = Confused();
[tester::#DG2] [test-4.lox] var m = instance.method();
[tester::#DG2] [test-4.lox] // calling the function returned should work
[tester::#DG2] [test-4.lox] m(instance);
[tester::#DG2] [test-4] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class Confused with superclass None
[your_program] Resolver: Adding 'this' to scope for class Confused
[your_program] Resolver: Resolving method method in class Confused
[your_program] Resolver: Resolving local variable 'this' at line 8
[your_program]   Checking scope 0: ["instance", "feeling"]
[your_program]   Checking scope 1: ["inner"]
[your_program]   Checking scope 2: ["this"]
[your_program]   Found 'this' at distance 2 (Expr ID: 94134835030768)
[your_program] Resolver: Resolving local variable 'inner' at line 10
[your_program]   Checking scope 0: ["inner"]
[your_program]   Found 'inner' at distance 0 (Expr ID: 94134835031144)
[your_program] Resolver: Resolving local variable 'Confused' at line 14
[your_program]   'Confused' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'instance' at line 15
[your_program]   'instance' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'm' at line 17
[your_program]   'm' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'instance' at line 17
[your_program]   'instance' not found in any scope, assuming global
[your_program] Undefined property 'feeling'. [line 8]
[tester::#DG2] [test-4] ✓ 1 line(s) match on stdout
[tester::#DG2] [test-4] ✓ Received exit code 70.
[tester::#DG2] Test passed.
[tester::#YD7] Running tests for Stage #YD7 (Classes - The 'this' keyword)
[tester::#YD7] [test-1] Running test case: 1
[tester::#YD7] [test-1] Writing contents to ./test.lox:
[tester::#YD7] [test-1.lox] class Spaceship {
[tester::#YD7] [test-1.lox]   identify() {
[tester::#YD7] [test-1.lox]     // this should be bound to the instance
[tester::#YD7] [test-1.lox]     print this;
[tester::#YD7] [test-1.lox]   }
[tester::#YD7] [test-1.lox] }
[tester::#YD7] [test-1.lox] 
[tester::#YD7] [test-1.lox] // Calling a method on a class instance should work
[tester::#YD7] [test-1.lox] Spaceship().identify();
[tester::#YD7] [test-1] $ ./your_program.sh run test.lox
[your_program] Spaceship instance
[your_program] Resolver: Resolving class Spaceship with superclass None
[your_program] Resolver: Adding 'this' to scope for class Spaceship
[your_program] Resolver: Resolving method identify in class Spaceship
[your_program] Resolver: Resolving local variable 'this' at line 4
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 94574698720344)
[your_program] Resolver: Resolving local variable 'Spaceship' at line 9
[your_program]   'Spaceship' not found in any scope, assuming global
[tester::#YD7] [test-1] ✓ 1 line(s) match on stdout
[tester::#YD7] [test-1] ✓ Received exit code 0.
[tester::#YD7] [test-2] Running test case: 2
[tester::#YD7] [test-2] Writing contents to ./test.lox:
[tester::#YD7] [test-2.lox] class Calculator {
[tester::#YD7] [test-2.lox]   add(a, b) {
[tester::#YD7] [test-2.lox]     // this should be bound to the instance
[tester::#YD7] [test-2.lox]     return a + b + this.memory;
[tester::#YD7] [test-2.lox]   }
[tester::#YD7] [test-2.lox] }
[tester::#YD7] [test-2.lox] 
[tester::#YD7] [test-2.lox] var calc = Calculator();
[tester::#YD7] [test-2.lox] // Instance properties should be accessible using<|SPACE|>// the this keyword
[tester::#YD7] [test-2.lox] calc.memory = 31;
[tester::#YD7] [test-2.lox] print calc.add(98, 1);
[tester::#YD7] [test-2] $ ./your_program.sh run test.lox
[your_program] 130
[your_program] Resolver: Resolving class Calculator with superclass None
[your_program] Resolver: Adding 'this' to scope for class Calculator
[your_program] Resolver: Resolving method add in class Calculator
[your_program] Resolver: Resolving local variable 'a' at line 4
[your_program]   Checking scope 0: ["a", "b"]
[your_program]   Found 'a' at distance 0 (Expr ID: 94404673402512)
[your_program] Resolver: Resolving local variable 'b' at line 4
[your_program]   Checking scope 0: ["a", "b"]
[your_program]   Found 'b' at distance 0 (Expr ID: 94404673402656)
[your_program] Resolver: Resolving local variable 'this' at line 4
[your_program]   Checking scope 0: ["a", "b"]
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 94404673402800)
[your_program] Resolver: Resolving local variable 'Calculator' at line 8
[your_program]   'Calculator' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'calc' at line 11
[your_program]   'calc' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'calc' at line 12
[your_program]   'calc' not found in any scope, assuming global
[tester::#YD7] [test-2] ✓ 1 line(s) match on stdout
[tester::#YD7] [test-2] ✓ Received exit code 0.
[tester::#YD7] [test-3] Running test case: 3
[tester::#YD7] [test-3] Writing contents to ./test.lox:
[tester::#YD7] [test-3.lox] class Animal {
[tester::#YD7] [test-3.lox]   makeSound() {
[tester::#YD7] [test-3.lox]     print this.sound;
[tester::#YD7] [test-3.lox]   }
[tester::#YD7] [test-3.lox] <|SPACE|>  identify() {
[tester::#YD7] [test-3.lox]     print this.species;
[tester::#YD7] [test-3.lox]   }
[tester::#YD7] [test-3.lox] }
[tester::#YD7] [test-3.lox] 
[tester::#YD7] [test-3.lox] var dog = Animal();
[tester::#YD7] [test-3.lox] dog.sound = "Woof";
[tester::#YD7] [test-3.lox] dog.species = "Dog";
[tester::#YD7] [test-3.lox] 
[tester::#YD7] [test-3.lox] var cat = Animal();
[tester::#YD7] [test-3.lox] cat.sound = "Meow";
[tester::#YD7] [test-3.lox] cat.species = "Cat";
[tester::#YD7] [test-3.lox] 
[tester::#YD7] [test-3.lox] // The this keyword should be bound to the<|SPACE|>// class instance that the method is called on
[tester::#YD7] [test-3.lox] cat.makeSound = dog.makeSound;
[tester::#YD7] [test-3.lox] dog.identify = cat.identify;
[tester::#YD7] [test-3.lox] 
[tester::#YD7] [test-3.lox] cat.makeSound(); // expect: Woof
[tester::#YD7] [test-3.lox] dog.identify(); // expect: Cat
[tester::#YD7] [test-3] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class Animal with superclass None
[your_program] Resolver: Adding 'this' to scope for class Animal
[your_program] Resolver: Resolving method makeSound in class Animal
[your_program] Resolver: Resolving local variable 'this' at line 3
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 94832419100528)
[your_program] Resolver: Resolving method identify in class Animal
[your_program] Resolver: Resolving local variable 'this' at line 7
[your_program]   Checking scope 0: []
[your_program] Woof
[your_program] Cat
[your_program]   Checking scope 1: ["this"]
[your_program]   Found 'this' at distance 1 (Expr ID: 94832419102496)
[your_program] Resolver: Resolving local variable 'Animal' at line 11
[your_program]   'Animal' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'dog' at line 12
[your_program]   'dog' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'dog' at line 13
[your_program]   'dog' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'Animal' at line 15
[your_program]   'Animal' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'cat' at line 16
[your_program]   'cat' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'cat' at line 17
[your_program]   'cat' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'dog' at line 21
[your_program]   'dog' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'cat' at line 21
[your_program]   'cat' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'cat' at line 22
[your_program]   'cat' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'dog' at line 22
[your_program]   'dog' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'cat' at line 24
[your_program]   'cat' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'dog' at line 25
[your_program]   'dog' not found in any scope, assuming global
[tester::#YD7] [test-3] ✓ 2 line(s) match on stdout
[tester::#YD7] [test-3] ✓ Received exit code 0.
[tester::#YD7] [test-4] Running test case: 4
[tester::#YD7] [test-4] Writing contents to ./test.lox:
[tester::#YD7] [test-4.lox] class Wizard {
[tester::#YD7] [test-4.lox]   getSpellCaster() {
[tester::#YD7] [test-4.lox]     fun castSpell() {
[tester::#YD7] [test-4.lox]       print this;
[tester::#YD7] [test-4.lox]       print "Casting spell as " + this.name;
[tester::#YD7] [test-4.lox]     }
[tester::#YD7] [test-4.lox] 
[tester::#YD7] [test-4.lox]     // Functions are first-class objects in Lox
[tester::#YD7] [test-4.lox]     return castSpell;
[tester::#YD7] [test-4.lox]   }
[tester::#YD7] [test-4.lox] }
[tester::#YD7] [test-4.lox] 
[tester::#YD7] [test-4.lox] var wizard = Wizard();
[tester::#YD7] [test-4.lox] wizard.name = "Merlin";
[tester::#YD7] [test-4.lox] 
[tester::#YD7] [test-4.lox] // Calling an instance method that returns a<|SPACE|>// function should work
[tester::#YD7] [test-4.lox] wizard.getSpellCaster()();
[tester::#YD7] [test-4] $ ./your_program.sh run test.lox
[your_program] Wizard instance
[your_program] Resolver: Resolving class Wizard with superclass None
[your_program] Resolver: Adding 'this' to scope for class Wizard
[your_program] Casting spell as Merlin
[your_program] Resolver: Resolving method getSpellCaster in class Wizard
[your_program] Resolver: Resolving local variable 'this' at line 4
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["castSpell"]
[your_program]   Checking scope 2: ["this"]
[your_program]   Found 'this' at distance 2 (Expr ID: 94107744872248)
[your_program] Resolver: Resolving local variable 'this' at line 5
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["castSpell"]
[your_program]   Checking scope 2: ["this"]
[your_program]   Found 'this' at distance 2 (Expr ID: 94107744873152)
[your_program] Resolver: Resolving local variable 'castSpell' at line 9
[your_program]   Checking scope 0: ["castSpell"]
[your_program]   Found 'castSpell' at distance 0 (Expr ID: 94107744873816)
[your_program] Resolver: Resolving local variable 'Wizard' at line 13
[your_program]   'Wizard' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'wizard' at line 14
[your_program]   'wizard' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'wizard' at line 18
[your_program]   'wizard' not found in any scope, assuming global
[tester::#YD7] [test-4] ✓ 2 line(s) match on stdout
[tester::#YD7] [test-4] ✓ Received exit code 0.
[tester::#YD7] Test passed.
[tester::#QR2] Running tests for Stage #QR2 (Classes - Instance Methods)
[tester::#QR2] [test-1] Running test case: 1
[tester::#QR2] [test-1] Writing contents to ./test.lox:
[tester::#QR2] [test-1.lox] class Robot {
[tester::#QR2] [test-1.lox]   beep() {
[tester::#QR2] [test-1.lox]     print "Beep boop!";
[tester::#QR2] [test-1.lox]   }
[tester::#QR2] [test-1.lox] }
[tester::#QR2] [test-1.lox] 
[tester::#QR2] [test-1.lox] var r2d2 = Robot();
[tester::#QR2] [test-1.lox] // Calling a method on an instance should work
[tester::#QR2] [test-1.lox] r2d2.beep();
[tester::#QR2] [test-1.lox] 
[tester::#QR2] [test-1.lox] // Calling a method on a class instance should work
[tester::#QR2] [test-1.lox] Robot().beep();
[tester::#QR2] [test-1] $ ./your_program.sh run test.lox
[your_program] Beep boop!
[your_program] Beep boop!
[your_program] Resolver: Resolving class Robot with superclass None
[your_program] Resolver: Adding 'this' to scope for class Robot
[your_program] Resolver: Resolving method beep in class Robot
[your_program] Resolver: Resolving local variable 'Robot' at line 7
[your_program]   'Robot' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'r2d2' at line 9
[your_program]   'r2d2' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'Robot' at line 12
[your_program]   'Robot' not found in any scope, assuming global
[tester::#QR2] [test-1] ✓ 2 line(s) match on stdout
[tester::#QR2] [test-1] ✓ Received exit code 0.
[tester::#QR2] [test-2] Running test case: 2
[tester::#QR2] [test-2] Writing contents to ./test.lox:
[tester::#QR2] [test-2.lox] {
[tester::#QR2] [test-2.lox]   class Foo {
[tester::#QR2] [test-2.lox]     returnSelf() {
[tester::#QR2] [test-2.lox]       // Should be able to return the class itself
[tester::#QR2] [test-2.lox]       return Foo;
[tester::#QR2] [test-2.lox]     }
[tester::#QR2] [test-2.lox]   }
[tester::#QR2] [test-2.lox] 
[tester::#QR2] [test-2.lox]   // Calling a method on an instance should work
[tester::#QR2] [test-2.lox]   print Foo().returnSelf();
[tester::#QR2] [test-2.lox] }
[tester::#QR2] [test-2] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class Foo with superclass None
[your_program] Resolver: Adding 'this' to scope for class Foo
[your_program] Resolver: Resolving method returnSelf in class Foo
[your_program] Foo
[your_program] Resolver: Resolving local variable 'Foo' at line 5
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["this"]
[your_program]   Checking scope 2: ["Foo"]
[your_program]   Found 'Foo' at distance 2 (Expr ID: 94023677852776)
[your_program] Resolver: Resolving local variable 'Foo' at line 10
[your_program]   Checking scope 0: ["Foo"]
[your_program]   Found 'Foo' at distance 0 (Expr ID: 94023677854592)
[tester::#QR2] [test-2] ✓ 1 line(s) match on stdout
[tester::#QR2] [test-2] ✓ Received exit code 0.
[tester::#QR2] [test-3] Running test case: 3
[tester::#QR2] [test-3] Writing contents to ./test.lox:
[tester::#QR2] [test-3.lox] class Wizard {
[tester::#QR2] [test-3.lox]   castSpell(spell) {
[tester::#QR2] [test-3.lox]     // Methods should be able to accept a parameter
[tester::#QR2] [test-3.lox]     print "Casting a magical spell: " + spell;
[tester::#QR2] [test-3.lox]   }
[tester::#QR2] [test-3.lox] }
[tester::#QR2] [test-3.lox] 
[tester::#QR2] [test-3.lox] class Dragon {
[tester::#QR2] [test-3.lox]   // Methods should be able to accept multiple<|SPACE|>  // parameters
[tester::#QR2] [test-3.lox]   breatheFire(fire, intensity) {
[tester::#QR2] [test-3.lox]     print "Breathing " + fire + " with intensity: "
[tester::#QR2] [test-3.lox]     + intensity;
[tester::#QR2] [test-3.lox]   }
[tester::#QR2] [test-3.lox] }
[tester::#QR2] [test-3.lox] 
[tester::#QR2] [test-3.lox] var merlin = Wizard();
[tester::#QR2] [test-3.lox] var smaug = Dragon();
[tester::#QR2] [test-3.lox] 
[tester::#QR2] [test-3.lox] if (true) {
[tester::#QR2] [test-3.lox]   var action = merlin.castSpell;
[tester::#QR2] [test-3.lox]   action("Fireball");
[tester::#QR2] [test-3.lox] } else {
[tester::#QR2] [test-3.lox]   var action = smaug.breatheFire;
[tester::#QR2] [test-3.lox]   action("Fire", "100");
[tester::#QR2] [test-3.lox] }
[tester::#QR2] [test-3] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class Wizard with superclass None
[your_program] Resolver: Adding 'this' to scope for class Wizard
[your_program] Casting a magical spell: Fireball
[your_program] Resolver: Resolving method castSpell in class Wizard
[your_program] Resolver: Resolving local variable 'spell' at line 4
[your_program]   Checking scope 0: ["spell"]
[your_program]   Found 'spell' at distance 0 (Expr ID: 94464976128144)
[your_program] Resolver: Resolving class Dragon with superclass None
[your_program] Resolver: Adding 'this' to scope for class Dragon
[your_program] Resolver: Resolving method breatheFire in class Dragon
[your_program] Resolver: Resolving local variable 'fire' at line 12
[your_program]   Checking scope 0: ["intensity", "fire"]
[your_program]   Found 'fire' at distance 0 (Expr ID: 94464976131440)
[your_program] Resolver: Resolving local variable 'intensity' at line 13
[your_program]   Checking scope 0: ["intensity", "fire"]
[your_program]   Found 'intensity' at distance 0 (Expr ID: 94464976132016)
[your_program] Resolver: Resolving local variable 'Wizard' at line 17
[your_program]   'Wizard' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'Dragon' at line 18
[your_program]   'Dragon' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'merlin' at line 21
[your_program]   Checking scope 0: ["action"]
[your_program]   'merlin' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'action' at line 22
[your_program]   Checking scope 0: ["action"]
[your_program]   Found 'action' at distance 0 (Expr ID: 94464976135328)
[your_program] Resolver: Resolving local variable 'smaug' at line 24
[your_program]   Checking scope 0: ["action"]
[your_program]   'smaug' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'action' at line 25
[your_program]   Checking scope 0: ["action"]
[your_program]   Found 'action' at distance 0 (Expr ID: 94464976135856)
[tester::#QR2] [test-3] ✓ 1 line(s) match on stdout
[tester::#QR2] [test-3] ✓ Received exit code 0.
[tester::#QR2] [test-4] Running test case: 4
[tester::#QR2] [test-4] Writing contents to ./test.lox:
[tester::#QR2] [test-4.lox] class Superhero {
[tester::#QR2] [test-4.lox]   // Methods should be able to accept a parameter
[tester::#QR2] [test-4.lox]   useSpecialPower(hero) {
[tester::#QR2] [test-4.lox]     print "Using power: " + hero.specialPower;
[tester::#QR2] [test-4.lox]   }
[tester::#QR2] [test-4.lox] 
[tester::#QR2] [test-4.lox]   // Methods should be able to accept a parameter
[tester::#QR2] [test-4.lox]   // of any type
[tester::#QR2] [test-4.lox]   hasSpecialPower(hero) {
[tester::#QR2] [test-4.lox]     return hero.specialPower;
[tester::#QR2] [test-4.lox]   }
[tester::#QR2] [test-4.lox] 
[tester::#QR2] [test-4.lox]   // Methods should be able to accept class<|SPACE|>  // instances as parameters and then update their<|SPACE|>  // properties
[tester::#QR2] [test-4.lox]   giveSpecialPower(hero, power) {
[tester::#QR2] [test-4.lox]     hero.specialPower = power;
[tester::#QR2] [test-4.lox]   }
[tester::#QR2] [test-4.lox] }
[tester::#QR2] [test-4.lox] 
[tester::#QR2] [test-4.lox] fun performHeroics(hero, superheroClass) {
[tester::#QR2] [test-4.lox]   if (superheroClass.hasSpecialPower(hero)) {
[tester::#QR2] [test-4.lox]     superheroClass.useSpecialPower(hero);
[tester::#QR2] [test-4.lox]   } else {
[tester::#QR2] [test-4.lox]     print "No special power available";
[tester::#QR2] [test-4.lox]   }
[tester::#QR2] [test-4.lox] }
[tester::#QR2] [test-4.lox] 
[tester::#QR2] [test-4.lox] var superman = Superhero();
[tester::#QR2] [test-4.lox] var heroClass = Superhero();
[tester::#QR2] [test-4.lox] 
[tester::#QR2] [test-4.lox] if (false) {
[tester::#QR2] [test-4.lox]   heroClass.giveSpecialPower(superman, "Flight");
[tester::#QR2] [test-4.lox] } else {
[tester::#QR2] [test-4.lox]   heroClass.giveSpecialPower(superman, "Strength");
[tester::#QR2] [test-4.lox] }
[tester::#QR2] [test-4.lox] 
[tester::#QR2] [test-4.lox] performHeroics(superman, heroClass);
[tester::#QR2] [test-4] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class Superhero with superclass None
[your_program] Resolver: Adding 'this' to scope for class Superhero
[your_program] Using power: Strength
[your_program] Resolver: Resolving method useSpecialPower in class Superhero
[your_program] Resolver: Resolving local variable 'hero' at line 4
[your_program]   Checking scope 0: ["hero"]
[your_program]   Found 'hero' at distance 0 (Expr ID: 94137390123312)
[your_program] Resolver: Resolving method hasSpecialPower in class Superhero
[your_program] Resolver: Resolving local variable 'hero' at line 10
[your_program]   Checking scope 0: ["hero"]
[your_program]   Found 'hero' at distance 0 (Expr ID: 94137390125840)
[your_program] Resolver: Resolving method giveSpecialPower in class Superhero
[your_program] Resolver: Resolving local variable 'power' at line 17
[your_program]   Checking scope 0: ["hero", "power"]
[your_program]   Found 'power' at distance 0 (Expr ID: 94137390127312)
[your_program] Resolver: Resolving local variable 'hero' at line 17
[your_program]   Checking scope 0: ["hero", "power"]
[your_program]   Found 'hero' at distance 0 (Expr ID: 94137390127168)
[your_program] Resolver: Resolving local variable 'superheroClass' at line 22
[your_program]   Checking scope 0: ["hero", "superheroClass"]
[your_program]   Found 'superheroClass' at distance 0 (Expr ID: 94137390129552)
[your_program] Resolver: Resolving local variable 'hero' at line 22
[your_program]   Checking scope 0: ["hero", "superheroClass"]
[your_program]   Found 'hero' at distance 0 (Expr ID: 94137390113376)
[your_program] Resolver: Resolving local variable 'superheroClass' at line 23
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["hero", "superheroClass"]
[your_program]   Found 'superheroClass' at distance 1 (Expr ID: 94137390129840)
[your_program] Resolver: Resolving local variable 'hero' at line 23
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["hero", "superheroClass"]
[your_program]   Found 'hero' at distance 1 (Expr ID: 94137390129984)
[your_program] Resolver: Resolving local variable 'Superhero' at line 29
[your_program]   'Superhero' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'Superhero' at line 30
[your_program]   'Superhero' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'heroClass' at line 33
[your_program]   Checking scope 0: []
[your_program]   'heroClass' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'superman' at line 33
[your_program]   Checking scope 0: []
[your_program]   'superman' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'heroClass' at line 35
[your_program]   Checking scope 0: []
[your_program]   'heroClass' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'superman' at line 35
[your_program]   Checking scope 0: []
[your_program]   'superman' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'performHeroics' at line 38
[your_program]   'performHeroics' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'superman' at line 38
[your_program]   'superman' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'heroClass' at line 38
[your_program]   'heroClass' not found in any scope, assuming global
[tester::#QR2] [test-4] ✓ 1 line(s) match on stdout
[tester::#QR2] [test-4] ✓ Received exit code 0.
[tester::#QR2] Test passed.
[tester::#YF3] Running tests for Stage #YF3 (Classes - Getters & Setters)
[tester::#YF3] [test-1] Running test case: 1
[tester::#YF3] [test-1] Writing contents to ./test.lox:
[tester::#YF3] [test-1.lox] class Spaceship {}
[tester::#YF3] [test-1.lox] var falcon = Spaceship();
[tester::#YF3] [test-1.lox] 
[tester::#YF3] [test-1.lox] // Setting properties on an instance should work
[tester::#YF3] [test-1.lox] falcon.name = "Millennium Falcon";
[tester::#YF3] [test-1.lox] falcon.speed = 75.5;
[tester::#YF3] [test-1.lox] 
[tester::#YF3] [test-1.lox] // Getting properties on an instance should work
[tester::#YF3] [test-1.lox] print "Ship details:";
[tester::#YF3] [test-1.lox] print falcon.name;
[tester::#YF3] [test-1.lox] print falcon.speed;
[tester::#YF3] [test-1] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class Spaceship with superclass None
[your_program] Resolver: Adding 'this' to scope for class Spaceship
[your_program] Resolver: Resolving local variable 'Spaceship' at line 2
[your_program]   'Spaceship' not found in any scope, assuming global
[your_program] Ship details:
[your_program] Millennium Falcon
[your_program] Resolver: Resolving local variable 'falcon' at line 5
[your_program] 75.5
[your_program]   'falcon' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'falcon' at line 6
[your_program]   'falcon' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'falcon' at line 10
[your_program]   'falcon' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'falcon' at line 11
[your_program]   'falcon' not found in any scope, assuming global
[tester::#YF3] [test-1] ✓ 3 line(s) match on stdout
[tester::#YF3] [test-1] ✓ Received exit code 0.
[tester::#YF3] [test-2] Running test case: 2
[tester::#YF3] [test-2] Writing contents to ./test.lox:
[tester::#YF3] [test-2.lox] class Robot {}
[tester::#YF3] [test-2.lox] var r2d2 = Robot();
[tester::#YF3] [test-2.lox] 
[tester::#YF3] [test-2.lox] // Setting properties on an instance should work
[tester::#YF3] [test-2.lox] r2d2.model = "Astromech";
[tester::#YF3] [test-2.lox] r2d2.operational = true;
[tester::#YF3] [test-2.lox] 
[tester::#YF3] [test-2.lox] // Getting properties on an instance should work
[tester::#YF3] [test-2.lox] if (r2d2.operational) {
[tester::#YF3] [test-2.lox]   print r2d2.model;
[tester::#YF3] [test-2.lox]   r2d2.mission = "Navigate hyperspace";
[tester::#YF3] [test-2.lox]   print r2d2.mission;
[tester::#YF3] [test-2.lox] }
[tester::#YF3] [test-2] $ ./your_program.sh run test.lox
[your_program] Astromech
[your_program] Resolver: Resolving class Robot with superclass None
[your_program] Resolver: Adding 'this' to scope for class Robot
[your_program] Resolver: Resolving local variable 'Robot' at line 2
[your_program] Navigate hyperspace
[your_program]   'Robot' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'r2d2' at line 5
[your_program]   'r2d2' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'r2d2' at line 6
[your_program]   'r2d2' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'r2d2' at line 9
[your_program]   'r2d2' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'r2d2' at line 10
[your_program]   Checking scope 0: []
[your_program]   'r2d2' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'r2d2' at line 11
[your_program]   Checking scope 0: []
[your_program]   'r2d2' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'r2d2' at line 12
[your_program]   Checking scope 0: []
[your_program]   'r2d2' not found in any scope, assuming global
[tester::#YF3] [test-2] ✓ 2 line(s) match on stdout
[tester::#YF3] [test-2] ✓ Received exit code 0.
[tester::#YF3] [test-3] Running test case: 3
[tester::#YF3] [test-3] Writing contents to ./test.lox:
[tester::#YF3] [test-3.lox] class Superhero {}
[tester::#YF3] [test-3.lox] var batman = Superhero();
[tester::#YF3] [test-3.lox] var superman = Superhero();
[tester::#YF3] [test-3.lox] 
[tester::#YF3] [test-3.lox] // Setting properties on an instance should work
[tester::#YF3] [test-3.lox] batman.name = "Batman";
[tester::#YF3] [test-3.lox] batman.called = 25;
[tester::#YF3] [test-3.lox] 
[tester::#YF3] [test-3.lox] // Setting properties on an instance should work
[tester::#YF3] [test-3.lox] superman.name = "Superman";
[tester::#YF3] [test-3.lox] superman.called = 40;
[tester::#YF3] [test-3.lox] 
[tester::#YF3] [test-3.lox] // Getting properties on an instance should work
[tester::#YF3] [test-3.lox] print "Times " + superman.name + " was called: ";
[tester::#YF3] [test-3.lox] print superman.called;
[tester::#YF3] [test-3.lox] print "Times " + batman.name + " was called: ";
[tester::#YF3] [test-3.lox] print batman.called;
[tester::#YF3] [test-3] $ ./your_program.sh run test.lox
[your_program] Times Superman was called: 
[your_program] 40
[your_program] Times Batman was called: 
[your_program] 25
[your_program] Resolver: Resolving class Superhero with superclass None
[your_program] Resolver: Adding 'this' to scope for class Superhero
[your_program] Resolver: Resolving local variable 'Superhero' at line 2
[your_program]   'Superhero' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'Superhero' at line 3
[your_program]   'Superhero' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'batman' at line 6
[your_program]   'batman' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'batman' at line 7
[your_program]   'batman' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'superman' at line 10
[your_program]   'superman' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'superman' at line 11
[your_program]   'superman' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'superman' at line 14
[your_program]   'superman' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'superman' at line 15
[your_program]   'superman' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'batman' at line 16
[your_program]   'batman' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'batman' at line 17
[your_program]   'batman' not found in any scope, assuming global
[tester::#YF3] [test-3] ✓ 4 line(s) match on stdout
[tester::#YF3] [test-3] ✓ Received exit code 0.
[tester::#YF3] [test-4] Running test case: 4
[tester::#YF3] [test-4] Writing contents to ./test.lox:
[tester::#YF3] [test-4.lox] class Wizard {}
[tester::#YF3] [test-4.lox] var gandalf = Wizard();
[tester::#YF3] [test-4.lox] 
[tester::#YF3] [test-4.lox] gandalf.color = "Grey";
[tester::#YF3] [test-4.lox] gandalf.power = nil;
[tester::#YF3] [test-4.lox] print gandalf.color;
[tester::#YF3] [test-4.lox] 
[tester::#YF3] [test-4.lox] // functions should be able to accept class<|SPACE|>// instances and get or set properties on them
[tester::#YF3] [test-4.lox] fun promote(wizard) {
[tester::#YF3] [test-4.lox]   wizard.color = "White";
[tester::#YF3] [test-4.lox]   if (false) {
[tester::#YF3] [test-4.lox]     wizard.power = 100;
[tester::#YF3] [test-4.lox]   } else {
[tester::#YF3] [test-4.lox]     wizard.power = 0;
[tester::#YF3] [test-4.lox]   }
[tester::#YF3] [test-4.lox] }
[tester::#YF3] [test-4.lox] 
[tester::#YF3] [test-4.lox] promote(gandalf);
[tester::#YF3] [test-4.lox] print gandalf.color;
[tester::#YF3] [test-4.lox] print gandalf.power;
[tester::#YF3] [test-4] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class Wizard with superclass None
[your_program] Resolver: Adding 'this' to scope for class Wizard
[your_program] Grey
[your_program] White
[your_program] 0
[your_program] Resolver: Resolving local variable 'Wizard' at line 2
[your_program]   'Wizard' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'gandalf' at line 4
[your_program]   'gandalf' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'gandalf' at line 5
[your_program]   'gandalf' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'gandalf' at line 6
[your_program]   'gandalf' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'wizard' at line 11
[your_program]   Checking scope 0: ["wizard"]
[your_program]   Found 'wizard' at distance 0 (Expr ID: 93914458711312)
[your_program] Resolver: Resolving local variable 'wizard' at line 13
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["wizard"]
[your_program]   Found 'wizard' at distance 1 (Expr ID: 93914458708960)
[your_program] Resolver: Resolving local variable 'wizard' at line 15
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["wizard"]
[your_program]   Found 'wizard' at distance 1 (Expr ID: 93914458715408)
[your_program] Resolver: Resolving local variable 'promote' at line 19
[your_program]   'promote' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'gandalf' at line 19
[your_program]   'gandalf' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'gandalf' at line 20
[your_program]   'gandalf' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'gandalf' at line 21
[your_program]   'gandalf' not found in any scope, assuming global
[tester::#YF3] [test-4] ✓ 3 line(s) match on stdout
[tester::#YF3] [test-4] ✓ Received exit code 0.
[tester::#YF3] Test passed.
[tester::#YK8] Running tests for Stage #YK8 (Classes - Class Instances)
[tester::#YK8] [test-1] Running test case: 1
[tester::#YK8] [test-1] Writing contents to ./test.lox:
[tester::#YK8] [test-1.lox] // Class instantiation
[tester::#YK8] [test-1.lox] class Spaceship {}
[tester::#YK8] [test-1.lox] var falcon = Spaceship();
[tester::#YK8] [test-1.lox] print falcon;
[tester::#YK8] [test-1] $ ./your_program.sh run test.lox
[your_program] Spaceship instance
[your_program] Resolver: Resolving class Spaceship with superclass None
[your_program] Resolver: Adding 'this' to scope for class Spaceship
[your_program] Resolver: Resolving local variable 'Spaceship' at line 3
[your_program]   'Spaceship' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'falcon' at line 4
[your_program]   'falcon' not found in any scope, assuming global
[tester::#YK8] [test-1] ✓ 1 line(s) match on stdout
[tester::#YK8] [test-1] ✓ Received exit code 0.
[tester::#YK8] [test-2] Running test case: 2
[tester::#YK8] [test-2] Writing contents to ./test.lox:
[tester::#YK8] [test-2.lox] // Instantiating multiple instances of a class
[tester::#YK8] [test-2.lox] // should work
[tester::#YK8] [test-2.lox] class Robot {}
[tester::#YK8] [test-2.lox] var r1 = Robot();
[tester::#YK8] [test-2.lox] var r2 = Robot();
[tester::#YK8] [test-2.lox] 
[tester::#YK8] [test-2.lox] print "Created multiple robots:";
[tester::#YK8] [test-2.lox] print r1;
[tester::#YK8] [test-2.lox] print r2;
[tester::#YK8] [test-2] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class Robot with superclass None
[your_program] Resolver: Adding 'this' to scope for class Robot
[your_program] Created multiple robots:
[your_program] Robot instance
[your_program] Robot instance
[your_program] Resolver: Resolving local variable 'Robot' at line 4
[your_program]   'Robot' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'Robot' at line 5
[your_program]   'Robot' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'r1' at line 8
[your_program]   'r1' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'r2' at line 9
[your_program]   'r2' not found in any scope, assuming global
[tester::#YK8] [test-2] ✓ 3 line(s) match on stdout
[tester::#YK8] [test-2] ✓ Received exit code 0.
[tester::#YK8] [test-3] Running test case: 3
[tester::#YK8] [test-3] Writing contents to ./test.lox:
[tester::#YK8] [test-3.lox] class Wizard {}
[tester::#YK8] [test-3.lox] class Dragon {}
[tester::#YK8] [test-3.lox] 
[tester::#YK8] [test-3.lox] // Instantiating classes in a function should work
[tester::#YK8] [test-3.lox] fun createCharacters() {
[tester::#YK8] [test-3.lox]   var merlin = Wizard();
[tester::#YK8] [test-3.lox]   var smaug = Dragon();
[tester::#YK8] [test-3.lox]   print "Characters created in fantasy world:";
[tester::#YK8] [test-3.lox]   print merlin;
[tester::#YK8] [test-3.lox]   print smaug;
[tester::#YK8] [test-3.lox]   return merlin;
[tester::#YK8] [test-3.lox] }
[tester::#YK8] [test-3.lox] 
[tester::#YK8] [test-3.lox] var mainCharacter = createCharacters();
[tester::#YK8] [test-3.lox] // An instance of a class should be truthy
[tester::#YK8] [test-3.lox] if (mainCharacter) {
[tester::#YK8] [test-3.lox]   print "The main character is:";
[tester::#YK8] [test-3.lox]   print mainCharacter;
[tester::#YK8] [test-3.lox] } else {
[tester::#YK8] [test-3.lox]   print "Failed to create a main character.";
[tester::#YK8] [test-3.lox] }
[tester::#YK8] [test-3] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class Wizard with superclass None
[your_program] Resolver: Adding 'this' to scope for class Wizard
[your_program] Resolver: Resolving class Dragon with superclass None
[your_program] Characters created in fantasy world:
[your_program] Wizard instance
[your_program] Dragon instance
[your_program] The main character is:
[your_program] Resolver: Adding 'this' to scope for class Dragon
[your_program] Wizard instance
[your_program] Resolver: Resolving local variable 'Wizard' at line 6
[your_program]   Checking scope 0: ["merlin"]
[your_program]   'Wizard' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'Dragon' at line 7
[your_program]   Checking scope 0: ["merlin", "smaug"]
[your_program]   'Dragon' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'merlin' at line 9
[your_program]   Checking scope 0: ["merlin", "smaug"]
[your_program]   Found 'merlin' at distance 0 (Expr ID: 94493592273544)
[your_program] Resolver: Resolving local variable 'smaug' at line 10
[your_program]   Checking scope 0: ["merlin", "smaug"]
[your_program]   Found 'smaug' at distance 0 (Expr ID: 94493592273768)
[your_program] Resolver: Resolving local variable 'merlin' at line 11
[your_program]   Checking scope 0: ["merlin", "smaug"]
[your_program]   Found 'merlin' at distance 0 (Expr ID: 94493592273992)
[your_program] Resolver: Resolving local variable 'createCharacters' at line 14
[your_program]   'createCharacters' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'mainCharacter' at line 16
[your_program]   'mainCharacter' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'mainCharacter' at line 18
[your_program]   Checking scope 0: []
[your_program]   'mainCharacter' not found in any scope, assuming global
[tester::#YK8] [test-3] ✓ 5 line(s) match on stdout
[tester::#YK8] [test-3] ✓ Received exit code 0.
[tester::#YK8] [test-4] Running test case: 4
[tester::#YK8] [test-4] Writing contents to ./test.lox:
[tester::#YK8] [test-4.lox] class Superhero {}
[tester::#YK8] [test-4.lox] 
[tester::#YK8] [test-4.lox] var count = 0;
[tester::#YK8] [test-4.lox] while (count < 3) {
[tester::#YK8] [test-4.lox]   var hero = Superhero();
[tester::#YK8] [test-4.lox]   print "Hero created:";
[tester::#YK8] [test-4.lox]   print hero;
[tester::#YK8] [test-4.lox]   count = count + 1;
[tester::#YK8] [test-4.lox] }
[tester::#YK8] [test-4.lox] 
[tester::#YK8] [test-4.lox] print "All heroes created!";
[tester::#YK8] [test-4] $ ./your_program.sh run test.lox
[your_program] Hero created:
[your_program] Superhero instance
[your_program] Hero created:
[your_program] Superhero instance
[your_program] Hero created:
[your_program] Superhero instance
[your_program] All heroes created!
[your_program] Resolver: Resolving class Superhero with superclass None
[your_program] Resolver: Adding 'this' to scope for class Superhero
[your_program] Resolver: Resolving local variable 'count' at line 4
[your_program]   'count' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'Superhero' at line 5
[your_program]   Checking scope 0: ["hero"]
[your_program]   'Superhero' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'hero' at line 7
[your_program]   Checking scope 0: ["hero"]
[your_program]   Found 'hero' at distance 0 (Expr ID: 93979034574216)
[your_program] Resolver: Resolving local variable 'count' at line 8
[your_program]   Checking scope 0: ["hero"]
[your_program]   'count' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'count' at line 8
[your_program]   Checking scope 0: ["hero"]
[your_program]   'count' not found in any scope, assuming global
[tester::#YK8] [test-4] ✓ 7 line(s) match on stdout
[tester::#YK8] [test-4] ✓ Received exit code 0.
[tester::#YK8] Test passed.
[tester::#VF4] Running tests for Stage #VF4 (Classes - Class Declarations)
[tester::#VF4] [test-1] Running test case: 1
[tester::#VF4] [test-1] Writing contents to ./test.lox:
[tester::#VF4] [test-1.lox] // Class declaration with empty body<|SPACE|>class Spaceship {}
[tester::#VF4] [test-1.lox] print Spaceship;
[tester::#VF4] [test-1] $ ./your_program.sh run test.lox
[your_program] Spaceship
[your_program] Resolver: Resolving class Spaceship with superclass None
[your_program] Resolver: Adding 'this' to scope for class Spaceship
[your_program] Resolver: Resolving local variable 'Spaceship' at line 3
[your_program]   'Spaceship' not found in any scope, assuming global
[tester::#VF4] [test-1] ✓ 1 line(s) match on stdout
[tester::#VF4] [test-1] ✓ Received exit code 0.
[tester::#VF4] [test-2] Running test case: 2
[tester::#VF4] [test-2] Writing contents to ./test.lox:
[tester::#VF4] [test-2.lox] // Multiple class declarations with empty body
[tester::#VF4] [test-2.lox] class Robot {}
[tester::#VF4] [test-2.lox] class Wizard {}
[tester::#VF4] [test-2.lox] print Robot;
[tester::#VF4] [test-2.lox] print Wizard;
[tester::#VF4] [test-2.lox] print "Both classes successfully printed";
[tester::#VF4] [test-2] $ ./your_program.sh run test.lox
[your_program] Robot
[your_program] Wizard
[your_program] Both classes successfully printed
[your_program] Resolver: Resolving class Robot with superclass None
[your_program] Resolver: Adding 'this' to scope for class Robot
[your_program] Resolver: Resolving class Wizard with superclass None
[your_program] Resolver: Adding 'this' to scope for class Wizard
[your_program] Resolver: Resolving local variable 'Robot' at line 4
[your_program]   'Robot' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'Wizard' at line 5
[your_program]   'Wizard' not found in any scope, assuming global
[tester::#VF4] [test-2] ✓ 3 line(s) match on stdout
[tester::#VF4] [test-2] ✓ Received exit code 0.
[tester::#VF4] [test-3] Running test case: 3
[tester::#VF4] [test-3] Writing contents to ./test.lox:
[tester::#VF4] [test-3.lox] {
[tester::#VF4] [test-3.lox]   // Class declaration inside blocks should work
[tester::#VF4] [test-3.lox]   class Dinosaur {}
[tester::#VF4] [test-3.lox]   print "Inside block: Dinosaur exists";
[tester::#VF4] [test-3.lox]   print Dinosaur;
[tester::#VF4] [test-3.lox] }
[tester::#VF4] [test-3.lox] print "Accessing out-of-scope class:";
[tester::#VF4] [test-3.lox] print Dinosaur;  // expect runtime error
[tester::#VF4] [test-3] $ ./your_program.sh run test.lox
[your_program] Inside block: Dinosaur exists
[your_program] Dinosaur
[your_program] Accessing out-of-scope class:
[your_program] Resolver: Resolving class Dinosaur with superclass None
[your_program] Resolver: Adding 'this' to scope for class Dinosaur
[your_program] Resolver: Resolving local variable 'Dinosaur' at line 5
[your_program]   Checking scope 0: ["Dinosaur"]
[your_program]   Found 'Dinosaur' at distance 0 (Expr ID: 94699544641096)
[your_program] Resolver: Resolving local variable 'Dinosaur' at line 8
[your_program]   'Dinosaur' not found in any scope, assuming global
[your_program] Undefined variable 'Dinosaur'. [line 8]
[tester::#VF4] [test-3] ✓ 3 line(s) match on stdout
[tester::#VF4] [test-3] ✓ Received exit code 70.
[tester::#VF4] [test-4] Running test case: 4
[tester::#VF4] [test-4] Writing contents to ./test.lox:
[tester::#VF4] [test-4.lox] // Class declaration inside function should work
[tester::#VF4] [test-4.lox] fun foo() {
[tester::#VF4] [test-4.lox]   class Superhero {}
[tester::#VF4] [test-4.lox]   print "Class declared inside function";
[tester::#VF4] [test-4.lox]   print Superhero;
[tester::#VF4] [test-4.lox] }
[tester::#VF4] [test-4.lox] 
[tester::#VF4] [test-4.lox] foo();
[tester::#VF4] [test-4.lox] print "Function called successfully";
[tester::#VF4] [test-4] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving class Superhero with superclass None
[your_program] Resolver: Adding 'this' to scope for class Superhero
[your_program] Resolver: Resolving local variable 'Superhero' at line 5
[your_program]   Checking scope 0: ["Superhero"]
[your_program]   Found 'Superhero' at distance 0 (Expr ID: 94758324125240)
[your_program] Resolver: Resolving local variable 'foo' at line 8
[your_program]   'foo' not found in any scope, assuming global
[your_program] Class declared inside function
[your_program] Superhero
[your_program] Function called successfully
[tester::#VF4] [test-4] ✓ 3 line(s) match on stdout
[tester::#VF4] [test-4] ✓ Received exit code 0.
[tester::#VF4] Test passed.
[tester::#EH3] Running tests for Stage #EH3 (Resolving & Binding - Invalid Return)
[tester::#EH3] [test-1] Running test case: 1
[tester::#EH3] [test-1] Writing contents to ./test.lox:
[tester::#EH3] [test-1.lox] fun foo() {
[tester::#EH3] [test-1.lox]   // Return statements are allowed within function scope
[tester::#EH3] [test-1.lox]   return "at function scope is ok";
[tester::#EH3] [test-1.lox] }
[tester::#EH3] [test-1.lox] 
[tester::#EH3] [test-1.lox] // Return statements are not allowed at the top-level<|SPACE|>return; // This should be a compile error
[tester::#EH3] [test-1] $ ./your_program.sh run test.lox
[your_program] Error: Cannot return from top-level code at line 7.
[tester::#EH3] [test-1] ✓ 1 line(s) match on stdout
[tester::#EH3] [test-1] ✓ Received exit code 65.
[tester::#EH3] [test-2] Running test case: 2
[tester::#EH3] [test-2] Writing contents to ./test.lox:
[tester::#EH3] [test-2.lox] fun foo() {
[tester::#EH3] [test-2.lox]   if (true) {
[tester::#EH3] [test-2.lox]     return "early return";
[tester::#EH3] [test-2.lox]   }
[tester::#EH3] [test-2.lox] 
[tester::#EH3] [test-2.lox]   for (var i = 0; i < 10; i = i + 1) {
[tester::#EH3] [test-2.lox]     return "loop return";
[tester::#EH3] [test-2.lox]   }
[tester::#EH3] [test-2.lox] }
[tester::#EH3] [test-2.lox] 
[tester::#EH3] [test-2.lox] if (true) {
[tester::#EH3] [test-2.lox]   return "conditional return"; // This should be a compile error
[tester::#EH3] [test-2.lox] }
[tester::#EH3] [test-2] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'i' at line 6
[your_program]   Checking scope 0: ["i"]
[your_program]   Found 'i' at distance 0 (Expr ID: 94781301952272)
[your_program] Resolver: Resolving local variable 'i' at line 6
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["i"]
[your_program]   Found 'i' at distance 1 (Expr ID: 94781301952560)
[your_program] Resolver: Resolving local variable 'i' at line 6
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["i"]
[your_program]   Found 'i' at distance 1 (Expr ID: 94781301957608)
[your_program] Error: Cannot return from top-level code at line 12.
[tester::#EH3] [test-2] ✓ 1 line(s) match on stdout
[tester::#EH3] [test-2] ✓ Received exit code 65.
[tester::#EH3] [test-3] Running test case: 3
[tester::#EH3] [test-3] Writing contents to ./test.lox:
[tester::#EH3] [test-3.lox] {
[tester::#EH3] [test-3.lox]   // Return statements are not allowed in top-level blocks
[tester::#EH3] [test-3.lox]   return "not allowed in a block either"; // This should be a compile error
[tester::#EH3] [test-3.lox] }
[tester::#EH3] [test-3.lox] 
[tester::#EH3] [test-3.lox] fun allowed() {
[tester::#EH3] [test-3.lox]   if (true) {
[tester::#EH3] [test-3.lox]     return "this is fine";
[tester::#EH3] [test-3.lox]   }
[tester::#EH3] [test-3.lox]   return;
[tester::#EH3] [test-3.lox] }
[tester::#EH3] [test-3] $ ./your_program.sh run test.lox
[your_program] Error: Cannot return from top-level code at line 3.
[tester::#EH3] [test-3] ✓ 1 line(s) match on stdout
[tester::#EH3] [test-3] ✓ Received exit code 65.
[tester::#EH3] [test-4] Running test case: 4
[tester::#EH3] [test-4] Writing contents to ./test.lox:
[tester::#EH3] [test-4.lox] fun outer() {
[tester::#EH3] [test-4.lox]   fun inner() {
[tester::#EH3] [test-4.lox]     return "ok";
[tester::#EH3] [test-4.lox]   }
[tester::#EH3] [test-4.lox] 
[tester::#EH3] [test-4.lox]   return "also ok";
[tester::#EH3] [test-4.lox] }
[tester::#EH3] [test-4.lox] 
[tester::#EH3] [test-4.lox] if (true) {
[tester::#EH3] [test-4.lox]   fun nested() {
[tester::#EH3] [test-4.lox]     return;
[tester::#EH3] [test-4.lox]   }
[tester::#EH3] [test-4.lox] 
[tester::#EH3] [test-4.lox]   // Return statements are not allowed outside of functions
[tester::#EH3] [test-4.lox]   return "not ok"; // This should be a compile error
[tester::#EH3] [test-4.lox] }
[tester::#EH3] [test-4] $ ./your_program.sh run test.lox
[your_program] Error: Cannot return from top-level code at line 15.
[tester::#EH3] [test-4] ✓ 1 line(s) match on stdout
[tester::#EH3] [test-4] ✓ Received exit code 65.
[tester::#EH3] Test passed.
[tester::#PZ7] Running tests for Stage #PZ7 (Resolving & Binding - Variable Redeclaration)
[tester::#PZ7] [test-1] Running test case: 1
[tester::#PZ7] [test-1] Writing contents to ./test.lox:
[tester::#PZ7] [test-1.lox] {
[tester::#PZ7] [test-1.lox]   var a = "value";
[tester::#PZ7] [test-1.lox] 
[tester::#PZ7] [test-1.lox]   // Attempting to redeclare 'a' in the same scope
[tester::#PZ7] [test-1.lox]   var a = "other"; // This should be a compile error
[tester::#PZ7] [test-1.lox] }
[tester::#PZ7] [test-1] $ ./your_program.sh run test.lox
[your_program] Error: Variable with name 'a' already declared in this scope at line 5.
[tester::#PZ7] [test-1] ✓ 1 line(s) match on stdout
[tester::#PZ7] [test-1] ✓ Received exit code 65.
[tester::#PZ7] [test-2] Running test case: 2
[tester::#PZ7] [test-2] Writing contents to ./test.lox:
[tester::#PZ7] [test-2.lox] // Function parameters are considered variables in the function's scope
[tester::#PZ7] [test-2.lox] fun foo(a) {
[tester::#PZ7] [test-2.lox] 
[tester::#PZ7] [test-2.lox]   // Attempting to declare a variable with same name as parameter
[tester::#PZ7] [test-2.lox]   var a; // This should be a compile error
[tester::#PZ7] [test-2.lox] }
[tester::#PZ7] [test-2] $ ./your_program.sh run test.lox
[your_program] Error: Variable with name 'a' already declared in this scope at line 5.
[tester::#PZ7] [test-2] ✓ 1 line(s) match on stdout
[tester::#PZ7] [test-2] ✓ Received exit code 65.
[tester::#PZ7] [test-3] Running test case: 3
[tester::#PZ7] [test-3] Writing contents to ./test.lox:
[tester::#PZ7] [test-3.lox] // Function parameters must have unique names
[tester::#PZ7] [test-3.lox] fun foo(arg, arg) { // This should be a compile error
[tester::#PZ7] [test-3.lox] 
[tester::#PZ7] [test-3.lox]   // Function body is irrelevant as the error occurs in parameter list
[tester::#PZ7] [test-3.lox]   "body";
[tester::#PZ7] [test-3.lox] }
[tester::#PZ7] [test-3] $ ./your_program.sh run test.lox
[your_program] Error: Variable with name 'arg' already declared in this scope at line 2.
[tester::#PZ7] [test-3] ✓ 1 line(s) match on stdout
[tester::#PZ7] [test-3] ✓ Received exit code 65.
[tester::#PZ7] [test-4] Running test case: 4
[tester::#PZ7] [test-4] Writing contents to ./test.lox:
[tester::#PZ7] [test-4.lox] var a = "1";
[tester::#PZ7] [test-4.lox] print a; // Should print 1
[tester::#PZ7] [test-4.lox] 
[tester::#PZ7] [test-4.lox] var a;
[tester::#PZ7] [test-4.lox] print a; // Should print nil
[tester::#PZ7] [test-4.lox] 
[tester::#PZ7] [test-4.lox] var a = "2";
[tester::#PZ7] [test-4.lox] print a; // Should print 2
[tester::#PZ7] [test-4.lox] 
[tester::#PZ7] [test-4.lox] {
[tester::#PZ7] [test-4.lox]   // First declaration in local scope
[tester::#PZ7] [test-4.lox]   var a = "1";
[tester::#PZ7] [test-4.lox] 
[tester::#PZ7] [test-4.lox]   // Attempting to redeclare in local scope
[tester::#PZ7] [test-4.lox]   var a = "2"; // This should be a compile error
[tester::#PZ7] [test-4.lox]   print a;
[tester::#PZ7] [test-4.lox] }
[tester::#PZ7] [test-4] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'a' at line 2
[your_program]   'a' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'a' at line 5
[your_program]   'a' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'a' at line 8
[your_program]   'a' not found in any scope, assuming global
[your_program] Error: Variable with name 'a' already declared in this scope at line 15.
[tester::#PZ7] [test-4] ✓ 1 line(s) match on stdout
[tester::#PZ7] [test-4] ✓ Received exit code 65.
[tester::#PZ7] Test passed.
[tester::#PT7] Running tests for Stage #PT7 (Resolving & Binding - Self Initialization)
[tester::#PT7] [test-1] Running test case: 1
[tester::#PT7] [test-1] Writing contents to ./test.lox:
[tester::#PT7] [test-1.lox] // First declaration of variable 'a' in global scope
[tester::#PT7] [test-1.lox] var a = "value";
[tester::#PT7] [test-1.lox] 
[tester::#PT7] [test-1.lox] // Redeclaring 'a' with its own value should be allowed in global scope
[tester::#PT7] [test-1.lox] var a = a;
[tester::#PT7] [test-1.lox] print a; // this should print "value"
[tester::#PT7] [test-1] $ ./your_program.sh run test.lox
[your_program] value
[your_program] Resolver: Resolving local variable 'a' at line 5
[your_program]   'a' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'a' at line 6
[your_program]   'a' not found in any scope, assuming global
[tester::#PT7] [test-1] ✓ 1 line(s) match on stdout
[tester::#PT7] [test-1] ✓ Received exit code 0.
[tester::#PT7] [test-2] Running test case: 2
[tester::#PT7] [test-2] Writing contents to ./test.lox:
[tester::#PT7] [test-2.lox] // Declare outer variable 'a' in global scope
[tester::#PT7] [test-2.lox] var a = "outer";
[tester::#PT7] [test-2.lox] 
[tester::#PT7] [test-2.lox] {
[tester::#PT7] [test-2.lox]   // Attempting to declare local variable'a' initialized with itself
[tester::#PT7] [test-2.lox]   var a = a; // This should be a compile error
[tester::#PT7] [test-2.lox] }
[tester::#PT7] [test-2] $ ./your_program.sh run test.lox
[your_program] Error: Cannot read local variable 'a' in its own initializer at line 6.
[tester::#PT7] [test-2] ✓ 1 line(s) match on stdout
[tester::#PT7] [test-2] ✓ Received exit code 65.
[tester::#PT7] [test-3] Running test case: 3
[tester::#PT7] [test-3] Writing contents to ./test.lox:
[tester::#PT7] [test-3.lox] // Helper function that simply returns its argument
[tester::#PT7] [test-3.lox] fun returnArg(arg) {
[tester::#PT7] [test-3.lox]   return arg;
[tester::#PT7] [test-3.lox] }
[tester::#PT7] [test-3.lox] 
[tester::#PT7] [test-3.lox] // Declare global variable 'b'
[tester::#PT7] [test-3.lox] var b = "global";
[tester::#PT7] [test-3.lox] 
[tester::#PT7] [test-3.lox] {
[tester::#PT7] [test-3.lox]   // Local variable declaration
[tester::#PT7] [test-3.lox]   var a = "first";
[tester::#PT7] [test-3.lox] 
[tester::#PT7] [test-3.lox]   // Attempting to initialize local variable 'b' using local variable 'b'
[tester::#PT7] [test-3.lox]   // through a function call
[tester::#PT7] [test-3.lox]   var b = returnArg(b); // This should be a compile error
[tester::#PT7] [test-3.lox]   print b;
[tester::#PT7] [test-3.lox] }
[tester::#PT7] [test-3.lox] 
[tester::#PT7] [test-3.lox] var b = b + " updated";
[tester::#PT7] [test-3.lox] print b;
[tester::#PT7] [test-3] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'arg' at line 3
[your_program]   Checking scope 0: ["arg"]
[your_program]   Found 'arg' at distance 0 (Expr ID: 94865551828808)
[your_program] Resolver: Resolving local variable 'returnArg' at line 15
[your_program]   Checking scope 0: ["a", "b"]
[your_program]   'returnArg' not found in any scope, assuming global
[your_program] Error: Cannot read local variable 'b' in its own initializer at line 15.
[tester::#PT7] [test-3] ✓ 1 line(s) match on stdout
[tester::#PT7] [test-3] ✓ Received exit code 65.
[tester::#PT7] [test-4] Running test case: 4
[tester::#PT7] [test-4] Writing contents to ./test.lox:
[tester::#PT7] [test-4.lox] fun outer() {
[tester::#PT7] [test-4.lox]   // Declare variable 'a' in outer function scope
[tester::#PT7] [test-4.lox]   var a = "outer";
[tester::#PT7] [test-4.lox] 
[tester::#PT7] [test-4.lox]   // Inner function with its own scope
[tester::#PT7] [test-4.lox]   fun inner() {
[tester::#PT7] [test-4.lox]     // Attempting to declare local 'a' initialized with itself
[tester::#PT7] [test-4.lox]     var a = a; // This should be a compile error
[tester::#PT7] [test-4.lox]     print a;
[tester::#PT7] [test-4.lox]   }
[tester::#PT7] [test-4.lox] 
[tester::#PT7] [test-4.lox]   inner();
[tester::#PT7] [test-4.lox] }
[tester::#PT7] [test-4.lox] 
[tester::#PT7] [test-4.lox] outer();
[tester::#PT7] [test-4] $ ./your_program.sh run test.lox
[your_program] Error: Cannot read local variable 'a' in its own initializer at line 8.
[tester::#PT7] [test-4] ✓ 1 line(s) match on stdout
[tester::#PT7] [test-4] ✓ Received exit code 65.
[tester::#PT7] Test passed.
[tester::#DE8] Running tests for Stage #DE8 (Resolving & Binding - Identifier Resolution)
[tester::#DE8] [test-1] Running test case: 1
[tester::#DE8] [test-1] Writing contents to ./test.lox:
[tester::#DE8] [test-1.lox] // This variable is used in the function `f` below.
[tester::#DE8] [test-1.lox] var variable = "global";
[tester::#DE8] [test-1.lox] 
[tester::#DE8] [test-1.lox] {
[tester::#DE8] [test-1.lox]   fun f() {
[tester::#DE8] [test-1.lox]     print variable;
[tester::#DE8] [test-1.lox]   }
[tester::#DE8] [test-1.lox] 
[tester::#DE8] [test-1.lox]   f(); // this should print "global"
[tester::#DE8] [test-1.lox] 
[tester::#DE8] [test-1.lox]   // This variable declaration shouldn't affect the usage in `f` above.
[tester::#DE8] [test-1.lox]   var variable = "local";
[tester::#DE8] [test-1.lox] 
[tester::#DE8] [test-1.lox]   f(); // this should still print "global"
[tester::#DE8] [test-1.lox] }
[tester::#DE8] [test-1] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'variable' at line 6
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["f"]
[your_program]   'variable' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'f' at line 9
[your_program] global
[your_program] global
[your_program]   Checking scope 0: ["f"]
[your_program]   Found 'f' at distance 0 (Expr ID: 94424106046480)
[your_program] Resolver: Resolving local variable 'f' at line 14
[your_program]   Checking scope 0: ["f", "variable"]
[your_program]   Found 'f' at distance 0 (Expr ID: 94424106050912)
[tester::#DE8] [test-1] ✓ 2 line(s) match on stdout
[tester::#DE8] [test-1] ✓ Received exit code 0.
[tester::#DE8] [test-2] Running test case: 2
[tester::#DE8] [test-2] Writing contents to ./test.lox:
[tester::#DE8] [test-2.lox] // This function is used in the function `f` below.
[tester::#DE8] [test-2.lox] fun global() {
[tester::#DE8] [test-2.lox]   print "global";
[tester::#DE8] [test-2.lox] }
[tester::#DE8] [test-2.lox] 
[tester::#DE8] [test-2.lox] {
[tester::#DE8] [test-2.lox]   fun f() {
[tester::#DE8] [test-2.lox]     global();
[tester::#DE8] [test-2.lox]   }
[tester::#DE8] [test-2.lox] 
[tester::#DE8] [test-2.lox]   f(); // this should print "global"
[tester::#DE8] [test-2.lox] 
[tester::#DE8] [test-2.lox]   // This function declaration shouldn't affect the usage in `f` above.
[tester::#DE8] [test-2.lox]   fun global() {
[tester::#DE8] [test-2.lox]     print "local";
[tester::#DE8] [test-2.lox]   }
[tester::#DE8] [test-2.lox] 
[tester::#DE8] [test-2.lox]   f(); // this should also print "global"
[tester::#DE8] [test-2.lox] }
[tester::#DE8] [test-2] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'global' at line 8
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["f"]
[your_program] global
[your_program] global
[your_program]   'global' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'f' at line 11
[your_program]   Checking scope 0: ["f"]
[your_program]   Found 'f' at distance 0 (Expr ID: 94678205150656)
[your_program] Resolver: Resolving local variable 'f' at line 18
[your_program]   Checking scope 0: ["f", "global"]
[your_program]   Found 'f' at distance 0 (Expr ID: 94678205150800)
[tester::#DE8] [test-2] ✓ 2 line(s) match on stdout
[tester::#DE8] [test-2] ✓ Received exit code 0.
[tester::#DE8] [test-3] Running test case: 3
[tester::#DE8] [test-3] Writing contents to ./test.lox:
[tester::#DE8] [test-3.lox] var x = "global";
[tester::#DE8] [test-3.lox] 
[tester::#DE8] [test-3.lox] fun outer() {
[tester::#DE8] [test-3.lox]   var x = "outer";
[tester::#DE8] [test-3.lox] 
[tester::#DE8] [test-3.lox]   fun middle() {
[tester::#DE8] [test-3.lox]     // The `inner` function should capture the variable from the closest outer
[tester::#DE8] [test-3.lox]     // scope, which is the `outer` function's scope.
[tester::#DE8] [test-3.lox]     fun inner() {
[tester::#DE8] [test-3.lox]       print x; // Should capture "outer", not "global"
[tester::#DE8] [test-3.lox]     }
[tester::#DE8] [test-3.lox] 
[tester::#DE8] [test-3.lox]     inner(); // Should print "outer"
[tester::#DE8] [test-3.lox] 
[tester::#DE8] [test-3.lox]     // This variable declaration shouldn't affect the usage in `inner` above.
[tester::#DE8] [test-3.lox]     var x = "middle";
[tester::#DE8] [test-3.lox] 
[tester::#DE8] [test-3.lox]     inner(); // Should still print "outer"
[tester::#DE8] [test-3.lox]   }
[tester::#DE8] [test-3.lox] 
[tester::#DE8] [test-3.lox]   middle();
[tester::#DE8] [test-3.lox] }
[tester::#DE8] [test-3.lox] 
[tester::#DE8] [test-3.lox] outer();
[tester::#DE8] [test-3] $ ./your_program.sh run test.lox
[your_program] outer
[your_program] outer
[your_program] Resolver: Resolving local variable 'x' at line 10
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["inner"]
[your_program]   Checking scope 2: ["middle", "x"]
[your_program]   Found 'x' at distance 2 (Expr ID: 94227077877512)
[your_program] Resolver: Resolving local variable 'inner' at line 13
[your_program]   Checking scope 0: ["inner"]
[your_program]   Found 'inner' at distance 0 (Expr ID: 94227077879328)
[your_program] Resolver: Resolving local variable 'inner' at line 18
[your_program]   Checking scope 0: ["inner", "x"]
[your_program]   Found 'inner' at distance 0 (Expr ID: 94227077879472)
[your_program] Resolver: Resolving local variable 'middle' at line 21
[your_program]   Checking scope 0: ["middle", "x"]
[your_program]   Found 'middle' at distance 0 (Expr ID: 94227077883488)
[your_program] Resolver: Resolving local variable 'outer' at line 24
[your_program]   'outer' not found in any scope, assuming global
[tester::#DE8] [test-3] ✓ 2 line(s) match on stdout
[tester::#DE8] [test-3] ✓ Received exit code 0.
[tester::#DE8] [test-4] Running test case: 4
[tester::#DE8] [test-4] Writing contents to ./test.lox:
[tester::#DE8] [test-4.lox] var count = 0;
[tester::#DE8] [test-4.lox] 
[tester::#DE8] [test-4.lox] {
[tester::#DE8] [test-4.lox]   // The `counter` function should use the `count` variable from the
[tester::#DE8] [test-4.lox]   // global scope.
[tester::#DE8] [test-4.lox]   fun makeCounter() {
[tester::#DE8] [test-4.lox]     fun counter() {
[tester::#DE8] [test-4.lox]       // This should increment the `count` variable from the global scope.
[tester::#DE8] [test-4.lox]       count = count + 1;
[tester::#DE8] [test-4.lox]       print count;
[tester::#DE8] [test-4.lox]     }
[tester::#DE8] [test-4.lox]     return counter;
[tester::#DE8] [test-4.lox]   }
[tester::#DE8] [test-4.lox] 
[tester::#DE8] [test-4.lox]   var counter1 = makeCounter();
[tester::#DE8] [test-4.lox]   counter1(); // Should print 1
[tester::#DE8] [test-4.lox]   counter1(); // Should print 2
[tester::#DE8] [test-4.lox] 
[tester::#DE8] [test-4.lox]   // This variable declaration shouldn't affect our counter.
[tester::#DE8] [test-4.lox]   var count = 0;
[tester::#DE8] [test-4.lox] 
[tester::#DE8] [test-4.lox]   counter1(); // Should print 3
[tester::#DE8] [test-4.lox] }
[tester::#DE8] [test-4] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'count' at line 9
[your_program]   Checking scope 0: []
[your_program] 1
[your_program] 2
[your_program]   Checking scope 1: ["counter"]
[your_program]   Checking scope 2: ["makeCounter"]
[your_program] 3
[your_program]   'count' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'count' at line 9
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["counter"]
[your_program]   Checking scope 2: ["makeCounter"]
[your_program]   'count' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'count' at line 10
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["counter"]
[your_program]   Checking scope 2: ["makeCounter"]
[your_program]   'count' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'counter' at line 12
[your_program]   Checking scope 0: ["counter"]
[your_program]   Found 'counter' at distance 0 (Expr ID: 94485205619112)
[your_program] Resolver: Resolving local variable 'makeCounter' at line 15
[your_program]   Checking scope 0: ["counter1", "makeCounter"]
[your_program]   Found 'makeCounter' at distance 0 (Expr ID: 94485205619792)
[your_program] Resolver: Resolving local variable 'counter1' at line 16
[your_program]   Checking scope 0: ["counter1", "makeCounter"]
[your_program]   Found 'counter1' at distance 0 (Expr ID: 94485205619936)
[your_program] Resolver: Resolving local variable 'counter1' at line 17
[your_program]   Checking scope 0: ["counter1", "makeCounter"]
[your_program]   Found 'counter1' at distance 0 (Expr ID: 94485205620080)
[your_program] Resolver: Resolving local variable 'counter1' at line 22
[your_program]   Checking scope 0: ["count", "counter1", "makeCounter"]
[your_program]   Found 'counter1' at distance 0 (Expr ID: 94485205620224)
[tester::#DE8] [test-4] ✓ 3 line(s) match on stdout
[tester::#DE8] [test-4] ✓ Received exit code 0.
[tester::#DE8] Test passed.
[tester::#GG6] Running tests for Stage #GG6 (Functions - Closures)
[tester::#GG6] [test-1] Running test case: 1
[tester::#GG6] [test-1] Writing contents to ./test.lox:
[tester::#GG6] [test-1.lox] // This program demonstrates the use of closures to create a counter function.
[tester::#GG6] [test-1.lox] // The inner function count() needs access to the outer function's local variable i.
[tester::#GG6] [test-1.lox] // This can be achieved using closures.
[tester::#GG6] [test-1.lox] fun makeCounter() {
[tester::#GG6] [test-1.lox]   var i = 0;
[tester::#GG6] [test-1.lox]   fun count() {
[tester::#GG6] [test-1.lox]     i = i + 5;
[tester::#GG6] [test-1.lox]     print i;
[tester::#GG6] [test-1.lox]   }
[tester::#GG6] [test-1.lox] 
[tester::#GG6] [test-1.lox]   return count;
[tester::#GG6] [test-1.lox] }
[tester::#GG6] [test-1.lox] 
[tester::#GG6] [test-1.lox] var counter = makeCounter();
[tester::#GG6] [test-1.lox] counter();
[tester::#GG6] [test-1.lox] counter();
[tester::#GG6] [test-1] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'i' at line 7
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["i", "count"]
[your_program]   Found 'i' at distance 1 (Expr ID: 94804362164896)
[your_program] 5
[your_program] 10
[your_program] Resolver: Resolving local variable 'i' at line 7
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["i", "count"]
[your_program]   Found 'i' at distance 1 (Expr ID: 94804362165336)
[your_program] Resolver: Resolving local variable 'i' at line 8
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["i", "count"]
[your_program]   Found 'i' at distance 1 (Expr ID: 94804362165560)
[your_program] Resolver: Resolving local variable 'count' at line 11
[your_program]   Checking scope 0: ["i", "count"]
[your_program]   Found 'count' at distance 0 (Expr ID: 94804362164440)
[your_program] Resolver: Resolving local variable 'makeCounter' at line 14
[your_program]   'makeCounter' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'counter' at line 15
[your_program]   'counter' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'counter' at line 16
[your_program]   'counter' not found in any scope, assuming global
[tester::#GG6] [test-1] ✓ 2 line(s) match on stdout
[tester::#GG6] [test-1] ✓ Received exit code 0.
[tester::#GG6] [test-2] Running test case: 2
[tester::#GG6] [test-2] Writing contents to ./test.lox:
[tester::#GG6] [test-2.lox] // This program uses mutual recursion to determine if a number is even or odd.
[tester::#GG6] [test-2.lox] // It also uses a shared threshold variable that is used to determine if a number is too large to be processed.
[tester::#GG6] [test-2.lox] {
[tester::#GG6] [test-2.lox]   var threshold = 50;
[tester::#GG6] [test-2.lox] 
[tester::#GG6] [test-2.lox]   fun isEven(n) {
[tester::#GG6] [test-2.lox]     if (n == 0) return true;
[tester::#GG6] [test-2.lox]     if (n > threshold) return false;
[tester::#GG6] [test-2.lox]     return isOdd(n - 1);
[tester::#GG6] [test-2.lox]   }
[tester::#GG6] [test-2.lox] 
[tester::#GG6] [test-2.lox]   fun isOdd(n) {
[tester::#GG6] [test-2.lox]     if (n == 0) return false;
[tester::#GG6] [test-2.lox]     if (n > threshold) return false;
[tester::#GG6] [test-2.lox]     return isEven(n - 1);
[tester::#GG6] [test-2.lox]   }
[tester::#GG6] [test-2.lox] 
[tester::#GG6] [test-2.lox]   print isEven(75);
[tester::#GG6] [test-2.lox] }
[tester::#GG6] [test-2] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'n' at line 7
[your_program]   Checking scope 0: ["n"]
[your_program]   Found 'n' at distance 0 (Expr ID: 94485455842128)
[your_program] Resolver: Resolving local variable 'n' at line 8
[your_program]   Checking scope 0: ["n"]
[your_program]   Found 'n' at distance 0 (Expr ID: 94485455843568)
[your_program] Resolver: Resolving local variable 'threshold' at line 8
[your_program]   Checking scope 0: ["n"]
[your_program]   Checking scope 1: ["threshold", "isEven"]
[your_program]   Found 'threshold' at distance 1 (Expr ID: 94485455843712)
[your_program] Resolver: Resolving local variable 'isOdd' at line 9
[your_program]   Checking scope 0: ["n"]
[your_program]   Checking scope 1: ["threshold", "isEven"]
[your_program]   'isOdd' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'n' at line 9
[your_program]   Checking scope 0: ["n"]
[your_program] false
[your_program]   Found 'n' at distance 0 (Expr ID: 94485455844096)
[your_program] Resolver: Resolving local variable 'n' at line 13
[your_program]   Checking scope 0: ["n"]
[your_program]   Found 'n' at distance 0 (Expr ID: 94485455844800)
[your_program] Resolver: Resolving local variable 'n' at line 14
[your_program]   Checking scope 0: ["n"]
[your_program]   Found 'n' at distance 0 (Expr ID: 94485455846240)
[your_program] Resolver: Resolving local variable 'threshold' at line 14
[your_program]   Checking scope 0: ["n"]
[your_program]   Checking scope 1: ["isEven", "threshold", "isOdd"]
[your_program]   Found 'threshold' at distance 1 (Expr ID: 94485455846384)
[your_program] Resolver: Resolving local variable 'isEven' at line 15
[your_program]   Checking scope 0: ["n"]
[your_program]   Checking scope 1: ["isEven", "threshold", "isOdd"]
[your_program]   Found 'isEven' at distance 1 (Expr ID: 94485455847616)
[your_program] Resolver: Resolving local variable 'n' at line 15
[your_program]   Checking scope 0: ["n"]
[your_program]   Found 'n' at distance 0 (Expr ID: 94485455846768)
[your_program] Resolver: Resolving local variable 'isEven' at line 18
[your_program]   Checking scope 0: ["isEven", "threshold", "isOdd"]
[your_program]   Found 'isEven' at distance 0 (Expr ID: 94485455848320)
[tester::#GG6] [test-2] ✓ 1 line(s) match on stdout
[tester::#GG6] [test-2] ✓ Received exit code 0.
[tester::#GG6] [test-3] Running test case: 3
[tester::#GG6] [test-3] Writing contents to ./test.lox:
[tester::#GG6] [test-3.lox] // This program demonstrates the use of closures to create a logger function.
[tester::#GG6] [test-3.lox] // The inner function log() has access to the outer function's local variable logCount.
[tester::#GG6] [test-3.lox] // This is an example of how closures can be used to create private variables and methods.
[tester::#GG6] [test-3.lox] fun makeLogger(prefix) {
[tester::#GG6] [test-3.lox]   var logCount = 0;
[tester::#GG6] [test-3.lox] 
[tester::#GG6] [test-3.lox]   fun log(message) {
[tester::#GG6] [test-3.lox]     logCount = logCount + 1;
[tester::#GG6] [test-3.lox]     print prefix + ": " + message;
[tester::#GG6] [test-3.lox] 
[tester::#GG6] [test-3.lox]     if (logCount > 6) {
[tester::#GG6] [test-3.lox]       print prefix + ": Too many log lines!";
[tester::#GG6] [test-3.lox]       logCount = 0;
[tester::#GG6] [test-3.lox]     }
[tester::#GG6] [test-3.lox]   }
[tester::#GG6] [test-3.lox] 
[tester::#GG6] [test-3.lox]   return log;
[tester::#GG6] [test-3.lox] }
[tester::#GG6] [test-3.lox] 
[tester::#GG6] [test-3.lox] var debugLog = makeLogger("hello");
[tester::#GG6] [test-3.lox] var errorLog = makeLogger("quz");
[tester::#GG6] [test-3.lox] 
[tester::#GG6] [test-3.lox] debugLog("Starting");
[tester::#GG6] [test-3.lox] debugLog("Processing");
[tester::#GG6] [test-3.lox] debugLog("Finishing");
[tester::#GG6] [test-3.lox] debugLog("Extra line");
[tester::#GG6] [test-3.lox] 
[tester::#GG6] [test-3.lox] errorLog("Failed!");
[tester::#GG6] [test-3.lox] errorLog("Retrying...");
[tester::#GG6] [test-3] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'logCount' at line 8
[your_program]   Checking scope 0: ["message"]
[your_program]   Checking scope 1: ["prefix", "logCount", "log"]
[your_program]   Found 'logCount' at distance 1 (Expr ID: 93918671199616)
[your_program] Resolver: Resolving local variable 'logCount' at line 8
[your_program]   Checking scope 0: ["message"]
[your_program]   Checking scope 1: ["prefix", "logCount", "log"]
[your_program]   Found 'logCount' at distance 1 (Expr ID: 93918671200056)
[your_program] hello: Starting
[your_program] hello: Processing
[your_program] hello: Finishing
[your_program] hello: Extra line
[your_program] quz: Failed!
[your_program] Resolver: Resolving local variable 'prefix' at line 9
[your_program] quz: Retrying...
[your_program]   Checking scope 0: ["message"]
[your_program]   Checking scope 1: ["prefix", "logCount", "log"]
[your_program]   Found 'prefix' at distance 1 (Expr ID: 93918671200960)
[your_program] Resolver: Resolving local variable 'message' at line 9
[your_program]   Checking scope 0: ["message"]
[your_program]   Found 'message' at distance 0 (Expr ID: 93918671201392)
[your_program] Resolver: Resolving local variable 'logCount' at line 11
[your_program]   Checking scope 0: ["message"]
[your_program]   Checking scope 1: ["prefix", "logCount", "log"]
[your_program]   Found 'logCount' at distance 1 (Expr ID: 93918671201536)
[your_program] Resolver: Resolving local variable 'prefix' at line 12
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["message"]
[your_program]   Checking scope 2: ["prefix", "logCount", "log"]
[your_program]   Found 'prefix' at distance 2 (Expr ID: 93918671201824)
[your_program] Resolver: Resolving local variable 'logCount' at line 13
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["message"]
[your_program]   Checking scope 2: ["prefix", "logCount", "log"]
[your_program]   Found 'logCount' at distance 2 (Expr ID: 93918671202344)
[your_program] Resolver: Resolving local variable 'log' at line 17
[your_program]   Checking scope 0: ["prefix", "logCount", "log"]
[your_program]   Found 'log' at distance 0 (Expr ID: 93918671198888)
[your_program] Resolver: Resolving local variable 'makeLogger' at line 20
[your_program]   'makeLogger' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'makeLogger' at line 21
[your_program]   'makeLogger' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'debugLog' at line 23
[your_program]   'debugLog' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'debugLog' at line 24
[your_program]   'debugLog' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'debugLog' at line 25
[your_program]   'debugLog' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'debugLog' at line 26
[your_program]   'debugLog' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'errorLog' at line 28
[your_program]   'errorLog' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'errorLog' at line 29
[your_program]   'errorLog' not found in any scope, assuming global
[tester::#GG6] [test-3] ✓ 6 line(s) match on stdout
[tester::#GG6] [test-3] ✓ Received exit code 0.
[tester::#GG6] [test-4] Running test case: 4
[tester::#GG6] [test-4] Writing contents to ./test.lox:
[tester::#GG6] [test-4.lox] // This program demonstrates the use of closures to create an accumulator function.
[tester::#GG6] [test-4.lox] // The inner function accumulate() has access to the outer function's local variables sum and count.
[tester::#GG6] [test-4.lox] // This is an example of how closures can be used to create private variables and methods.
[tester::#GG6] [test-4.lox] fun makeAccumulator(label) {
[tester::#GG6] [test-4.lox]   var sum = 0;
[tester::#GG6] [test-4.lox]   var count = 0;
[tester::#GG6] [test-4.lox] 
[tester::#GG6] [test-4.lox]   fun accumulate(value) {
[tester::#GG6] [test-4.lox]     sum = sum + value;
[tester::#GG6] [test-4.lox]     count = count + 1;
[tester::#GG6] [test-4.lox] 
[tester::#GG6] [test-4.lox]     print label;
[tester::#GG6] [test-4.lox]     print count;
[tester::#GG6] [test-4.lox]     print sum;
[tester::#GG6] [test-4.lox]     print sum;
[tester::#GG6] [test-4.lox] 
[tester::#GG6] [test-4.lox]     if (count > 3) {
[tester::#GG6] [test-4.lox]       print "reset";
[tester::#GG6] [test-4.lox]       sum = 0;
[tester::#GG6] [test-4.lox]       count = 0;
[tester::#GG6] [test-4.lox]     }
[tester::#GG6] [test-4.lox] 
[tester::#GG6] [test-4.lox]     return sum;
[tester::#GG6] [test-4.lox]   }
[tester::#GG6] [test-4.lox] 
[tester::#GG6] [test-4.lox]   return accumulate;
[tester::#GG6] [test-4.lox] }
[tester::#GG6] [test-4.lox] 
[tester::#GG6] [test-4.lox] var acc1 = makeAccumulator("First:");
[tester::#GG6] [test-4.lox] var acc2 = makeAccumulator("Second:");
[tester::#GG6] [test-4.lox] 
[tester::#GG6] [test-4.lox] acc1(2);
[tester::#GG6] [test-4.lox] acc1(3);
[tester::#GG6] [test-4.lox] acc1(4);
[tester::#GG6] [test-4.lox] acc1(5);
[tester::#GG6] [test-4.lox] 
[tester::#GG6] [test-4.lox] acc2(3);
[tester::#GG6] [test-4.lox] acc2(5);
[tester::#GG6] [test-4] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'sum' at line 9
[your_program]   Checking scope 0: ["value"]
[your_program]   Checking scope 1: ["sum", "label", "count", "accumulate"]
[your_program]   Found 'sum' at distance 1 (Expr ID: 94669460901264)
[your_program] Resolver: Resolving local variable 'value' at line 9
[your_program]   Checking scope 0: ["value"]
[your_program]   Found 'value' at distance 0 (Expr ID: 94669460901408)
[your_program] Resolver: Resolving local variable 'sum' at line 9
[your_program]   Checking scope 0: ["value"]
[your_program]   Checking scope 1: ["sum", "label", "count", "accumulate"]
[your_program]   Found 'sum' at distance 1 (Expr ID: 94669460897096)
[your_program] First:
[your_program] 1
[your_program] 2
[your_program] 2
[your_program] First:
[your_program] 2
[your_program] 5
[your_program] 5
[your_program] First:
[your_program] 3
[your_program] 9
[your_program] 9
[your_program] First:
[your_program] 4
[your_program] 14
[your_program] 14
[your_program] reset
[your_program] Second:
[your_program] 1
[your_program] 3
[your_program] 3
[your_program] Second:
[your_program] 2
[your_program] 8
[your_program] 8
[your_program] Resolver: Resolving local variable 'count' at line 10
[your_program]   Checking scope 0: ["value"]
[your_program]   Checking scope 1: ["sum", "label", "count", "accumulate"]
[your_program]   Found 'count' at distance 1 (Expr ID: 94669460902608)
[your_program] Resolver: Resolving local variable 'count' at line 10
[your_program]   Checking scope 0: ["value"]
[your_program]   Checking scope 1: ["sum", "label", "count", "accumulate"]
[your_program]   Found 'count' at distance 1 (Expr ID: 94669460897320)
[your_program] Resolver: Resolving local variable 'label' at line 12
[your_program]   Checking scope 0: ["value"]
[your_program]   Checking scope 1: ["sum", "label", "count", "accumulate"]
[your_program]   Found 'label' at distance 1 (Expr ID: 94669460897544)
[your_program] Resolver: Resolving local variable 'count' at line 13
[your_program]   Checking scope 0: ["value"]
[your_program]   Checking scope 1: ["sum", "label", "count", "accumulate"]
[your_program]   Found 'count' at distance 1 (Expr ID: 94669460897768)
[your_program] Resolver: Resolving local variable 'sum' at line 14
[your_program]   Checking scope 0: ["value"]
[your_program]   Checking scope 1: ["sum", "label", "count", "accumulate"]
[your_program]   Found 'sum' at distance 1 (Expr ID: 94669460897992)
[your_program] Resolver: Resolving local variable 'sum' at line 15
[your_program]   Checking scope 0: ["value"]
[your_program]   Checking scope 1: ["sum", "label", "count", "accumulate"]
[your_program]   Found 'sum' at distance 1 (Expr ID: 94669460898216)
[your_program] Resolver: Resolving local variable 'count' at line 17
[your_program]   Checking scope 0: ["value"]
[your_program]   Checking scope 1: ["sum", "label", "count", "accumulate"]
[your_program]   Found 'count' at distance 1 (Expr ID: 94669460898896)
[your_program] Resolver: Resolving local variable 'sum' at line 19
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["value"]
[your_program]   Checking scope 2: ["sum", "label", "count", "accumulate"]
[your_program]   Found 'sum' at distance 2 (Expr ID: 94669460901928)
[your_program] Resolver: Resolving local variable 'count' at line 20
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["value"]
[your_program]   Checking scope 2: ["sum", "label", "count", "accumulate"]
[your_program]   Found 'count' at distance 2 (Expr ID: 94669460902152)
[your_program] Resolver: Resolving local variable 'sum' at line 23
[your_program]   Checking scope 0: ["value"]
[your_program]   Checking scope 1: ["sum", "label", "count", "accumulate"]
[your_program]   Found 'sum' at distance 1 (Expr ID: 94669460898664)
[your_program] Resolver: Resolving local variable 'accumulate' at line 26
[your_program]   Checking scope 0: ["sum", "label", "count", "accumulate"]
[your_program]   Found 'accumulate' at distance 0 (Expr ID: 94669460900760)
[your_program] Resolver: Resolving local variable 'makeAccumulator' at line 29
[your_program]   'makeAccumulator' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'makeAccumulator' at line 30
[your_program]   'makeAccumulator' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'acc1' at line 32
[your_program]   'acc1' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'acc1' at line 33
[your_program]   'acc1' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'acc1' at line 34
[your_program]   'acc1' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'acc1' at line 35
[your_program]   'acc1' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'acc2' at line 37
[your_program]   'acc2' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'acc2' at line 38
[your_program]   'acc2' not found in any scope, assuming global
[tester::#GG6] [test-4] ✓ 25 line(s) match on stdout
[tester::#GG6] [test-4] ✓ Received exit code 0.
[tester::#GG6] Test passed.
[tester::#BZ4] Running tests for Stage #BZ4 (Functions - Function scope)
[tester::#BZ4] [test-1] Running test case: 1
[tester::#BZ4] [test-1] Writing contents to ./test.lox:
[tester::#BZ4] [test-1.lox] // This program demonstrates global and local variable shadowing in Lox.
[tester::#BZ4] [test-1.lox] var a = 74;
[tester::#BZ4] [test-1.lox] 
[tester::#BZ4] [test-1.lox] fun printAndModify() {
[tester::#BZ4] [test-1.lox]   print a;
[tester::#BZ4] [test-1.lox]   var a = 43;
[tester::#BZ4] [test-1.lox]   print a;
[tester::#BZ4] [test-1.lox] }
[tester::#BZ4] [test-1.lox] 
[tester::#BZ4] [test-1.lox] print a;
[tester::#BZ4] [test-1.lox] a = 85;
[tester::#BZ4] [test-1.lox] printAndModify();
[tester::#BZ4] [test-1.lox] 
[tester::#BZ4] [test-1] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'a' at line 5
[your_program]   Checking scope 0: []
[your_program]   'a' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'a' at line 7
[your_program]   Checking scope 0: ["a"]
[your_program]   Found 'a' at distance 0 (Expr ID: 93905451165832)
[your_program] 74
[your_program] 85
[your_program] 43
[your_program] Resolver: Resolving local variable 'a' at line 10
[your_program]   'a' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'a' at line 11
[your_program]   'a' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'printAndModify' at line 12
[your_program]   'printAndModify' not found in any scope, assuming global
[tester::#BZ4] [test-1] ✓ 3 line(s) match on stdout
[tester::#BZ4] [test-1] ✓ Received exit code 0.
[tester::#BZ4] [test-2] Running test case: 2
[tester::#BZ4] [test-2] Writing contents to ./test.lox:
[tester::#BZ4] [test-2.lox] // This program uses a while loop to count down from 3 to 1, printing each number
[tester::#BZ4] [test-2.lox] // and then decrementing the count until it reaches 0, at which point it prints
[tester::#BZ4] [test-2.lox] // "Blast off!"
[tester::#BZ4] [test-2.lox] var count = 3;
[tester::#BZ4] [test-2.lox] 
[tester::#BZ4] [test-2.lox] fun tick() {
[tester::#BZ4] [test-2.lox]   if (count > 0) {
[tester::#BZ4] [test-2.lox]     print count;
[tester::#BZ4] [test-2.lox]     count = count - 1;
[tester::#BZ4] [test-2.lox]     return false;
[tester::#BZ4] [test-2.lox]   }
[tester::#BZ4] [test-2.lox]   print "Blast off!";
[tester::#BZ4] [test-2.lox]   return true;
[tester::#BZ4] [test-2.lox] }
[tester::#BZ4] [test-2.lox] 
[tester::#BZ4] [test-2.lox] while (!tick()) {}
[tester::#BZ4] [test-2] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'count' at line 7
[your_program]   Checking scope 0: []
[your_program]   'count' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'count' at line 8
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: []
[your_program] 3
[your_program] 2
[your_program] 1
[your_program] Blast off!
[your_program]   'count' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'count' at line 9
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: []
[your_program]   'count' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'count' at line 9
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: []
[your_program]   'count' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'tick' at line 16
[your_program]   'tick' not found in any scope, assuming global
[tester::#BZ4] [test-2] ✓ 4 line(s) match on stdout
[tester::#BZ4] [test-2] ✓ Received exit code 0.
[tester::#BZ4] [test-3] Running test case: 3
[tester::#BZ4] [test-3] Writing contents to ./test.lox:
[tester::#BZ4] [test-3.lox] // This program demonstrates variable shadowing in Lox with functions.
[tester::#BZ4] [test-3.lox] // The first counter is a global variable that is modified by the inner block.
[tester::#BZ4] [test-3.lox] // The second counter is a local variable that shadows the global variable.
[tester::#BZ4] [test-3.lox] var counter = 52;
[tester::#BZ4] [test-3.lox] 
[tester::#BZ4] [test-3.lox] fun incrementCounter(amount) {
[tester::#BZ4] [test-3.lox]   counter = counter + amount;
[tester::#BZ4] [test-3.lox]   print counter;
[tester::#BZ4] [test-3.lox] }
[tester::#BZ4] [test-3.lox] 
[tester::#BZ4] [test-3.lox] {
[tester::#BZ4] [test-3.lox]   counter = 87;
[tester::#BZ4] [test-3.lox]   incrementCounter(5);
[tester::#BZ4] [test-3.lox]   print counter;
[tester::#BZ4] [test-3.lox] }
[tester::#BZ4] [test-3.lox] print counter;
[tester::#BZ4] [test-3] $ ./your_program.sh run test.lox
[your_program] 92
[your_program] 92
[your_program] 92
[your_program] Resolver: Resolving local variable 'counter' at line 7
[your_program]   Checking scope 0: ["amount"]
[your_program]   'counter' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'amount' at line 7
[your_program]   Checking scope 0: ["amount"]
[your_program]   Found 'amount' at distance 0 (Expr ID: 94900577287104)
[your_program] Resolver: Resolving local variable 'counter' at line 7
[your_program]   Checking scope 0: ["amount"]
[your_program]   'counter' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'counter' at line 8
[your_program]   Checking scope 0: ["amount"]
[your_program]   'counter' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'counter' at line 12
[your_program]   Checking scope 0: []
[your_program]   'counter' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'incrementCounter' at line 13
[your_program]   Checking scope 0: []
[your_program]   'incrementCounter' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'counter' at line 14
[your_program]   Checking scope 0: []
[your_program]   'counter' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'counter' at line 16
[your_program]   'counter' not found in any scope, assuming global
[tester::#BZ4] [test-3] ✓ 3 line(s) match on stdout
[tester::#BZ4] [test-3] ✓ Received exit code 0.
[tester::#BZ4] [test-4] Running test case: 4
[tester::#BZ4] [test-4] Writing contents to ./test.lox:
[tester::#BZ4] [test-4.lox] // This program tests variable scoping and shadowing in Lox. It demonstrates:
[tester::#BZ4] [test-4.lox] // Global variable declarations
[tester::#BZ4] [test-4.lox] // Function scope access to global variables
[tester::#BZ4] [test-4.lox] // Block scoping with local variables shadowing outer variables
[tester::#BZ4] [test-4.lox] // Verification that global variables remain unchanged after shadowing
[tester::#BZ4] [test-4.lox] var x = 1;
[tester::#BZ4] [test-4.lox] var y = 2;
[tester::#BZ4] [test-4.lox] 
[tester::#BZ4] [test-4.lox] fun printBoth() {
[tester::#BZ4] [test-4.lox]   if (x < y) {
[tester::#BZ4] [test-4.lox]     print "x is less than y:";
[tester::#BZ4] [test-4.lox]     print x;
[tester::#BZ4] [test-4.lox]     print y;
[tester::#BZ4] [test-4.lox]   } else {
[tester::#BZ4] [test-4.lox]     print "x is not less than y:";
[tester::#BZ4] [test-4.lox]     print x;
[tester::#BZ4] [test-4.lox]     print y;
[tester::#BZ4] [test-4.lox]   }
[tester::#BZ4] [test-4.lox] }
[tester::#BZ4] [test-4.lox] 
[tester::#BZ4] [test-4.lox] {
[tester::#BZ4] [test-4.lox]   var x = 10;
[tester::#BZ4] [test-4.lox]   {
[tester::#BZ4] [test-4.lox]     var y = 20;
[tester::#BZ4] [test-4.lox] 
[tester::#BZ4] [test-4.lox]     var i = 0;
[tester::#BZ4] [test-4.lox]     while (i < 3) {
[tester::#BZ4] [test-4.lox]       x = x + 1;
[tester::#BZ4] [test-4.lox]       y = y - 1;
[tester::#BZ4] [test-4.lox]       print "Local x: ";
[tester::#BZ4] [test-4.lox]       print x;
[tester::#BZ4] [test-4.lox]       print "Local y: ";
[tester::#BZ4] [test-4.lox]       print y;
[tester::#BZ4] [test-4.lox]       i = i + 1;
[tester::#BZ4] [test-4.lox]     }
[tester::#BZ4] [test-4.lox] 
[tester::#BZ4] [test-4.lox]     if (x > y) {
[tester::#BZ4] [test-4.lox]       print "Local x > y";
[tester::#BZ4] [test-4.lox]     }
[tester::#BZ4] [test-4.lox] 
[tester::#BZ4] [test-4.lox]     printBoth();
[tester::#BZ4] [test-4.lox]   }
[tester::#BZ4] [test-4.lox] }
[tester::#BZ4] [test-4.lox] 
[tester::#BZ4] [test-4.lox] if (x == 1 and y == 2) {
[tester::#BZ4] [test-4.lox]   print "Globals unchanged:";
[tester::#BZ4] [test-4.lox]   printBoth();
[tester::#BZ4] [test-4.lox] }
[tester::#BZ4] [test-4] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'x' at line 10
[your_program]   Checking scope 0: []
[your_program]   'x' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'y' at line 10
[your_program]   Checking scope 0: []
[your_program]   'y' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'x' at line 12
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: []
[your_program]   'x' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'y' at line 13
[your_program]   Checking scope 0: []
[your_program] Local x: 
[your_program]   Checking scope 1: []
[your_program] 11
[your_program] Local y: 
[your_program] 19
[your_program] Local x: 
[your_program]   'y' not found in any scope, assuming global
[your_program] 12
[your_program] Local y: 
[your_program] 18
[your_program] Local x: 
[your_program] Resolver: Resolving local variable 'x' at line 16
[your_program] 13
[your_program] Local y: 
[your_program] 17
[your_program] x is less than y:
[your_program] 1
[your_program]   Checking scope 0: []
[your_program] 2
[your_program]   Checking scope 1: []
[your_program] Globals unchanged:
[your_program] x is less than y:
[your_program] 1
[your_program] 2
[your_program]   'x' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'y' at line 17
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: []
[your_program]   'y' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'i' at line 27
[your_program]   Checking scope 0: ["i", "y"]
[your_program]   Found 'i' at distance 0 (Expr ID: 94612096916976)
[your_program] Resolver: Resolving local variable 'x' at line 28
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["i", "y"]
[your_program]   Checking scope 2: ["x"]
[your_program]   Found 'x' at distance 2 (Expr ID: 94612096917264)
[your_program] Resolver: Resolving local variable 'x' at line 28
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["i", "y"]
[your_program]   Checking scope 2: ["x"]
[your_program]   Found 'x' at distance 2 (Expr ID: 94612096900584)
[your_program] Resolver: Resolving local variable 'y' at line 29
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["i", "y"]
[your_program]   Found 'y' at distance 1 (Expr ID: 94612096918608)
[your_program] Resolver: Resolving local variable 'y' at line 29
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["i", "y"]
[your_program]   Found 'y' at distance 1 (Expr ID: 94612096900808)
[your_program] Resolver: Resolving local variable 'x' at line 31
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["i", "y"]
[your_program]   Checking scope 2: ["x"]
[your_program]   Found 'x' at distance 2 (Expr ID: 94612096901256)
[your_program] Resolver: Resolving local variable 'y' at line 33
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["i", "y"]
[your_program]   Found 'y' at distance 1 (Expr ID: 94612096901704)
[your_program] Resolver: Resolving local variable 'i' at line 34
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["i", "y"]
[your_program]   Found 'i' at distance 1 (Expr ID: 94612096902384)
[your_program] Resolver: Resolving local variable 'i' at line 34
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["i", "y"]
[your_program]   Found 'i' at distance 1 (Expr ID: 94612096901928)
[your_program] Resolver: Resolving local variable 'x' at line 37
[your_program]   Checking scope 0: ["i", "y"]
[your_program]   Checking scope 1: ["x"]
[your_program]   Found 'x' at distance 1 (Expr ID: 94612096903168)
[your_program] Resolver: Resolving local variable 'y' at line 37
[your_program]   Checking scope 0: ["i", "y"]
[your_program]   Found 'y' at distance 0 (Expr ID: 94612096911008)
[your_program] Resolver: Resolving local variable 'printBoth' at line 41
[your_program]   Checking scope 0: ["i", "y"]
[your_program]   Checking scope 1: ["x"]
[your_program]   'printBoth' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'x' at line 45
[your_program]   'x' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'y' at line 45
[your_program]   'y' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'printBoth' at line 47
[your_program]   Checking scope 0: []
[your_program]   'printBoth' not found in any scope, assuming global
[tester::#BZ4] [test-4] ✓ 19 line(s) match on stdout
[tester::#BZ4] [test-4] ✓ Received exit code 0.
[tester::#BZ4] Test passed.
[tester::#FJ7] Running tests for Stage #FJ7 (Functions - Runtime errors)
[tester::#FJ7] [test-1] Running test case: 1
[tester::#FJ7] [test-1] Writing contents to ./test.lox:
[tester::#FJ7] [test-1.lox] // This program tries to execute an integer as a function
[tester::#FJ7] [test-1.lox] 97();
[tester::#FJ7] [test-1] $ ./your_program.sh run test.lox
[your_program] Can only call functions, classes, and methods. [line 2]
[tester::#FJ7] [test-1] ✓ 1 line(s) match on stdout
[tester::#FJ7] [test-1] ✓ Received exit code 70.
[tester::#FJ7] [test-2] Running test case: 2
[tester::#FJ7] [test-2] Writing contents to ./test.lox:
[tester::#FJ7] [test-2.lox] // This program tries to call a function with too many arguments
[tester::#FJ7] [test-2.lox] fun f(a, b) {
[tester::#FJ7] [test-2.lox]   print a;
[tester::#FJ7] [test-2.lox]   print b;
[tester::#FJ7] [test-2.lox] }
[tester::#FJ7] [test-2.lox] 
[tester::#FJ7] [test-2.lox] f(1, 2, 3, 4); // expect runtime error: Expected 2 arguments but got 4.
[tester::#FJ7] [test-2] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'a' at line 3
[your_program]   Checking scope 0: ["a", "b"]
[your_program]   Found 'a' at distance 0 (Expr ID: 94151885364312)
[your_program] Resolver: Resolving local variable 'b' at line 4
[your_program]   Checking scope 0: ["a", "b"]
[your_program]   Found 'b' at distance 0 (Expr ID: 94151885364536)
[your_program] Resolver: Resolving local variable 'f' at line 7
[your_program]   'f' not found in any scope, assuming global
[your_program] Expected 2 arguments but got 4. [line 0]
[tester::#FJ7] [test-2] ✓ 1 line(s) match on stdout
[tester::#FJ7] [test-2] ✓ Received exit code 70.
[tester::#FJ7] [test-3] Running test case: 3
[tester::#FJ7] [test-3] Writing contents to ./test.lox:
[tester::#FJ7] [test-3.lox] // This program tries to call a function with too few arguments
[tester::#FJ7] [test-3.lox] fun f(a, b) {}
[tester::#FJ7] [test-3.lox] 
[tester::#FJ7] [test-3.lox] f(1); // expect runtime error: Expected 2 arguments but got 1.
[tester::#FJ7] [test-3] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'f' at line 4
[your_program]   'f' not found in any scope, assuming global
[your_program] Expected 2 arguments but got 1. [line 0]
[tester::#FJ7] [test-3] ✓ 1 line(s) match on stdout
[tester::#FJ7] [test-3] ✓ Received exit code 70.
[tester::#FJ7] [test-4] Running test case: 4
[tester::#FJ7] [test-4] Writing contents to ./test.lox:
[tester::#FJ7] [test-4.lox] // This program tries to execute a boolean as a function
[tester::#FJ7] [test-4.lox] (true == true)();
[tester::#FJ7] [test-4] $ ./your_program.sh run test.lox
[your_program] Can only call functions, classes, and methods. [line 2]
[tester::#FJ7] [test-4] ✓ 1 line(s) match on stdout
[tester::#FJ7] [test-4] ✓ Received exit code 70.
[tester::#FJ7] Test passed.
[tester::#EY3] Running tests for Stage #EY3 (Functions - Higher order functions)
[tester::#EY3] [test-1] Running test case: 1
[tester::#EY3] [test-1] Writing contents to ./test.lox:
[tester::#EY3] [test-1.lox] // This program creates a function that returns another function
[tester::#EY3] [test-1.lox] // and uses it to greet two different people with two different greetings
[tester::#EY3] [test-1.lox] var globalGreeting = "Hello";
[tester::#EY3] [test-1.lox] 
[tester::#EY3] [test-1.lox] fun makeGreeter() {
[tester::#EY3] [test-1.lox]   fun greet(name) {
[tester::#EY3] [test-1.lox]     print globalGreeting + " " + name;
[tester::#EY3] [test-1.lox]   }
[tester::#EY3] [test-1.lox]   return greet;
[tester::#EY3] [test-1.lox] }
[tester::#EY3] [test-1.lox] 
[tester::#EY3] [test-1.lox] var sayHello = makeGreeter();
[tester::#EY3] [test-1.lox] 
[tester::#EY3] [test-1.lox] sayHello("Bob");
[tester::#EY3] [test-1.lox] sayHello("Alice");
[tester::#EY3] [test-1.lox] sayHello("Eve");
[tester::#EY3] [test-1] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'globalGreeting' at line 7
[your_program]   Checking scope 0: ["name"]
[your_program]   Checking scope 1: ["greet"]
[your_program]   'globalGreeting' not found in any scope, assuming global
[your_program] Hello Bob
[your_program] Resolver: Resolving local variable 'name' at line 7
[your_program]   Checking scope 0: ["name"]
[your_program]   Found 'name' at distance 0 (Expr ID: 94286240578704)
[your_program] Resolver: Resolving local variable 'greet' at line 9
[your_program] Hello Alice
[your_program]   Checking scope 0: ["greet"]
[your_program] Hello Eve
[your_program]   Found 'greet' at distance 0 (Expr ID: 94286240579992)
[your_program] Resolver: Resolving local variable 'makeGreeter' at line 12
[your_program]   'makeGreeter' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'sayHello' at line 14
[your_program]   'sayHello' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'sayHello' at line 15
[your_program]   'sayHello' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'sayHello' at line 16
[your_program]   'sayHello' not found in any scope, assuming global
[tester::#EY3] [test-1] ✓ 3 line(s) match on stdout
[tester::#EY3] [test-1] ✓ Received exit code 0.
[tester::#EY3] [test-2] Running test case: 2
[tester::#EY3] [test-2] Writing contents to ./test.lox:
[tester::#EY3] [test-2.lox] // This program defines a function that takes in a function and an argument
[tester::#EY3] [test-2.lox] // and returns the result of calling the function with the argument
[tester::#EY3] [test-2.lox] fun returnArg(arg) {
[tester::#EY3] [test-2.lox]   return arg;
[tester::#EY3] [test-2.lox] }
[tester::#EY3] [test-2.lox] 
[tester::#EY3] [test-2.lox] fun returnFunCallWithArg(func, arg) {
[tester::#EY3] [test-2.lox]   return returnArg(func)(arg);
[tester::#EY3] [test-2.lox] }
[tester::#EY3] [test-2.lox] 
[tester::#EY3] [test-2.lox] fun printArg(arg) {
[tester::#EY3] [test-2.lox]   print arg;
[tester::#EY3] [test-2.lox] }
[tester::#EY3] [test-2.lox] 
[tester::#EY3] [test-2.lox] returnFunCallWithArg(printArg, "hello");
[tester::#EY3] [test-2] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'arg' at line 4
[your_program]   Checking scope 0: ["arg"]
[your_program]   Found 'arg' at distance 0 (Expr ID: 94560967976648)
[your_program] Resolver: Resolving local variable 'returnArg' at line 8
[your_program]   Checking scope 0: ["arg", "func"]
[your_program]   'returnArg' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'func' at line 8
[your_program] hello
[your_program]   Checking scope 0: ["arg", "func"]
[your_program]   Found 'func' at distance 0 (Expr ID: 94560967967328)
[your_program] Resolver: Resolving local variable 'arg' at line 8
[your_program]   Checking scope 0: ["arg", "func"]
[your_program]   Found 'arg' at distance 0 (Expr ID: 94560967978880)
[your_program] Resolver: Resolving local variable 'arg' at line 12
[your_program]   Checking scope 0: ["arg"]
[your_program]   Found 'arg' at distance 0 (Expr ID: 94560967983992)
[your_program] Resolver: Resolving local variable 'returnFunCallWithArg' at line 15
[your_program]   'returnFunCallWithArg' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'printArg' at line 15
[your_program]   'printArg' not found in any scope, assuming global
[tester::#EY3] [test-2] ✓ 1 line(s) match on stdout
[tester::#EY3] [test-2] ✓ Received exit code 0.
[tester::#EY3] [test-3] Running test case: 3
[tester::#EY3] [test-3] Writing contents to ./test.lox:
[tester::#EY3] [test-3.lox] fun square(x) {
[tester::#EY3] [test-3.lox]   return x * x;
[tester::#EY3] [test-3.lox] }
[tester::#EY3] [test-3.lox] 
[tester::#EY3] [test-3.lox] // This higher-order function applies a
[tester::#EY3] [test-3.lox] // function N times to a starting value x.
[tester::#EY3] [test-3.lox] fun applyTimesN(N, f, x) {
[tester::#EY3] [test-3.lox]   var i = 0;
[tester::#EY3] [test-3.lox]   while (i < N) {
[tester::#EY3] [test-3.lox]     x = f(x);
[tester::#EY3] [test-3.lox]     i = i + 1;
[tester::#EY3] [test-3.lox]   }
[tester::#EY3] [test-3.lox]   return x;
[tester::#EY3] [test-3.lox] }
[tester::#EY3] [test-3.lox] 
[tester::#EY3] [test-3.lox] // 5 is squared once
[tester::#EY3] [test-3.lox] print applyTimesN(1, square, 5);
[tester::#EY3] [test-3.lox] // 5 is squared twice
[tester::#EY3] [test-3.lox] print applyTimesN(2, square, 5);
[tester::#EY3] [test-3.lox] // 5 is squared thrice
[tester::#EY3] [test-3.lox] print applyTimesN(3, square, 5);
[tester::#EY3] [test-3.lox] 
[tester::#EY3] [test-3] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'x' at line 2
[your_program]   Checking scope 0: ["x"]
[your_program]   Found 'x' at distance 0 (Expr ID: 94636667299664)
[your_program] Resolver: Resolving local variable 'x' at line 2
[your_program]   Checking scope 0: ["x"]
[your_program]   Found 'x' at distance 0 (Expr ID: 94636667299808)
[your_program] Resolver: Resolving local variable 'i' at line 9
[your_program]   Checking scope 0: ["f", "x", "N", "i"]
[your_program]   Found 'i' at distance 0 (Expr ID: 94636667302960)
[your_program] Resolver: Resolving local variable 'N' at line 9
[your_program] 25
[your_program]   Checking scope 0: ["f", "x", "N", "i"]
[your_program]   Found 'N' at distance 0 (Expr ID: 94636667303104)
[your_program] Resolver: Resolving local variable 'f' at line 10
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["f", "x", "N", "i"]
[your_program]   Found 'f' at distance 1 (Expr ID: 94636667303248)
[your_program] Resolver: Resolving local variable 'x' at line 10
[your_program]   Checking scope 0: []
[your_program] 625
[your_program] 390625
[your_program]   Checking scope 1: ["f", "x", "N", "i"]
[your_program]   Found 'x' at distance 1 (Expr ID: 94636667290208)
[your_program] Resolver: Resolving local variable 'x' at line 10
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["f", "x", "N", "i"]
[your_program]   Found 'x' at distance 1 (Expr ID: 94636667303544)
[your_program] Resolver: Resolving local variable 'i' at line 11
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["f", "x", "N", "i"]
[your_program]   Found 'i' at distance 1 (Expr ID: 94636667304448)
[your_program] Resolver: Resolving local variable 'i' at line 11
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["f", "x", "N", "i"]
[your_program]   Found 'i' at distance 1 (Expr ID: 94636667303768)
[your_program] Resolver: Resolving local variable 'x' at line 13
[your_program]   Checking scope 0: ["f", "x", "N", "i"]
[your_program]   Found 'x' at distance 0 (Expr ID: 94636667302504)
[your_program] Resolver: Resolving local variable 'applyTimesN' at line 17
[your_program]   'applyTimesN' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'square' at line 17
[your_program]   'square' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'applyTimesN' at line 19
[your_program]   'applyTimesN' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'square' at line 19
[your_program]   'square' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'applyTimesN' at line 21
[your_program]   'applyTimesN' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'square' at line 21
[your_program]   'square' not found in any scope, assuming global
[tester::#EY3] [test-3] ✓ 3 line(s) match on stdout
[tester::#EY3] [test-3] ✓ Received exit code 0.
[tester::#EY3] [test-4] Running test case: 4
[tester::#EY3] [test-4] Writing contents to ./test.lox:
[tester::#EY3] [test-4.lox] // This program creates a function that returns another function
[tester::#EY3] [test-4.lox] // and uses it to filter a list of numbers
[tester::#EY3] [test-4.lox] fun makeFilter(min) {
[tester::#EY3] [test-4.lox]   fun filter(n) {
[tester::#EY3] [test-4.lox]     if (n < min) {
[tester::#EY3] [test-4.lox]       return false;
[tester::#EY3] [test-4.lox]     }
[tester::#EY3] [test-4.lox]     return true;
[tester::#EY3] [test-4.lox]   }
[tester::#EY3] [test-4.lox]   return filter;
[tester::#EY3] [test-4.lox] }
[tester::#EY3] [test-4.lox] 
[tester::#EY3] [test-4.lox] // This function applies a function to a list of numbers
[tester::#EY3] [test-4.lox] fun applyToNumbers(f, count) {
[tester::#EY3] [test-4.lox]   var n = 0;
[tester::#EY3] [test-4.lox]   while (n < count) {
[tester::#EY3] [test-4.lox]     if (f(n)) {
[tester::#EY3] [test-4.lox]       print n;
[tester::#EY3] [test-4.lox]     }
[tester::#EY3] [test-4.lox]     n = n + 1;
[tester::#EY3] [test-4.lox]   }
[tester::#EY3] [test-4.lox] }
[tester::#EY3] [test-4.lox] 
[tester::#EY3] [test-4.lox] var greaterThanX = makeFilter(36);
[tester::#EY3] [test-4.lox] var greaterThanY = makeFilter(34);
[tester::#EY3] [test-4.lox] 
[tester::#EY3] [test-4.lox] print "Numbers >= 36:";
[tester::#EY3] [test-4.lox] applyToNumbers(greaterThanX, 36 + 2);
[tester::#EY3] [test-4.lox] 
[tester::#EY3] [test-4.lox] print "Numbers >= 34:";
[tester::#EY3] [test-4.lox] applyToNumbers(greaterThanY, 34 + 2);
[tester::#EY3] [test-4] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'n' at line 5
[your_program]   Checking scope 0: ["n"]
[your_program]   Found 'n' at distance 0 (Expr ID: 94230837377312)
[your_program] Resolver: Resolving local variable 'min' at line 5
[your_program]   Checking scope 0: ["n"]
[your_program]   Checking scope 1: ["min", "filter"]
[your_program]   Found 'min' at distance 1 (Expr ID: 94230837377456)
[your_program] Resolver: Resolving local variable 'filter' at line 10
[your_program] Numbers >= 36:
[your_program] 36
[your_program] 37
[your_program]   Checking scope 0: ["min", "filter"]
[your_program]   Found 'filter' at distance 0 (Expr ID: 94230837379896)
[your_program] Numbers >= 34:
[your_program] 34
[your_program] 35
[your_program] Resolver: Resolving local variable 'n' at line 16
[your_program]   Checking scope 0: ["count", "f", "n"]
[your_program]   Found 'n' at distance 0 (Expr ID: 94230837382672)
[your_program] Resolver: Resolving local variable 'count' at line 16
[your_program]   Checking scope 0: ["count", "f", "n"]
[your_program]   Found 'count' at distance 0 (Expr ID: 94230837382816)
[your_program] Resolver: Resolving local variable 'f' at line 17
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["count", "f", "n"]
[your_program]   Found 'f' at distance 1 (Expr ID: 94230837382960)
[your_program] Resolver: Resolving local variable 'n' at line 17
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["count", "f", "n"]
[your_program]   Found 'n' at distance 1 (Expr ID: 94230837367392)
[your_program] Resolver: Resolving local variable 'n' at line 18
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: []
[your_program]   Checking scope 2: ["count", "f", "n"]
[your_program]   Found 'n' at distance 2 (Expr ID: 94230837383112)
[your_program] Resolver: Resolving local variable 'n' at line 20
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["count", "f", "n"]
[your_program]   Found 'n' at distance 1 (Expr ID: 94230837397008)
[your_program] Resolver: Resolving local variable 'n' at line 20
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["count", "f", "n"]
[your_program]   Found 'n' at distance 1 (Expr ID: 94230837384488)
[your_program] Resolver: Resolving local variable 'makeFilter' at line 24
[your_program]   'makeFilter' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'makeFilter' at line 25
[your_program]   'makeFilter' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'applyToNumbers' at line 28
[your_program]   'applyToNumbers' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'greaterThanX' at line 28
[your_program]   'greaterThanX' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'applyToNumbers' at line 31
[your_program]   'applyToNumbers' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'greaterThanY' at line 31
[your_program]   'greaterThanY' not found in any scope, assuming global
[tester::#EY3] [test-4] ✓ 6 line(s) match on stdout
[tester::#EY3] [test-4] ✓ Received exit code 0.
[tester::#EY3] Test passed.
[tester::#RD2] Running tests for Stage #RD2 (Functions - Return statements)
[tester::#RD2] [test-1] Running test case: 1
[tester::#RD2] [test-1] Writing contents to ./test.lox:
[tester::#RD2] [test-1.lox] // This program computes the 35th Fibonacci number
[tester::#RD2] [test-1.lox] fun fib(n) {
[tester::#RD2] [test-1.lox]   if (n < 2) return n;
[tester::#RD2] [test-1.lox]   return fib(n - 2) + fib(n - 1);
[tester::#RD2] [test-1.lox] }
[tester::#RD2] [test-1.lox] 
[tester::#RD2] [test-1.lox] var start = clock();
[tester::#RD2] [test-1.lox] print fib(10) == 55;
[tester::#RD2] [test-1.lox] print (clock() - start) < 5; // 5 seconds
[tester::#RD2] [test-1.lox] 
[tester::#RD2] [test-1] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'n' at line 3
[your_program]   Checking scope 0: ["n"]
[your_program]   Found 'n' at distance 0 (Expr ID: 94498931136224)
[your_program] Resolver: Resolving local variable 'n' at line 3
[your_program]   Checking scope 0: ["n"]
[your_program]   Found 'n' at distance 0 (Expr ID: 94498931136520)
[your_program] true
[your_program] true
[your_program] Resolver: Resolving local variable 'fib' at line 4
[your_program]   Checking scope 0: ["n"]
[your_program]   'fib' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'n' at line 4
[your_program]   Checking scope 0: ["n"]
[your_program]   Found 'n' at distance 0 (Expr ID: 94498931137664)
[your_program] Resolver: Resolving local variable 'fib' at line 4
[your_program]   Checking scope 0: ["n"]
[your_program]   'fib' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'n' at line 4
[your_program]   Checking scope 0: ["n"]
[your_program]   Found 'n' at distance 0 (Expr ID: 94498931138096)
[your_program] Resolver: Resolving local variable 'clock' at line 7
[your_program]   'clock' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'fib' at line 8
[your_program]   'fib' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'clock' at line 9
[your_program]   'clock' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'start' at line 9
[your_program]   'start' not found in any scope, assuming global
[tester::#RD2] [test-1] ✓ 2 line(s) match on stdout
[tester::#RD2] [test-1] ✓ Received exit code 0.
[tester::#RD2] [test-2] Running test case: 2
[tester::#RD2] [test-2] Writing contents to ./test.lox:
[tester::#RD2] [test-2.lox] // This program uses a return statement inside an if statement
[tester::#RD2] [test-2.lox] // to return "ok" if the condition is false
[tester::#RD2] [test-2.lox] fun f() {
[tester::#RD2] [test-2.lox]   if (true) return "no"; else return "ok";
[tester::#RD2] [test-2.lox] }
[tester::#RD2] [test-2.lox] 
[tester::#RD2] [test-2.lox] print f();
[tester::#RD2] [test-2] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'f' at line 7
[your_program]   'f' not found in any scope, assuming global
[your_program] no
[tester::#RD2] [test-2] ✓ 1 line(s) match on stdout
[tester::#RD2] [test-2] ✓ Received exit code 0.
[tester::#RD2] [test-3] Running test case: 3
[tester::#RD2] [test-3] Writing contents to ./test.lox:
[tester::#RD2] [test-3.lox] // This program uses a return statement inside a while loop
[tester::#RD2] [test-3.lox] // to return "ok" if the condition is false
[tester::#RD2] [test-3.lox] fun f() {
[tester::#RD2] [test-3.lox]   while (!true) return "ok";
[tester::#RD2] [test-3.lox] }
[tester::#RD2] [test-3.lox] 
[tester::#RD2] [test-3.lox] print f();
[tester::#RD2] [test-3] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'f' at line 7
[your_program]   'f' not found in any scope, assuming global
[your_program] nil
[tester::#RD2] [test-3] ✓ 1 line(s) match on stdout
[tester::#RD2] [test-3] ✓ Received exit code 0.
[tester::#RD2] [test-4] Running test case: 4
[tester::#RD2] [test-4] Writing contents to ./test.lox:
[tester::#RD2] [test-4.lox] // This program relies on the return statement returning nil by default
[tester::#RD2] [test-4.lox] fun f() {
[tester::#RD2] [test-4.lox]   return;
[tester::#RD2] [test-4.lox]   print "bad";
[tester::#RD2] [test-4.lox] }
[tester::#RD2] [test-4.lox] 
[tester::#RD2] [test-4.lox] print f();
[tester::#RD2] [test-4] $ ./your_program.sh run test.lox
[your_program] nil
[your_program] Resolver: Resolving local variable 'f' at line 7
[your_program]   'f' not found in any scope, assuming global
[tester::#RD2] [test-4] ✓ 1 line(s) match on stdout
[tester::#RD2] [test-4] ✓ Received exit code 0.
[tester::#RD2] Test passed.
[tester::#PX4] Running tests for Stage #PX4 (Functions - Syntax errors)
[tester::#PX4] [test-1] Running test case: 1
[tester::#PX4] [test-1] Writing contents to ./test.lox:
[tester::#PX4] [test-1.lox] // This program is missing the closing parenthesis for the function call
[tester::#PX4] [test-1.lox] // Hence the compiler error
[tester::#PX4] [test-1.lox] print clock(;
[tester::#PX4] [test-1.lox] 
[tester::#PX4] [test-1] $ ./your_program.sh run test.lox
[your_program] Error: Expected expression, found token type SemiColon at line 3
[tester::#PX4] [test-1] ✓ 1 line(s) match on stdout
[tester::#PX4] [test-1] ✓ Received exit code 65.
[tester::#PX4] [test-2] Running test case: 2
[tester::#PX4] [test-2] Writing contents to ./test.lox:
[tester::#PX4] [test-2.lox] // This program is missing the opening parenthesis for the function call,
[tester::#PX4] [test-2.lox] // and has extra closing parentheses
[tester::#PX4] [test-2.lox] // Hence the compiler error
[tester::#PX4] [test-2.lox] print clock)));
[tester::#PX4] [test-2] $ ./your_program.sh run test.lox
[your_program] Error: Expected ';' after value
[tester::#PX4] [test-2] ✓ 1 line(s) match on stdout
[tester::#PX4] [test-2] ✓ Received exit code 65.
[tester::#PX4] [test-3] Running test case: 3
[tester::#PX4] [test-3] Writing contents to ./test.lox:
[tester::#PX4] [test-3.lox] // This function declaration is missing the opening and closing braces
[tester::#PX4] [test-3.lox] // The body should always be inside a block
[tester::#PX4] [test-3.lox] // Hence the compiler error
[tester::#PX4] [test-3.lox] fun f() 82;
[tester::#PX4] [test-3.lox] print f();
[tester::#PX4] [test-3.lox] 
[tester::#PX4] [test-3] $ ./your_program.sh run test.lox
[your_program] Error: Expect '{' before function body.
[tester::#PX4] [test-3] ✓ 1 line(s) match on stdout
[tester::#PX4] [test-3] ✓ Received exit code 65.
[tester::#PX4] [test-4] Running test case: 4
[tester::#PX4] [test-4] Writing contents to ./test.lox:
[tester::#PX4] [test-4.lox] // This function declaration is missing a comma between b and c
[tester::#PX4] [test-4.lox] // Hence the compiler error
[tester::#PX4] [test-4.lox] fun foo(a, b c, d, e, f) {}
[tester::#PX4] [test-4.lox] foo();
[tester::#PX4] [test-4.lox] 
[tester::#PX4] [test-4] $ ./your_program.sh run test.lox
[your_program] Error: Expect ')' after parameters.
[tester::#PX4] [test-4] ✓ 1 line(s) match on stdout
[tester::#PX4] [test-4] ✓ Received exit code 65.
[tester::#PX4] Test passed.
[tester::#LB6] Running tests for Stage #LB6 (Functions - Functions with arguments)
[tester::#LB6] [test-1] Running test case: 1
[tester::#LB6] [test-1] Writing contents to ./test.lox:
[tester::#LB6] [test-1.lox] // This is a simple function that takes one argument and prints it
[tester::#LB6] [test-1.lox] fun f1(a) { print a; }
[tester::#LB6] [test-1.lox] f1(84);
[tester::#LB6] [test-1] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'a' at line 2
[your_program]   Checking scope 0: ["a"]
[your_program]   Found 'a' at distance 0 (Expr ID: 94254535900648)
[your_program] Resolver: Resolving local variable 'f1' at line 3
[your_program]   'f1' not found in any scope, assuming global
[your_program] 84
[tester::#LB6] [test-1] ✓ 1 line(s) match on stdout
[tester::#LB6] [test-1] ✓ Received exit code 0.
[tester::#LB6] [test-2] Running test case: 2
[tester::#LB6] [test-2] Writing contents to ./test.lox:
[tester::#LB6] [test-2.lox] // This function takes three arguments and prints their sum
[tester::#LB6] [test-2.lox] fun f3(a, b, c) { print a + b + c; }
[tester::#LB6] [test-2.lox] f3(50, 50, 50);
[tester::#LB6] [test-2.lox] 
[tester::#LB6] [test-2] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'a' at line 2
[your_program]   Checking scope 0: ["b", "a", "c"]
[your_program]   Found 'a' at distance 0 (Expr ID: 94865695575056)
[your_program] Resolver: Resolving local variable 'b' at line 2
[your_program]   Checking scope 0: ["b", "a", "c"]
[your_program]   Found 'b' at distance 0 (Expr ID: 94865695575200)
[your_program] Resolver: Resolving local variable 'c' at line 2
[your_program]   Checking scope 0: ["b", "a", "c"]
[your_program]   Found 'c' at distance 0 (Expr ID: 94865695575488)
[your_program] Resolver: Resolving local variable 'f3' at line 3
[your_program] 150
[your_program]   'f3' not found in any scope, assuming global
[tester::#LB6] [test-2] ✓ 1 line(s) match on stdout
[tester::#LB6] [test-2] ✓ Received exit code 0.
[tester::#LB6] [test-3] Running test case: 3
[tester::#LB6] [test-3] Writing contents to ./test.lox:
[tester::#LB6] [test-3.lox] // This function takes eight arguments and prints their sum
[tester::#LB6] [test-3.lox] fun f8(a, b, c, d, e, f, g, h) { print a - b + c * d + e - f + g - h; }
[tester::#LB6] [test-3.lox] f8(34, 34, 34, 34, 34, 34, 34, 34);
[tester::#LB6] [test-3] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'a' at line 2
[your_program]   Checking scope 0: ["c", "d", "h", "f", "b", "e", "g", "a"]
[your_program] 1156
[your_program]   Found 'a' at distance 0 (Expr ID: 94719415277664)
[your_program] Resolver: Resolving local variable 'b' at line 2
[your_program]   Checking scope 0: ["c", "d", "h", "f", "b", "e", "g", "a"]
[your_program]   Found 'b' at distance 0 (Expr ID: 94719415277808)
[your_program] Resolver: Resolving local variable 'c' at line 2
[your_program]   Checking scope 0: ["c", "d", "h", "f", "b", "e", "g", "a"]
[your_program]   Found 'c' at distance 0 (Expr ID: 94719415277952)
[your_program] Resolver: Resolving local variable 'd' at line 2
[your_program]   Checking scope 0: ["c", "d", "h", "f", "b", "e", "g", "a"]
[your_program]   Found 'd' at distance 0 (Expr ID: 94719415278096)
[your_program] Resolver: Resolving local variable 'e' at line 2
[your_program]   Checking scope 0: ["c", "d", "h", "f", "b", "e", "g", "a"]
[your_program]   Found 'e' at distance 0 (Expr ID: 94719415278672)
[your_program] Resolver: Resolving local variable 'f' at line 2
[your_program]   Checking scope 0: ["c", "d", "h", "f", "b", "e", "g", "a"]
[your_program]   Found 'f' at distance 0 (Expr ID: 94719415278960)
[your_program] Resolver: Resolving local variable 'g' at line 2
[your_program]   Checking scope 0: ["c", "d", "h", "f", "b", "e", "g", "a"]
[your_program]   Found 'g' at distance 0 (Expr ID: 94719415279248)
[your_program] Resolver: Resolving local variable 'h' at line 2
[your_program]   Checking scope 0: ["c", "d", "h", "f", "b", "e", "g", "a"]
[your_program]   Found 'h' at distance 0 (Expr ID: 94719415279536)
[your_program] Resolver: Resolving local variable 'f8' at line 3
[your_program]   'f8' not found in any scope, assuming global
[tester::#LB6] [test-3] ✓ 1 line(s) match on stdout
[tester::#LB6] [test-3] ✓ Received exit code 0.
[tester::#LB6] [test-4] Running test case: 4
[tester::#LB6] [test-4] Writing contents to ./test.lox:
[tester::#LB6] [test-4.lox] // This function takes two arguments and prints the grade based on the score and bonus
[tester::#LB6] [test-4.lox] fun calculateGrade(score, bonus) {
[tester::#LB6] [test-4.lox]   var finalScore = score + bonus;
[tester::#LB6] [test-4.lox] 
[tester::#LB6] [test-4.lox]   if (finalScore >= 90) {
[tester::#LB6] [test-4.lox]     print "A";
[tester::#LB6] [test-4.lox]   } else if (finalScore >= 80) {
[tester::#LB6] [test-4.lox]     print "B";
[tester::#LB6] [test-4.lox]   } else if (finalScore >= 70) {
[tester::#LB6] [test-4.lox]     print "C";
[tester::#LB6] [test-4.lox]   } else if (finalScore >= 60) {
[tester::#LB6] [test-4.lox]     print "D";
[tester::#LB6] [test-4.lox]   } else {
[tester::#LB6] [test-4.lox]     print "F";
[tester::#LB6] [test-4.lox]   }
[tester::#LB6] [test-4.lox] }
[tester::#LB6] [test-4.lox] 
[tester::#LB6] [test-4.lox] var score = 56;
[tester::#LB6] [test-4.lox] var bonus = 2;
[tester::#LB6] [test-4.lox] print "Grade for given score is: ";
[tester::#LB6] [test-4.lox] calculateGrade(score, bonus);
[tester::#LB6] [test-4] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'score' at line 3
[your_program] Grade for given score is: 
[your_program] F
[your_program]   Checking scope 0: ["bonus", "score", "finalScore"]
[your_program]   Found 'score' at distance 0 (Expr ID: 94850422511584)
[your_program] Resolver: Resolving local variable 'bonus' at line 3
[your_program]   Checking scope 0: ["bonus", "score", "finalScore"]
[your_program]   Found 'bonus' at distance 0 (Expr ID: 94850422511728)
[your_program] Resolver: Resolving local variable 'finalScore' at line 5
[your_program]   Checking scope 0: ["bonus", "score", "finalScore"]
[your_program]   Found 'finalScore' at distance 0 (Expr ID: 94850422512784)
[your_program] Resolver: Resolving local variable 'finalScore' at line 7
[your_program]   Checking scope 0: ["bonus", "score", "finalScore"]
[your_program]   Found 'finalScore' at distance 0 (Expr ID: 94850422514224)
[your_program] Resolver: Resolving local variable 'finalScore' at line 9
[your_program]   Checking scope 0: ["bonus", "score", "finalScore"]
[your_program]   Found 'finalScore' at distance 0 (Expr ID: 94850422515664)
[your_program] Resolver: Resolving local variable 'finalScore' at line 11
[your_program]   Checking scope 0: ["bonus", "score", "finalScore"]
[your_program]   Found 'finalScore' at distance 0 (Expr ID: 94850422517104)
[your_program] Resolver: Resolving local variable 'calculateGrade' at line 21
[your_program]   'calculateGrade' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'score' at line 21
[your_program]   'score' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'bonus' at line 21
[your_program]   'bonus' not found in any scope, assuming global
[tester::#LB6] [test-4] ✓ 2 line(s) match on stdout
[tester::#LB6] [test-4] ✓ Received exit code 0.
[tester::#LB6] Test passed.
[tester::#PG8] Running tests for Stage #PG8 (Functions - Functions without arguments)
[tester::#PG8] [test-1] Running test case: 1
[tester::#PG8] [test-1] Writing contents to ./test.lox:
[tester::#PG8] [test-1.lox] // This program defines a simple function that doesn't take any arguments
[tester::#PG8] [test-1.lox] // and then invokes the function
[tester::#PG8] [test-1.lox] fun world() { print 75; }
[tester::#PG8] [test-1.lox] world();
[tester::#PG8] [test-1] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'world' at line 4
[your_program]   'world' not found in any scope, assuming global
[your_program] 75
[tester::#PG8] [test-1] ✓ 1 line(s) match on stdout
[tester::#PG8] [test-1] ✓ Received exit code 0.
[tester::#PG8] [test-2] Running test case: 2
[tester::#PG8] [test-2] Writing contents to ./test.lox:
[tester::#PG8] [test-2.lox] // This function, when invoked should not return or print anything
[tester::#PG8] [test-2.lox] fun f() {}
[tester::#PG8] [test-2.lox] f();
[tester::#PG8] [test-2] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'f' at line 3
[your_program]   'f' not found in any scope, assuming global
[tester::#PG8] [test-2] ✓ 1 line(s) match on stdout
[tester::#PG8] [test-2] ✓ Received exit code 0.
[tester::#PG8] [test-3] Running test case: 3
[tester::#PG8] [test-3] Writing contents to ./test.lox:
[tester::#PG8] [test-3.lox] // This program should print <fn foo>
[tester::#PG8] [test-3.lox] fun foo() {}
[tester::#PG8] [test-3.lox] print foo;
[tester::#PG8] [test-3] $ ./your_program.sh run test.lox
[your_program] <fn foo>
[your_program] Resolver: Resolving local variable 'foo' at line 3
[your_program]   'foo' not found in any scope, assuming global
[tester::#PG8] [test-3] ✓ 1 line(s) match on stdout
[tester::#PG8] [test-3] ✓ Received exit code 0.
[tester::#PG8] [test-4] Running test case: 4
[tester::#PG8] [test-4] Writing contents to ./test.lox:
[tester::#PG8] [test-4.lox] // This program calculates the cumulative sum of numbers from 1 to n.
[tester::#PG8] [test-4.lox] fun cumulative_sum() {
[tester::#PG8] [test-4.lox]     var n = 10;  // Fixed value
[tester::#PG8] [test-4.lox]     var total = 0;
[tester::#PG8] [test-4.lox]     var i = 1;
[tester::#PG8] [test-4.lox]     while (i <= n) {
[tester::#PG8] [test-4.lox]         total = total + i;
[tester::#PG8] [test-4.lox]         i = i + 1;
[tester::#PG8] [test-4.lox]     }
[tester::#PG8] [test-4.lox]     print "The cumulative sum from 1 to 10 is: ";
[tester::#PG8] [test-4.lox]     print total;
[tester::#PG8] [test-4.lox] }
[tester::#PG8] [test-4.lox] 
[tester::#PG8] [test-4.lox] cumulative_sum();
[tester::#PG8] [test-4] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'i' at line 6
[your_program]   Checking scope 0: ["i", "n", "total"]
[your_program]   Found 'i' at distance 0 (Expr ID: 94186928356064)
[your_program] Resolver: Resolving local variable 'n' at line 6
[your_program]   Checking scope 0: ["i", "n", "total"]
[your_program]   Found 'n' at distance 0 (Expr ID: 94186928356208)
[your_program] Resolver: Resolving local variable 'total' at line 7
[your_program]   Checking scope 0: []
[your_program] The cumulative sum from 1 to 10 is: 
[your_program] 55
[your_program]   Checking scope 1: ["i", "n", "total"]
[your_program]   Found 'total' at distance 1 (Expr ID: 94186928356352)
[your_program] Resolver: Resolving local variable 'i' at line 7
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["i", "n", "total"]
[your_program]   Found 'i' at distance 1 (Expr ID: 94186928356496)
[your_program] Resolver: Resolving local variable 'total' at line 7
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["i", "n", "total"]
[your_program]   Found 'total' at distance 1 (Expr ID: 94186928356792)
[your_program] Resolver: Resolving local variable 'i' at line 8
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["i", "n", "total"]
[your_program]   Found 'i' at distance 1 (Expr ID: 94186928357696)
[your_program] Resolver: Resolving local variable 'i' at line 8
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["i", "n", "total"]
[your_program]   Found 'i' at distance 1 (Expr ID: 94186928357016)
[your_program] Resolver: Resolving local variable 'total' at line 11
[your_program]   Checking scope 0: ["i", "n", "total"]
[your_program]   Found 'total' at distance 0 (Expr ID: 94186928364056)
[your_program] Resolver: Resolving local variable 'cumulative_sum' at line 14
[your_program]   'cumulative_sum' not found in any scope, assuming global
[tester::#PG8] [test-4] ✓ 2 line(s) match on stdout
[tester::#PG8] [test-4] ✓ Received exit code 0.
[tester::#PG8] Test passed.
[tester::#AV4] Running tests for Stage #AV4 (Functions - Native functions)
[tester::#AV4] [test-1] Running test case: 1
[tester::#AV4] [test-1] Writing contents to ./test.lox:
[tester::#AV4] [test-1.lox] print clock() + 99;
[tester::#AV4] [test-1] $ ./your_program.sh run test.lox
[your_program] 1743444631.01584
[your_program] Resolver: Resolving local variable 'clock' at line 1
[your_program]   'clock' not found in any scope, assuming global
[tester::#AV4] [test-1] ✓ 1743444631.015840
[tester::#AV4] [test-1] ✓ 1 line(s) match on stdout
[tester::#AV4] [test-1] ✓ Received exit code 0.
[tester::#AV4] [test-2] Running test case: 2
[tester::#AV4] [test-2] Writing contents to ./test.lox:
[tester::#AV4] [test-2.lox] print clock() / 1000;
[tester::#AV4] [test-2] $ ./your_program.sh run test.lox
[your_program] 1743444.5320187167
[your_program] Resolver: Resolving local variable 'clock' at line 1
[your_program]   'clock' not found in any scope, assuming global
[tester::#AV4] [test-2] ✓ 1743444.532019
[tester::#AV4] [test-2] ✓ 1 line(s) match on stdout
[tester::#AV4] [test-2] ✓ Received exit code 0.
[tester::#AV4] [test-3] Running test case: 3
[tester::#AV4] [test-3] Writing contents to ./test.lox:
[tester::#AV4] [test-3.lox] // This program utilizes the built-in clock() function
[tester::#AV4] [test-3.lox] // and runs a check to see if the operation has timed out
[tester::#AV4] [test-3.lox] var startTime = clock();
[tester::#AV4] [test-3.lox] var timeoutSeconds = 2;
[tester::#AV4] [test-3.lox] 
[tester::#AV4] [test-3.lox] // Check if less than 2 seconds have elapsed
[tester::#AV4] [test-3.lox] if ((clock() >= startTime) and (clock() <= (startTime + timeoutSeconds))) {
[tester::#AV4] [test-3.lox]   print "Operation in progress...";
[tester::#AV4] [test-3.lox] } else {
[tester::#AV4] [test-3.lox]   print "Operation timed out!";
[tester::#AV4] [test-3.lox] }
[tester::#AV4] [test-3] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'clock' at line 3
[your_program]   'clock' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'clock' at line 7
[your_program]   'clock' not found in any scope, assuming global
[your_program] Operation in progress...
[your_program] Resolver: Resolving local variable 'startTime' at line 7
[your_program]   'startTime' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'clock' at line 7
[your_program]   'clock' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'startTime' at line 7
[your_program]   'startTime' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'timeoutSeconds' at line 7
[your_program]   'timeoutSeconds' not found in any scope, assuming global
[tester::#AV4] [test-3] ✓ 1 line(s) match on stdout
[tester::#AV4] [test-3] ✓ Received exit code 0.
[tester::#AV4] [test-4] Running test case: 4
[tester::#AV4] [test-4] Writing contents to ./test.lox:
[tester::#AV4] [test-4.lox] // This program utilizes the built-in clock() function
[tester::#AV4] [test-4.lox] // to create a timer that runs for 0.2 seconds
[tester::#AV4] [test-4.lox] var startTime = clock();
[tester::#AV4] [test-4.lox] var lastCheck = startTime;
[tester::#AV4] [test-4.lox] var running = true;
[tester::#AV4] [test-4.lox] 
[tester::#AV4] [test-4.lox] print "Starting timer for 0.2 seconds";
[tester::#AV4] [test-4.lox] var startTime = clock();
[tester::#AV4] [test-4.lox] 
[tester::#AV4] [test-4.lox] while (running) {
[tester::#AV4] [test-4.lox]   if (clock() > startTime + 0.2) {
[tester::#AV4] [test-4.lox]     print "Timer ended";
[tester::#AV4] [test-4.lox]     running = false;
[tester::#AV4] [test-4.lox]   }
[tester::#AV4] [test-4.lox] }
[tester::#AV4] [test-4] $ ./your_program.sh run test.lox
[your_program] Starting timer for 0.2 seconds
[your_program] Resolver: Resolving local variable 'clock' at line 3
[your_program]   'clock' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'startTime' at line 4
[your_program]   'startTime' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'clock' at line 8
[your_program]   'clock' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'running' at line 10
[your_program]   'running' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'clock' at line 11
[your_program]   Checking scope 0: []
[your_program]   'clock' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'startTime' at line 11
[your_program]   Checking scope 0: []
[your_program]   'startTime' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'running' at line 13
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: []
[your_program]   'running' not found in any scope, assuming global
[your_program] Timer ended
[tester::#AV4] [test-4] ✓ 2 line(s) match on stdout
[tester::#AV4] [test-4] ✓ Received exit code 0.
[tester::#AV4] Test passed.
[tester::#VT1] Running tests for Stage #VT1 (Control Flow - Syntactic errors)
[tester::#VT1] [test-1] Running test case: 1
[tester::#VT1] [test-1] Writing contents to ./test.lox:
[tester::#VT1] [test-1.lox] // This program would give a compile error
[tester::#VT1] [test-1.lox] // because the variable declaration is not inside a block
[tester::#VT1] [test-1.lox] for (;;) var foo;
[tester::#VT1] [test-1] $ ./your_program.sh run test.lox
[your_program] Error: Variable declaration cannot be used as loop body
[tester::#VT1] [test-1] ✓ 1 line(s) match on stdout
[tester::#VT1] [test-1] ✓ Received exit code 65.
[tester::#VT1] [test-2] Running test case: 2
[tester::#VT1] [test-2] Writing contents to ./test.lox:
[tester::#VT1] [test-2.lox] // This program would give a compile error
[tester::#VT1] [test-2.lox] // because the condition is not valid
[tester::#VT1] [test-2.lox] for (var a = 1; {}; a = a + 1) {}
[tester::#VT1] [test-2] $ ./your_program.sh run test.lox
[your_program] Error: Expected expression, found token type LeftBrace at line 3
[tester::#VT1] [test-2] ✓ 1 line(s) match on stdout
[tester::#VT1] [test-2] ✓ Received exit code 65.
[tester::#VT1] [test-3] Running test case: 3
[tester::#VT1] [test-3] Writing contents to ./test.lox:
[tester::#VT1] [test-3.lox] // This program would give a compile error
[tester::#VT1] [test-3.lox] // because the increment clause is not valid
[tester::#VT1] [test-3.lox] for (var a = 1; a < 2; {}) {}
[tester::#VT1] [test-3] $ ./your_program.sh run test.lox
[your_program] Error: Expected expression, found token type LeftBrace at line 3
[tester::#VT1] [test-3] ✓ 1 line(s) match on stdout
[tester::#VT1] [test-3] ✓ Received exit code 65.
[tester::#VT1] [test-4] Running test case: 4
[tester::#VT1] [test-4] Writing contents to ./test.lox:
[tester::#VT1] [test-4.lox] // This program would give a compile error
[tester::#VT1] [test-4.lox] // because the initialization clause is not valid
[tester::#VT1] [test-4.lox] for ({}; a < 2; a = a + 1) {}
[tester::#VT1] [test-4] $ ./your_program.sh run test.lox
[your_program] Error: Expected expression, found token type LeftBrace at line 3
[tester::#VT1] [test-4] ✓ 1 line(s) match on stdout
[tester::#VT1] [test-4] ✓ Received exit code 65.
[tester::#VT1] Test passed.
[tester::#BW6] Running tests for Stage #BW6 (Control Flow - For statements)
[tester::#BW6] [test-1] Running test case: 1
[tester::#BW6] [test-1] Writing contents to ./test.lox:
[tester::#BW6] [test-1.lox] // This program uses a for loop to print the numbers from 0 to 3
[tester::#BW6] [test-1.lox] // The assignment operation returns the assigned value
[tester::#BW6] [test-1.lox] for (var world = 0; world < 3;) print world = world + 1;
[tester::#BW6] [test-1] $ ./your_program.sh run test.lox
[your_program] 1
[your_program] 2
[your_program] 3
[your_program] Resolver: Resolving local variable 'world' at line 3
[your_program]   Checking scope 0: ["world"]
[your_program]   Found 'world' at distance 0 (Expr ID: 94259422669904)
[your_program] Resolver: Resolving local variable 'world' at line 3
[your_program]   Checking scope 0: ["world"]
[your_program]   Found 'world' at distance 0 (Expr ID: 94259422670192)
[your_program] Resolver: Resolving local variable 'world' at line 3
[your_program]   Checking scope 0: ["world"]
[your_program]   Found 'world' at distance 0 (Expr ID: 94259422670632)
[tester::#BW6] [test-1] ✓ 3 line(s) match on stdout
[tester::#BW6] [test-1] ✓ Received exit code 0.
[tester::#BW6] [test-2] Running test case: 2
[tester::#BW6] [test-2] Writing contents to ./test.lox:
[tester::#BW6] [test-2.lox] // This program uses a for loop to print the numbers from 0 to 3
[tester::#BW6] [test-2.lox] for (var bar = 0; bar < 3; bar = bar + 1) {
[tester::#BW6] [test-2.lox]   print bar;
[tester::#BW6] [test-2.lox] }
[tester::#BW6] [test-2] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'bar' at line 2
[your_program]   Checking scope 0: ["bar"]
[your_program] 0
[your_program] 1
[your_program] 2
[your_program]   Found 'bar' at distance 0 (Expr ID: 94796812278832)
[your_program] Resolver: Resolving local variable 'bar' at line 3
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: []
[your_program]   Checking scope 2: ["bar"]
[your_program]   Found 'bar' at distance 2 (Expr ID: 94796812283528)
[your_program] Resolver: Resolving local variable 'bar' at line 2
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["bar"]
[your_program]   Found 'bar' at distance 1 (Expr ID: 94796812283088)
[your_program] Resolver: Resolving local variable 'bar' at line 2
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["bar"]
[your_program]   Found 'bar' at distance 1 (Expr ID: 94796812284664)
[tester::#BW6] [test-2] ✓ 3 line(s) match on stdout
[tester::#BW6] [test-2] ✓ Received exit code 0.
[tester::#BW6] [test-3] Running test case: 3
[tester::#BW6] [test-3] Writing contents to ./test.lox:
[tester::#BW6] [test-3.lox] // This program uses a for loop to print the numbers from 0 to 2
[tester::#BW6] [test-3.lox] // The loop initializer is ignored in this loop
[tester::#BW6] [test-3.lox] var bar = 0;
[tester::#BW6] [test-3.lox] for (; bar < 2; bar = bar + 1) print bar;
[tester::#BW6] [test-3.lox] 
[tester::#BW6] [test-3.lox] // This program uses a for loop to print the numbers from 0 to 2
[tester::#BW6] [test-3.lox] // The loop increment clause is ignored in this loop
[tester::#BW6] [test-3.lox] for (var world = 0; world < 2;) {
[tester::#BW6] [test-3.lox]   print world;
[tester::#BW6] [test-3.lox]   world = world + 1;
[tester::#BW6] [test-3.lox] }
[tester::#BW6] [test-3] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'bar' at line 4
[your_program]   'bar' not found in any scope, assuming global
[your_program] 0
[your_program] 1
[your_program] 0
[your_program] 1
[your_program] Resolver: Resolving local variable 'bar' at line 4
[your_program]   Checking scope 0: []
[your_program]   'bar' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'bar' at line 4
[your_program]   Checking scope 0: []
[your_program]   'bar' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'bar' at line 4
[your_program]   Checking scope 0: []
[your_program]   'bar' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'world' at line 8
[your_program]   Checking scope 0: ["world"]
[your_program]   Found 'world' at distance 0 (Expr ID: 94089813921936)
[your_program] Resolver: Resolving local variable 'world' at line 9
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["world"]
[your_program]   Found 'world' at distance 1 (Expr ID: 94089813922232)
[your_program] Resolver: Resolving local variable 'world' at line 10
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["world"]
[your_program]   Found 'world' at distance 1 (Expr ID: 94089813923136)
[your_program] Resolver: Resolving local variable 'world' at line 10
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["world"]
[your_program]   Found 'world' at distance 1 (Expr ID: 94089813922456)
[tester::#BW6] [test-3] ✓ 4 line(s) match on stdout
[tester::#BW6] [test-3] ✓ Received exit code 0.
[tester::#BW6] [test-4] Running test case: 4
[tester::#BW6] [test-4] Writing contents to ./test.lox:
[tester::#BW6] [test-4.lox] // This program uses for loops and block scopes<|SPACE|>// to print the updates to the same variable
[tester::#BW6] [test-4.lox] var world = "after";
[tester::#BW6] [test-4.lox] {
[tester::#BW6] [test-4.lox]   var world = "before";
[tester::#BW6] [test-4.lox] 
[tester::#BW6] [test-4.lox]   for (var world = 0; world < 1; world = world + 1) {
[tester::#BW6] [test-4.lox]     print world;
[tester::#BW6] [test-4.lox]     var world = -1;
[tester::#BW6] [test-4.lox]     print world;
[tester::#BW6] [test-4.lox]   }
[tester::#BW6] [test-4.lox] }
[tester::#BW6] [test-4.lox] 
[tester::#BW6] [test-4.lox] {
[tester::#BW6] [test-4.lox]   for (var world = 0; world > 0; world = world + 1) {}
[tester::#BW6] [test-4.lox] 
[tester::#BW6] [test-4.lox]   var world = "after";
[tester::#BW6] [test-4.lox]   print world;
[tester::#BW6] [test-4.lox] 
[tester::#BW6] [test-4.lox]   for (world = 0; world < 1; world = world + 1) {
[tester::#BW6] [test-4.lox]     print world;
[tester::#BW6] [test-4.lox]   }
[tester::#BW6] [test-4.lox] }
[tester::#BW6] [test-4] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'world' at line 7
[your_program] 0
[your_program] -1
[your_program] after
[your_program] 0
[your_program]   Checking scope 0: ["world"]
[your_program]   Found 'world' at distance 0 (Expr ID: 94441946336992)
[your_program] Resolver: Resolving local variable 'world' at line 8
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: []
[your_program]   Checking scope 2: ["world"]
[your_program]   Found 'world' at distance 2 (Expr ID: 94441946337720)
[your_program] Resolver: Resolving local variable 'world' at line 10
[your_program]   Checking scope 0: ["world"]
[your_program]   Found 'world' at distance 0 (Expr ID: 94441946338168)
[your_program] Resolver: Resolving local variable 'world' at line 7
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["world"]
[your_program]   Found 'world' at distance 1 (Expr ID: 94441946337280)
[your_program] Resolver: Resolving local variable 'world' at line 7
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["world"]
[your_program]   Found 'world' at distance 1 (Expr ID: 94441946339000)
[your_program] Resolver: Resolving local variable 'world' at line 15
[your_program]   Checking scope 0: ["world"]
[your_program]   Found 'world' at distance 0 (Expr ID: 94441946339936)
[your_program] Resolver: Resolving local variable 'world' at line 15
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["world"]
[your_program]   Found 'world' at distance 1 (Expr ID: 94441946340224)
[your_program] Resolver: Resolving local variable 'world' at line 15
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["world"]
[your_program]   Found 'world' at distance 1 (Expr ID: 94441946340888)
[your_program] Resolver: Resolving local variable 'world' at line 18
[your_program]   Checking scope 0: ["world"]
[your_program]   Found 'world' at distance 0 (Expr ID: 94441946342280)
[your_program] Resolver: Resolving local variable 'world' at line 20
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["world"]
[your_program]   Found 'world' at distance 1 (Expr ID: 94441946354840)
[your_program] Resolver: Resolving local variable 'world' at line 20
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: ["world"]
[your_program]   Found 'world' at distance 1 (Expr ID: 94441946342880)
[your_program] Resolver: Resolving local variable 'world' at line 21
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: []
[your_program]   Checking scope 2: []
[your_program]   Checking scope 3: ["world"]
[your_program]   Found 'world' at distance 3 (Expr ID: 94441946353224)
[your_program] Resolver: Resolving local variable 'world' at line 20
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: []
[your_program]   Checking scope 2: ["world"]
[your_program]   Found 'world' at distance 2 (Expr ID: 94441946343168)
[your_program] Resolver: Resolving local variable 'world' at line 20
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: []
[your_program]   Checking scope 2: ["world"]
[your_program]   Found 'world' at distance 2 (Expr ID: 94441946354360)
[tester::#BW6] [test-4] ✓ 4 line(s) match on stdout
[tester::#BW6] [test-4] ✓ Received exit code 0.
[tester::#BW6] Test passed.
[tester::#QY3] Running tests for Stage #QY3 (Control Flow - While statements)
[tester::#QY3] [test-1] Running test case: 1
[tester::#QY3] [test-1] Writing contents to ./test.lox:
[tester::#QY3] [test-1.lox] // This program uses a while loop to print the numbers from 0 to N
[tester::#QY3] [test-1.lox] // The assignment operation returns the assigned value
[tester::#QY3] [test-1.lox] var baz = 0;
[tester::#QY3] [test-1.lox] while (baz < 3) print baz = baz + 1;
[tester::#QY3] [test-1] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'baz' at line 4
[your_program]   'baz' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'baz' at line 4
[your_program]   'baz' not found in any scope, assuming global
[your_program] 1
[your_program] 2
[your_program] 3
[your_program] Resolver: Resolving local variable 'baz' at line 4
[your_program]   'baz' not found in any scope, assuming global
[tester::#QY3] [test-1] ✓ 3 line(s) match on stdout
[tester::#QY3] [test-1] ✓ Received exit code 0.
[tester::#QY3] [test-2] Running test case: 2
[tester::#QY3] [test-2] Writing contents to ./test.lox:
[tester::#QY3] [test-2.lox] // This program uses a while loop to print the numbers from 0 to 3
[tester::#QY3] [test-2.lox] // The statement inside the block is executed every time the loop condition is true
[tester::#QY3] [test-2.lox] var quz = 0;
[tester::#QY3] [test-2.lox] while (quz < 3) {
[tester::#QY3] [test-2.lox]   print quz;
[tester::#QY3] [test-2.lox]   quz = quz + 1;
[tester::#QY3] [test-2.lox] }
[tester::#QY3] [test-2] $ ./your_program.sh run test.lox
[your_program] 0
[your_program] 1
[your_program] 2
[your_program] Resolver: Resolving local variable 'quz' at line 4
[your_program]   'quz' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'quz' at line 5
[your_program]   Checking scope 0: []
[your_program]   'quz' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'quz' at line 6
[your_program]   Checking scope 0: []
[your_program]   'quz' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'quz' at line 6
[your_program]   Checking scope 0: []
[your_program]   'quz' not found in any scope, assuming global
[tester::#QY3] [test-2] ✓ 3 line(s) match on stdout
[tester::#QY3] [test-2] ✓ Received exit code 0.
[tester::#QY3] [test-3] Running test case: 3
[tester::#QY3] [test-3] Writing contents to ./test.lox:
[tester::#QY3] [test-3.lox] // This program uses a while loop to calculate the factorial of 5
[tester::#QY3] [test-3.lox] // The first while loop never runs because the condition is false
[tester::#QY3] [test-3.lox] while (false) { print "should not print"; }
[tester::#QY3] [test-3.lox] 
[tester::#QY3] [test-3.lox] var product = 1;
[tester::#QY3] [test-3.lox] var i = 1;
[tester::#QY3] [test-3.lox] 
[tester::#QY3] [test-3.lox] while (i <= 5) {
[tester::#QY3] [test-3.lox]   product = product * i;
[tester::#QY3] [test-3.lox]   i = i + 1;
[tester::#QY3] [test-3.lox] }
[tester::#QY3] [test-3.lox] 
[tester::#QY3] [test-3.lox] print "Factorial of 5: "; print product;
[tester::#QY3] [test-3.lox] 
[tester::#QY3] [test-3] $ ./your_program.sh run test.lox
[your_program] Factorial of 5: 
[your_program] 120
[your_program] Resolver: Resolving local variable 'i' at line 8
[your_program]   'i' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'product' at line 9
[your_program]   Checking scope 0: []
[your_program]   'product' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'i' at line 9
[your_program]   Checking scope 0: []
[your_program]   'i' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'product' at line 9
[your_program]   Checking scope 0: []
[your_program]   'product' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'i' at line 10
[your_program]   Checking scope 0: []
[your_program]   'i' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'i' at line 10
[your_program]   Checking scope 0: []
[your_program]   'i' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'product' at line 13
[your_program]   'product' not found in any scope, assuming global
[tester::#QY3] [test-3] ✓ 2 line(s) match on stdout
[tester::#QY3] [test-3] ✓ Received exit code 0.
[tester::#QY3] [test-4] Running test case: 4
[tester::#QY3] [test-4] Writing contents to ./test.lox:
[tester::#QY3] [test-4.lox] // This program uses a while loop to generate and print the first N Fibonacci numbers
[tester::#QY3] [test-4.lox] var n = 10;
[tester::#QY3] [test-4.lox] var fm = 0;
[tester::#QY3] [test-4.lox] var fn = 1;
[tester::#QY3] [test-4.lox] var index = 0;
[tester::#QY3] [test-4.lox] 
[tester::#QY3] [test-4.lox] while (index < n) {
[tester::#QY3] [test-4.lox]     print fm;
[tester::#QY3] [test-4.lox]     var temp = fm;
[tester::#QY3] [test-4.lox]     fm = fn;
[tester::#QY3] [test-4.lox]     fn = temp + fn;
[tester::#QY3] [test-4.lox]     index = index + 1;
[tester::#QY3] [test-4.lox] }
[tester::#QY3] [test-4] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'index' at line 7
[your_program]   'index' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'n' at line 7
[your_program]   'n' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'fm' at line 8
[your_program] 0
[your_program] 1
[your_program] 1
[your_program] 2
[your_program] 3
[your_program] 5
[your_program] 8
[your_program] 13
[your_program] 21
[your_program] 34
[your_program]   Checking scope 0: []
[your_program]   'fm' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'fm' at line 9
[your_program]   Checking scope 0: ["temp"]
[your_program]   'fm' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'fn' at line 10
[your_program]   Checking scope 0: ["temp"]
[your_program]   'fn' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'fm' at line 10
[your_program]   Checking scope 0: ["temp"]
[your_program]   'fm' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'temp' at line 11
[your_program]   Checking scope 0: ["temp"]
[your_program]   Found 'temp' at distance 0 (Expr ID: 94533112409776)
[your_program] Resolver: Resolving local variable 'fn' at line 11
[your_program]   Checking scope 0: ["temp"]
[your_program]   'fn' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'fn' at line 11
[your_program]   Checking scope 0: ["temp"]
[your_program]   'fn' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'index' at line 12
[your_program]   Checking scope 0: ["temp"]
[your_program]   'index' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'index' at line 12
[your_program]   Checking scope 0: ["temp"]
[your_program]   'index' not found in any scope, assuming global
[tester::#QY3] [test-4] ✓ 10 line(s) match on stdout
[tester::#QY3] [test-4] ✓ Received exit code 0.
[tester::#QY3] Test passed.
[tester::#JX4] Running tests for Stage #JX4 (Control Flow - Logical AND operator)
[tester::#JX4] [test-1] Running test case: 1
[tester::#JX4] [test-1] Writing contents to ./test.lox:
[tester::#JX4] [test-1.lox] // The logical AND operator should return the first falsy value
[tester::#JX4] [test-1.lox] if (false and "bad") print "foo";
[tester::#JX4] [test-1.lox] if (nil and "bad") print "foo";
[tester::#JX4] [test-1.lox] 
[tester::#JX4] [test-1.lox] // If all values are truthy, it returns the last value
[tester::#JX4] [test-1.lox] if (true and "baz") print "baz";
[tester::#JX4] [test-1.lox] if (79 and "bar") print "bar";
[tester::#JX4] [test-1.lox] if ("bar" and "bar") print "bar";
[tester::#JX4] [test-1.lox] if ("" and "world") print "world";
[tester::#JX4] [test-1] $ ./your_program.sh run test.lox
[your_program] baz
[your_program] bar
[your_program] bar
[your_program] world
[tester::#JX4] [test-1] ✓ 4 line(s) match on stdout
[tester::#JX4] [test-1] ✓ Received exit code 0.
[tester::#JX4] [test-2] Running test case: 2
[tester::#JX4] [test-2] Writing contents to ./test.lox:
[tester::#JX4] [test-2.lox] // This program uses the logical AND operator to print the first falsy value
[tester::#JX4] [test-2.lox] // Or the last value if all values are truthy
[tester::#JX4] [test-2.lox] print false and 1;
[tester::#JX4] [test-2.lox] print true and 1;
[tester::#JX4] [test-2.lox] print 59 and "quz" and false;
[tester::#JX4] [test-2.lox] 
[tester::#JX4] [test-2.lox] print 59 and true;
[tester::#JX4] [test-2.lox] print 59 and "quz" and 59;
[tester::#JX4] [test-2] $ ./your_program.sh run test.lox
[your_program] false
[your_program] 1
[your_program] false
[your_program] true
[your_program] 59
[tester::#JX4] [test-2] ✓ 5 line(s) match on stdout
[tester::#JX4] [test-2] ✓ Received exit code 0.
[tester::#JX4] [test-3] Running test case: 3
[tester::#JX4] [test-3] Writing contents to ./test.lox:
[tester::#JX4] [test-3.lox] // This program relies on the fact that assignments return the assigned value
[tester::#JX4] [test-3.lox] // And that the logical AND operator short-circuits
[tester::#JX4] [test-3.lox] // So, when it encounters a falsy value, it wouldn't proceed to the subsequent assignments
[tester::#JX4] [test-3.lox] // And then prints the assigned values
[tester::#JX4] [test-3.lox] var a = "world";
[tester::#JX4] [test-3.lox] var b = "world";
[tester::#JX4] [test-3.lox] (a = true) and (b = false) and (a = "bad");
[tester::#JX4] [test-3.lox] print a;
[tester::#JX4] [test-3.lox] print b;
[tester::#JX4] [test-3] $ ./your_program.sh run test.lox
[your_program] true
[your_program] false
[your_program] Resolver: Resolving local variable 'a' at line 7
[your_program]   'a' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'b' at line 7
[your_program]   'b' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'a' at line 7
[your_program]   'a' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'a' at line 8
[your_program]   'a' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'b' at line 9
[your_program]   'b' not found in any scope, assuming global
[tester::#JX4] [test-3] ✓ 2 line(s) match on stdout
[tester::#JX4] [test-3] ✓ Received exit code 0.
[tester::#JX4] [test-4] Running test case: 4
[tester::#JX4] [test-4] Writing contents to ./test.lox:
[tester::#JX4] [test-4.lox] // This program uses if conditions to get the stage
[tester::#JX4] [test-4.lox] // of a person's life based on their age, and then<|SPACE|>// prints if they are eligible for voting
[tester::#JX4] [test-4.lox] var stage = "unknown";
[tester::#JX4] [test-4.lox] var age = 57;
[tester::#JX4] [test-4.lox] if (age < 18) { stage = "child"; }
[tester::#JX4] [test-4.lox] if (age >= 18) { stage = "adult"; }
[tester::#JX4] [test-4.lox] print stage;
[tester::#JX4] [test-4.lox] 
[tester::#JX4] [test-4.lox] var isAdult = age >= 18;
[tester::#JX4] [test-4.lox] if (isAdult) { print "eligible for voting: true"; }
[tester::#JX4] [test-4.lox] if (!isAdult) { print "eligible for voting: false"; }
[tester::#JX4] [test-4] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'age' at line 6
[your_program]   'age' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'stage' at line 6
[your_program]   Checking scope 0: []
[your_program]   'stage' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'age' at line 7
[your_program] adult
[your_program]   'age' not found in any scope, assuming global
[your_program] eligible for voting: true
[your_program] Resolver: Resolving local variable 'stage' at line 7
[your_program]   Checking scope 0: []
[your_program]   'stage' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'stage' at line 8
[your_program]   'stage' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'age' at line 10
[your_program]   'age' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'isAdult' at line 11
[your_program]   'isAdult' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'isAdult' at line 12
[your_program]   'isAdult' not found in any scope, assuming global
[tester::#JX4] [test-4] ✓ 2 line(s) match on stdout
[tester::#JX4] [test-4] ✓ Received exit code 0.
[tester::#JX4] Test passed.
[tester::#WK8] Running tests for Stage #WK8 (Control Flow - Logical OR operator)
[tester::#WK8] [test-1] Running test case: 1
[tester::#WK8] [test-1] Writing contents to ./test.lox:
[tester::#WK8] [test-1.lox] // The logical OR operator should return the first value that is truthy
[tester::#WK8] [test-1.lox] if (false or "ok") print "hello";
[tester::#WK8] [test-1.lox] if (nil or "ok") print "hello";
[tester::#WK8] [test-1.lox] 
[tester::#WK8] [test-1.lox] if (false or false) print "baz";
[tester::#WK8] [test-1.lox] if (true or "baz") print "baz";
[tester::#WK8] [test-1.lox] 
[tester::#WK8] [test-1.lox] if (87 or "bar") print "bar";
[tester::#WK8] [test-1.lox] if ("bar" or "bar") print "bar";
[tester::#WK8] [test-1.lox] 
[tester::#WK8] [test-1] $ ./your_program.sh run test.lox
[your_program] hello
[your_program] hello
[your_program] baz
[your_program] bar
[your_program] bar
[tester::#WK8] [test-1] ✓ 5 line(s) match on stdout
[tester::#WK8] [test-1] ✓ Received exit code 0.
[tester::#WK8] [test-2] Running test case: 2
[tester::#WK8] [test-2] Writing contents to ./test.lox:
[tester::#WK8] [test-2.lox] // This program uses the logical OR operator to print the first value that is truthy
[tester::#WK8] [test-2.lox] print 24 or true;
[tester::#WK8] [test-2.lox] print false or 24;
[tester::#WK8] [test-2.lox] print false or false or true;
[tester::#WK8] [test-2.lox] 
[tester::#WK8] [test-2.lox] print false or false;
[tester::#WK8] [test-2.lox] print false or false or false;
[tester::#WK8] [test-2.lox] print false or false or false or false;
[tester::#WK8] [test-2] $ ./your_program.sh run test.lox
[your_program] 24
[your_program] 24
[your_program] true
[your_program] false
[your_program] false
[your_program] false
[tester::#WK8] [test-2] ✓ 6 line(s) match on stdout
[tester::#WK8] [test-2] ✓ Received exit code 0.
[tester::#WK8] [test-3] Running test case: 3
[tester::#WK8] [test-3] Writing contents to ./test.lox:
[tester::#WK8] [test-3.lox] // This program relies on the fact that assignments return the assigned value
[tester::#WK8] [test-3.lox] // And that the logical OR operator short-circuits
[tester::#WK8] [test-3.lox] // So, if the first assignment is truthy, it wouldn't proceed to the subsequent assignments
[tester::#WK8] [test-3.lox] // And then prints the assigned values
[tester::#WK8] [test-3.lox] var a = "bar";
[tester::#WK8] [test-3.lox] var b = "bar";
[tester::#WK8] [test-3.lox] (a = false) or (b = true) or (a = "bar");
[tester::#WK8] [test-3.lox] print a;
[tester::#WK8] [test-3.lox] print b;
[tester::#WK8] [test-3] $ ./your_program.sh run test.lox
[your_program] false
[your_program] true
[your_program] Resolver: Resolving local variable 'a' at line 7
[your_program]   'a' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'b' at line 7
[your_program]   'b' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'a' at line 7
[your_program]   'a' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'a' at line 8
[your_program]   'a' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'b' at line 9
[your_program]   'b' not found in any scope, assuming global
[tester::#WK8] [test-3] ✓ 2 line(s) match on stdout
[tester::#WK8] [test-3] ✓ Received exit code 0.
[tester::#WK8] [test-4] Running test case: 4
[tester::#WK8] [test-4] Writing contents to ./test.lox:
[tester::#WK8] [test-4.lox] // This program uses if conditions to get the stage
[tester::#WK8] [test-4.lox] // of a person's life based on their age, and then<|SPACE|>// prints if they are eligible for voting
[tester::#WK8] [test-4.lox] var stage = "unknown";
[tester::#WK8] [test-4.lox] var age = 76;
[tester::#WK8] [test-4.lox] if (age < 18) { stage = "child"; }
[tester::#WK8] [test-4.lox] if (age >= 18) { stage = "adult"; }
[tester::#WK8] [test-4.lox] print stage;
[tester::#WK8] [test-4.lox] 
[tester::#WK8] [test-4.lox] var isAdult = age >= 18;
[tester::#WK8] [test-4.lox] if (isAdult) { print "eligible for voting: true"; }
[tester::#WK8] [test-4.lox] if (!isAdult) { print "eligible for voting: false"; }
[tester::#WK8] [test-4] $ ./your_program.sh run test.lox
[your_program] adult
[your_program] eligible for voting: true
[your_program] Resolver: Resolving local variable 'age' at line 6
[your_program]   'age' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'stage' at line 6
[your_program]   Checking scope 0: []
[your_program]   'stage' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'age' at line 7
[your_program]   'age' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'stage' at line 7
[your_program]   Checking scope 0: []
[your_program]   'stage' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'stage' at line 8
[your_program]   'stage' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'age' at line 10
[your_program]   'age' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'isAdult' at line 11
[your_program]   'isAdult' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'isAdult' at line 12
[your_program]   'isAdult' not found in any scope, assuming global
[tester::#WK8] [test-4] ✓ 2 line(s) match on stdout
[tester::#WK8] [test-4] ✓ Received exit code 0.
[tester::#WK8] Test passed.
[tester::#XJ4] Running tests for Stage #XJ4 (Control Flow - Nested if statements)
[tester::#XJ4] [test-1] Running test case: 1
[tester::#XJ4] [test-1] Writing contents to ./test.lox:
[tester::#XJ4] [test-1.lox] // This program uses nested if statements to print a message
[tester::#XJ4] [test-1.lox] if (true) if (true) print "nested true";
[tester::#XJ4] [test-1.lox] 
[tester::#XJ4] [test-1] $ ./your_program.sh run test.lox
[your_program] nested true
[tester::#XJ4] [test-1] ✓ 1 line(s) match on stdout
[tester::#XJ4] [test-1] ✓ Received exit code 0.
[tester::#XJ4] [test-2] Running test case: 2
[tester::#XJ4] [test-2] Writing contents to ./test.lox:
[tester::#XJ4] [test-2.lox] // This program uses nested if statements to print a message
[tester::#XJ4] [test-2.lox] if (true) {
[tester::#XJ4] [test-2.lox]   if (false) print "quz"; else print "quz";
[tester::#XJ4] [test-2.lox] }
[tester::#XJ4] [test-2] $ ./your_program.sh run test.lox
[your_program] quz
[tester::#XJ4] [test-2] ✓ 1 line(s) match on stdout
[tester::#XJ4] [test-2] ✓ Received exit code 0.
[tester::#XJ4] [test-3] Running test case: 3
[tester::#XJ4] [test-3] Writing contents to ./test.lox:
[tester::#XJ4] [test-3.lox] // This program categorizes a person into different life stages based on their age
[tester::#XJ4] [test-3.lox] // Then based on the age, it prints a message about the person's eligibility for voting, driving, and drinking
[tester::#XJ4] [test-3.lox] var stage = "unknown";
[tester::#XJ4] [test-3.lox] var age = 28;
[tester::#XJ4] [test-3.lox] if (age < 18) {
[tester::#XJ4] [test-3.lox]     if (age < 13) { stage = "child"; }
[tester::#XJ4] [test-3.lox]     else if (age < 16) { stage = "young teenager"; }
[tester::#XJ4] [test-3.lox]     else { stage = "teenager"; }
[tester::#XJ4] [test-3.lox] }
[tester::#XJ4] [test-3.lox] else if (age < 65) {
[tester::#XJ4] [test-3.lox]     if (age < 30) { stage = "young adult"; }
[tester::#XJ4] [test-3.lox]     else if (age < 50) { stage = "adult"; }
[tester::#XJ4] [test-3.lox]     else { stage = "middle-aged adult"; }
[tester::#XJ4] [test-3.lox] }
[tester::#XJ4] [test-3.lox] else { stage = "senior"; }
[tester::#XJ4] [test-3.lox] print stage;
[tester::#XJ4] [test-3.lox] 
[tester::#XJ4] [test-3.lox] var isAdult = age >= 18;
[tester::#XJ4] [test-3.lox] if (isAdult) {
[tester::#XJ4] [test-3.lox]     print "eligible for voting: true";
[tester::#XJ4] [test-3.lox]     if (age < 25) {
[tester::#XJ4] [test-3.lox]         print "first-time voter: likely";
[tester::#XJ4] [test-3.lox]     }
[tester::#XJ4] [test-3.lox]     else { print "first-time voter: unlikely"; }
[tester::#XJ4] [test-3.lox] }
[tester::#XJ4] [test-3.lox] else { print "eligible for voting: false"; }
[tester::#XJ4] [test-3.lox] 
[tester::#XJ4] [test-3.lox] if (age < 16) { print "eligible for driving: false"; }
[tester::#XJ4] [test-3.lox] else if (age < 18) {
[tester::#XJ4] [test-3.lox]     print "eligible for driving: learner's permit";
[tester::#XJ4] [test-3.lox]     if (age < 17) { print "supervised driving required"; }
[tester::#XJ4] [test-3.lox]     else { print "unsupervised driving allowed with restrictions"; }
[tester::#XJ4] [test-3.lox] }
[tester::#XJ4] [test-3.lox] else { print "eligible for driving: full license"; }
[tester::#XJ4] [test-3.lox] 
[tester::#XJ4] [test-3.lox] if (age < 21) { print "eligible for drinking (US): false"; }
[tester::#XJ4] [test-3.lox] else {
[tester::#XJ4] [test-3.lox]     print "eligible for drinking (US): true";
[tester::#XJ4] [test-3.lox]     if (age < 25) { print "remember: drink responsibly!"; }
[tester::#XJ4] [test-3.lox] }
[tester::#XJ4] [test-3] $ ./your_program.sh run test.lox
[your_program] young adult
[your_program] eligible for voting: true
[your_program] first-time voter: unlikely
[your_program] eligible for driving: full license
[your_program] eligible for drinking (US): true
[your_program] Resolver: Resolving local variable 'age' at line 5
[your_program]   'age' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'age' at line 6
[your_program]   Checking scope 0: []
[your_program]   'age' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'stage' at line 6
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: []
[your_program]   'stage' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'age' at line 7
[your_program]   Checking scope 0: []
[your_program]   'age' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'stage' at line 7
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: []
[your_program]   'stage' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'stage' at line 8
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: []
[your_program]   'stage' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'age' at line 10
[your_program]   'age' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'age' at line 11
[your_program]   Checking scope 0: []
[your_program]   'age' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'stage' at line 11
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: []
[your_program]   'stage' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'age' at line 12
[your_program]   Checking scope 0: []
[your_program]   'age' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'stage' at line 12
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: []
[your_program]   'stage' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'stage' at line 13
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: []
[your_program]   'stage' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'stage' at line 15
[your_program]   Checking scope 0: []
[your_program]   'stage' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'stage' at line 16
[your_program]   'stage' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'age' at line 18
[your_program]   'age' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'isAdult' at line 19
[your_program]   'isAdult' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'age' at line 21
[your_program]   Checking scope 0: []
[your_program]   'age' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'age' at line 28
[your_program]   'age' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'age' at line 29
[your_program]   'age' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'age' at line 31
[your_program]   Checking scope 0: []
[your_program]   'age' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'age' at line 36
[your_program]   'age' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'age' at line 39
[your_program]   Checking scope 0: []
[your_program]   'age' not found in any scope, assuming global
[tester::#XJ4] [test-3] ✓ 5 line(s) match on stdout
[tester::#XJ4] [test-3] ✓ Received exit code 0.
[tester::#XJ4] [test-4] Running test case: 4
[tester::#XJ4] [test-4] Writing contents to ./test.lox:
[tester::#XJ4] [test-4.lox] // This program uses nested if statements to print a message
[tester::#XJ4] [test-4.lox] if (true) if (false) print "foo"; else print "quz";
[tester::#XJ4] [test-4] $ ./your_program.sh run test.lox
[your_program] quz
[tester::#XJ4] [test-4] ✓ 1 line(s) match on stdout
[tester::#XJ4] [test-4] ✓ Received exit code 0.
[tester::#XJ4] Test passed.
[tester::#FH8] Running tests for Stage #FH8 (Control Flow - Else-if statements)
[tester::#FH8] [test-1] Running test case: 1
[tester::#FH8] [test-1] Writing contents to ./test.lox:
[tester::#FH8] [test-1.lox] // This program uses a random boolean to decide which branch to execute,
[tester::#FH8] [test-1.lox] // and then prints the appropriate string
[tester::#FH8] [test-1.lox] if (true) print "if branch"; else if (true) print "else-if branch";
[tester::#FH8] [test-1] $ ./your_program.sh run test.lox
[your_program] if branch
[tester::#FH8] [test-1] ✓ 1 line(s) match on stdout
[tester::#FH8] [test-1] ✓ Received exit code 0.
[tester::#FH8] [test-2] Running test case: 2
[tester::#FH8] [test-2] Writing contents to ./test.lox:
[tester::#FH8] [test-2.lox] // This program uses a random boolean to decide which branch to execute,
[tester::#FH8] [test-2.lox] // and then prints the appropriate string
[tester::#FH8] [test-2.lox] if (false) {
[tester::#FH8] [test-2.lox]   print "quz";
[tester::#FH8] [test-2.lox] } else if (false) print "quz";
[tester::#FH8] [test-2.lox] 
[tester::#FH8] [test-2.lox] if (false) print "quz"; else if (false) {
[tester::#FH8] [test-2.lox]   print "quz";
[tester::#FH8] [test-2.lox] }
[tester::#FH8] [test-2.lox] 
[tester::#FH8] [test-2] $ ./your_program.sh run test.lox
[tester::#FH8] [test-2] ✓ 1 line(s) match on stdout
[tester::#FH8] [test-2] ✓ Received exit code 0.
[tester::#FH8] [test-3] Running test case: 3
[tester::#FH8] [test-3] Writing contents to ./test.lox:
[tester::#FH8] [test-3.lox] // This program uses multiple if statements to categorize a person
[tester::#FH8] [test-3.lox] // into different life stages based on their age
[tester::#FH8] [test-3.lox] var age = 26;
[tester::#FH8] [test-3.lox] var stage = "unknown";
[tester::#FH8] [test-3.lox] if (age < 18) { stage = "child"; }
[tester::#FH8] [test-3.lox] else if (age >= 18) { stage = "adult"; }
[tester::#FH8] [test-3.lox] else if (age >= 65) { stage = "senior"; }
[tester::#FH8] [test-3.lox] else if (age >= 100) { stage = "centenarian"; }
[tester::#FH8] [test-3.lox] print stage;
[tester::#FH8] [test-3] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'age' at line 5
[your_program]   'age' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'stage' at line 5
[your_program]   Checking scope 0: []
[your_program]   'stage' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'age' at line 6
[your_program]   'age' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'stage' at line 6
[your_program]   Checking scope 0: []
[your_program]   'stage' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'age' at line 7
[your_program]   'age' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'stage' at line 7
[your_program]   Checking scope 0: []
[your_program]   'stage' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'age' at line 8
[your_program]   'age' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'stage' at line 8
[your_program]   Checking scope 0: []
[your_program]   'stage' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'stage' at line 9
[your_program]   'stage' not found in any scope, assuming global
[your_program] adult
[tester::#FH8] [test-3] ✓ 1 line(s) match on stdout
[tester::#FH8] [test-3] ✓ Received exit code 0.
[tester::#FH8] [test-4] Running test case: 4
[tester::#FH8] [test-4] Writing contents to ./test.lox:
[tester::#FH8] [test-4.lox] // This program uses multiple if statements to determine eligibility for
[tester::#FH8] [test-4.lox] // voting, driving, and drinking based on a random integer age
[tester::#FH8] [test-4.lox] var age = 38;
[tester::#FH8] [test-4.lox] 
[tester::#FH8] [test-4.lox] var isAdult = age >= 18;
[tester::#FH8] [test-4.lox] if (isAdult) { print "eligible for voting: true"; }
[tester::#FH8] [test-4.lox] else { print "eligible for voting: false"; }
[tester::#FH8] [test-4.lox] 
[tester::#FH8] [test-4.lox] if (age < 16) { print "eligible for driving: false"; }
[tester::#FH8] [test-4.lox] else if (age < 18) { print "eligible for driving: learner's permit"; }
[tester::#FH8] [test-4.lox] else { print "eligible for driving: full license"; }
[tester::#FH8] [test-4.lox] 
[tester::#FH8] [test-4.lox] if (age < 21) { print "eligible for drinking (US): false"; }
[tester::#FH8] [test-4.lox] else { print "eligible for drinking (US): true"; }
[tester::#FH8] [test-4] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'age' at line 5
[your_program]   'age' not found in any scope, assuming global
[your_program] eligible for voting: true
[your_program] Resolver: Resolving local variable 'isAdult' at line 6
[your_program] eligible for driving: full license
[your_program] eligible for drinking (US): true
[your_program]   'isAdult' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'age' at line 9
[your_program]   'age' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'age' at line 10
[your_program]   'age' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'age' at line 13
[your_program]   'age' not found in any scope, assuming global
[tester::#FH8] [test-4] ✓ 3 line(s) match on stdout
[tester::#FH8] [test-4] ✓ Received exit code 0.
[tester::#FH8] Test passed.
[tester::#ST5] Running tests for Stage #ST5 (Control Flow - Else statements)
[tester::#ST5] [test-1] Running test case: 1
[tester::#ST5] [test-1] Writing contents to ./test.lox:
[tester::#ST5] [test-1.lox] // This program uses a random boolean to decide which branch to execute,<|SPACE|>// and then prints the appropriate string
[tester::#ST5] [test-1.lox] if (false) print "if branch"; else print "else branch";
[tester::#ST5] [test-1] $ ./your_program.sh run test.lox
[your_program] else branch
[tester::#ST5] [test-1] ✓ 1 line(s) match on stdout
[tester::#ST5] [test-1] ✓ Received exit code 0.
[tester::#ST5] [test-2] Running test case: 2
[tester::#ST5] [test-2] Writing contents to ./test.lox:
[tester::#ST5] [test-2.lox] // This program initializes age with a random integer and then prints "adult"
[tester::#ST5] [test-2.lox] // if the age is greater than 18, otherwise it prints "child"
[tester::#ST5] [test-2.lox] var age = 65;
[tester::#ST5] [test-2.lox] if (age > 18) print "adult"; else print "child";
[tester::#ST5] [test-2] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'age' at line 4
[your_program]   'age' not found in any scope, assuming global
[your_program] adult
[tester::#ST5] [test-2] ✓ 1 line(s) match on stdout
[tester::#ST5] [test-2] ✓ Received exit code 0.
[tester::#ST5] [test-3] Running test case: 3
[tester::#ST5] [test-3] Writing contents to ./test.lox:
[tester::#ST5] [test-3.lox] // This program uses a random boolean to decide which branch to execute,
[tester::#ST5] [test-3.lox] // and then prints the appropriate string
[tester::#ST5] [test-3.lox] if (false) {
[tester::#ST5] [test-3.lox]   print "if block";
[tester::#ST5] [test-3.lox] } else print "else statement";
[tester::#ST5] [test-3.lox] 
[tester::#ST5] [test-3.lox] if (false) print "if statement"; else {
[tester::#ST5] [test-3.lox]   print "else block";
[tester::#ST5] [test-3.lox] }
[tester::#ST5] [test-3] $ ./your_program.sh run test.lox
[your_program] else statement
[your_program] else block
[tester::#ST5] [test-3] ✓ 2 line(s) match on stdout
[tester::#ST5] [test-3] ✓ Received exit code 0.
[tester::#ST5] [test-4] Running test case: 4
[tester::#ST5] [test-4] Writing contents to ./test.lox:
[tester::#ST5] [test-4.lox] // This program converts a random integer from Celsius to Fahrenheit
[tester::#ST5] [test-4.lox] // and prints the result. It also prints a message based on the temperature.
[tester::#ST5] [test-4.lox] var celsius = 49;
[tester::#ST5] [test-4.lox] var fahrenheit = 0;
[tester::#ST5] [test-4.lox] var isHot = false;
[tester::#ST5] [test-4.lox] 
[tester::#ST5] [test-4.lox] {
[tester::#ST5] [test-4.lox]   fahrenheit = celsius * 9 / 5 + 32;
[tester::#ST5] [test-4.lox]   print celsius; print fahrenheit;
[tester::#ST5] [test-4.lox] 
[tester::#ST5] [test-4.lox]   if (celsius > 30) {
[tester::#ST5] [test-4.lox]     isHot = true;
[tester::#ST5] [test-4.lox]     print "It's a hot day. Stay hydrated!";
[tester::#ST5] [test-4.lox]   } else {
[tester::#ST5] [test-4.lox]     print "It's cold today. Wear a jacket!";
[tester::#ST5] [test-4.lox]   }
[tester::#ST5] [test-4.lox] 
[tester::#ST5] [test-4.lox]   if (isHot) { print "Remember to use sunscreen!"; }
[tester::#ST5] [test-4.lox] }
[tester::#ST5] [test-4] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'celsius' at line 8
[your_program]   Checking scope 0: []
[your_program] 49
[your_program] 120.2
[your_program]   'celsius' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'fahrenheit' at line 8
[your_program]   Checking scope 0: []
[your_program] It's a hot day. Stay hydrated!
[your_program] Remember to use sunscreen!
[your_program]   'fahrenheit' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'celsius' at line 9
[your_program]   Checking scope 0: []
[your_program]   'celsius' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'fahrenheit' at line 9
[your_program]   Checking scope 0: []
[your_program]   'fahrenheit' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'celsius' at line 11
[your_program]   Checking scope 0: []
[your_program]   'celsius' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'isHot' at line 12
[your_program]   Checking scope 0: []
[your_program]   Checking scope 1: []
[your_program]   'isHot' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'isHot' at line 18
[your_program]   Checking scope 0: []
[your_program]   'isHot' not found in any scope, assuming global
[tester::#ST5] [test-4] ✓ 4 line(s) match on stdout
[tester::#ST5] [test-4] ✓ Received exit code 0.
[tester::#ST5] Test passed.
[tester::#NE3] Running tests for Stage #NE3 (Control Flow - If statements)
[tester::#NE3] [test-1] Running test case: 1
[tester::#NE3] [test-1] Writing contents to ./test.lox:
[tester::#NE3] [test-1.lox] // This should print the string if the condition evaluates to True
[tester::#NE3] [test-1.lox] if (true) print "quz";
[tester::#NE3] [test-1] $ ./your_program.sh run test.lox
[your_program] quz
[tester::#NE3] [test-1] ✓ 1 line(s) match on stdout
[tester::#NE3] [test-1] ✓ Received exit code 0.
[tester::#NE3] [test-2] Running test case: 2
[tester::#NE3] [test-2] Writing contents to ./test.lox:
[tester::#NE3] [test-2.lox] // This should print "block body" if the condition evaluates to True
[tester::#NE3] [test-2.lox] if (true) {
[tester::#NE3] [test-2.lox]   print "block body";
[tester::#NE3] [test-2.lox] }
[tester::#NE3] [test-2] $ ./your_program.sh run test.lox
[your_program] block body
[tester::#NE3] [test-2] ✓ 1 line(s) match on stdout
[tester::#NE3] [test-2] ✓ Received exit code 0.
[tester::#NE3] [test-3] Running test case: 3
[tester::#NE3] [test-3] Writing contents to ./test.lox:
[tester::#NE3] [test-3.lox] // This program tests whether the assignment operation returns the value assigned.
[tester::#NE3] [test-3.lox] // The if condition should evaluate to true and the inner boolean expression must be printed.
[tester::#NE3] [test-3.lox] // So, in this case the if condition evaluates to true and prints the inner boolean expression
[tester::#NE3] [test-3.lox] var a = false;
[tester::#NE3] [test-3.lox] if (a = true) {
[tester::#NE3] [test-3.lox]   print (a == false);
[tester::#NE3] [test-3.lox] }
[tester::#NE3] [test-3] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'a' at line 5
[your_program]   'a' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'a' at line 6
[your_program]   Checking scope 0: []
[your_program]   'a' not found in any scope, assuming global
[your_program] false
[tester::#NE3] [test-3] ✓ 1 line(s) match on stdout
[tester::#NE3] [test-3] ✓ Received exit code 0.
[tester::#NE3] [test-4] Running test case: 4
[tester::#NE3] [test-4] Writing contents to ./test.lox:
[tester::#NE3] [test-4.lox] // This program should print a different string based on the value of age
[tester::#NE3] [test-4.lox] var stage = "unknown";
[tester::#NE3] [test-4.lox] var age = 63;
[tester::#NE3] [test-4.lox] if (age < 18) { stage = "child"; }
[tester::#NE3] [test-4.lox] if (age >= 18) { stage = "adult"; }
[tester::#NE3] [test-4.lox] print stage;
[tester::#NE3] [test-4.lox] 
[tester::#NE3] [test-4.lox] var isAdult = age >= 18;
[tester::#NE3] [test-4.lox] if (isAdult) { print "eligible for voting: true"; }
[tester::#NE3] [test-4.lox] if (!isAdult) { print "eligible for voting: false"; }
[tester::#NE3] [test-4] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'age' at line 4
[your_program]   'age' not found in any scope, assuming global
[your_program] adult
[your_program] eligible for voting: true
[your_program] Resolver: Resolving local variable 'stage' at line 4
[your_program]   Checking scope 0: []
[your_program]   'stage' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'age' at line 5
[your_program]   'age' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'stage' at line 5
[your_program]   Checking scope 0: []
[your_program]   'stage' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'stage' at line 6
[your_program]   'stage' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'age' at line 8
[your_program]   'age' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'isAdult' at line 9
[your_program]   'isAdult' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'isAdult' at line 10
[your_program]   'isAdult' not found in any scope, assuming global
[tester::#NE3] [test-4] ✓ 2 line(s) match on stdout
[tester::#NE3] [test-4] ✓ Received exit code 0.
[tester::#NE3] Test passed.
[tester::#FB4] Running tests for Stage #FB4 (Statements & State - Scopes)
[tester::#FB4] [test-1] Running test case: 1
[tester::#FB4] [test-1] Writing contents to ./test.lox:
[tester::#FB4] [test-1.lox] // This program tests that nested scopes can be created
[tester::#FB4] [test-1.lox] // and that local variables can be accessed
[tester::#FB4] [test-1.lox] var baz = (56 * 90) - 22;
[tester::#FB4] [test-1.lox] {
[tester::#FB4] [test-1.lox]     var world = "hello" + "48";
[tester::#FB4] [test-1.lox]     print world;
[tester::#FB4] [test-1.lox] }
[tester::#FB4] [test-1.lox] print baz;
[tester::#FB4] [test-1] $ ./your_program.sh run test.lox
[your_program] hello48
[your_program] 5018
[your_program] Resolver: Resolving local variable 'world' at line 6
[your_program]   Checking scope 0: ["world"]
[your_program]   Found 'world' at distance 0 (Expr ID: 94593624338824)
[your_program] Resolver: Resolving local variable 'baz' at line 8
[your_program]   'baz' not found in any scope, assuming global
[tester::#FB4] [test-1] ✓ 2 line(s) match on stdout
[tester::#FB4] [test-1] ✓ Received exit code 0.
[tester::#FB4] [test-2] Running test case: 2
[tester::#FB4] [test-2] Writing contents to ./test.lox:
[tester::#FB4] [test-2.lox] // This program tests variable shadowing across nested scopes
[tester::#FB4] [test-2.lox] {
[tester::#FB4] [test-2.lox]     var baz = "before";
[tester::#FB4] [test-2.lox]     {
[tester::#FB4] [test-2.lox]         var baz = "after";
[tester::#FB4] [test-2.lox]         print baz;
[tester::#FB4] [test-2.lox]     }
[tester::#FB4] [test-2.lox]     print baz;
[tester::#FB4] [test-2.lox] }
[tester::#FB4] [test-2] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'baz' at line 6
[your_program]   Checking scope 0: ["baz"]
[your_program] after
[your_program] before
[your_program]   Found 'baz' at distance 0 (Expr ID: 94611455733944)
[your_program] Resolver: Resolving local variable 'baz' at line 8
[your_program]   Checking scope 0: ["baz"]
[your_program]   Found 'baz' at distance 0 (Expr ID: 94611455733256)
[tester::#FB4] [test-2] ✓ 2 line(s) match on stdout
[tester::#FB4] [test-2] ✓ Received exit code 0.
[tester::#FB4] [test-3] Running test case: 3
[tester::#FB4] [test-3] Writing contents to ./test.lox:
[tester::#FB4] [test-3.lox] // This program creates nested scopes and tests local scopes and variable shadowing
[tester::#FB4] [test-3.lox] var foo = "global foo";
[tester::#FB4] [test-3.lox] var baz = "global baz";
[tester::#FB4] [test-3.lox] var bar = "global bar";
[tester::#FB4] [test-3.lox] {
[tester::#FB4] [test-3.lox]   var foo = "outer foo";
[tester::#FB4] [test-3.lox]   var baz = "outer baz";
[tester::#FB4] [test-3.lox]   {
[tester::#FB4] [test-3.lox]     var foo = "inner foo";
[tester::#FB4] [test-3.lox]     print foo;
[tester::#FB4] [test-3.lox]     print baz;
[tester::#FB4] [test-3.lox]     print bar;
[tester::#FB4] [test-3.lox]   }
[tester::#FB4] [test-3.lox]   print foo;
[tester::#FB4] [test-3.lox]   print baz;
[tester::#FB4] [test-3.lox]   print bar;
[tester::#FB4] [test-3.lox] }
[tester::#FB4] [test-3.lox] print foo;
[tester::#FB4] [test-3.lox] print baz;
[tester::#FB4] [test-3.lox] print bar;
[tester::#FB4] [test-3.lox] 
[tester::#FB4] [test-3] $ ./your_program.sh run test.lox
[your_program] inner foo
[your_program] outer baz
[your_program] global bar
[your_program] outer foo
[your_program] outer baz
[your_program] global bar
[your_program] global foo
[your_program] global baz
[your_program] global bar
[your_program] Resolver: Resolving local variable 'foo' at line 10
[your_program]   Checking scope 0: ["foo"]
[your_program]   Found 'foo' at distance 0 (Expr ID: 93935909805992)
[your_program] Resolver: Resolving local variable 'baz' at line 11
[your_program]   Checking scope 0: ["foo"]
[your_program]   Checking scope 1: ["baz", "foo"]
[your_program]   Found 'baz' at distance 1 (Expr ID: 93935909806216)
[your_program] Resolver: Resolving local variable 'bar' at line 12
[your_program]   Checking scope 0: ["foo"]
[your_program]   Checking scope 1: ["baz", "foo"]
[your_program]   'bar' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'foo' at line 14
[your_program]   Checking scope 0: ["baz", "foo"]
[your_program]   Found 'foo' at distance 0 (Expr ID: 93935909813704)
[your_program] Resolver: Resolving local variable 'baz' at line 15
[your_program]   Checking scope 0: ["baz", "foo"]
[your_program]   Found 'baz' at distance 0 (Expr ID: 93935909813928)
[your_program] Resolver: Resolving local variable 'bar' at line 16
[your_program]   Checking scope 0: ["baz", "foo"]
[your_program]   'bar' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'foo' at line 18
[your_program]   'foo' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'baz' at line 19
[your_program]   'baz' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'bar' at line 20
[your_program]   'bar' not found in any scope, assuming global
[tester::#FB4] [test-3] ✓ 9 line(s) match on stdout
[tester::#FB4] [test-3] ✓ Received exit code 0.
[tester::#FB4] [test-4] Running test case: 4
[tester::#FB4] [test-4] Writing contents to ./test.lox:
[tester::#FB4] [test-4.lox] // This program tests that when a variable is declared in an outer scope,
[tester::#FB4] [test-4.lox] // it can be used in an inner scope
[tester::#FB4] [test-4.lox] // But when a variable is declared in an inner scope,
[tester::#FB4] [test-4.lox] // it can't be used in an outer scope
[tester::#FB4] [test-4.lox] {
[tester::#FB4] [test-4.lox]   var baz = "outer baz";
[tester::#FB4] [test-4.lox]   var hello = "outer hello";
[tester::#FB4] [test-4.lox]   {
[tester::#FB4] [test-4.lox]     baz = "modified baz";
[tester::#FB4] [test-4.lox]     var hello = "inner hello";
[tester::#FB4] [test-4.lox]     print baz;
[tester::#FB4] [test-4.lox]     print hello;
[tester::#FB4] [test-4.lox]   }
[tester::#FB4] [test-4.lox]   print baz;
[tester::#FB4] [test-4.lox]   print hello;
[tester::#FB4] [test-4.lox] }
[tester::#FB4] [test-4.lox] print baz;
[tester::#FB4] [test-4.lox] 
[tester::#FB4] [test-4] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'baz' at line 9
[your_program]   Checking scope 0: []
[your_program] modified baz
[your_program] inner hello
[your_program] modified baz
[your_program]   Checking scope 1: ["baz", "hello"]
[your_program] outer hello
[your_program]   Found 'baz' at distance 1 (Expr ID: 94512345869224)
[your_program] Resolver: Resolving local variable 'baz' at line 11
[your_program]   Checking scope 0: ["hello"]
[your_program]   Checking scope 1: ["baz", "hello"]
[your_program]   Found 'baz' at distance 1 (Expr ID: 94512345869672)
[your_program] Resolver: Resolving local variable 'hello' at line 12
[your_program]   Checking scope 0: ["hello"]
[your_program]   Found 'hello' at distance 0 (Expr ID: 94512345869896)
[your_program] Resolver: Resolving local variable 'baz' at line 14
[your_program]   Checking scope 0: ["baz", "hello"]
[your_program]   Found 'baz' at distance 0 (Expr ID: 94512345870808)
[your_program] Resolver: Resolving local variable 'hello' at line 15
[your_program]   Checking scope 0: ["baz", "hello"]
[your_program]   Found 'hello' at distance 0 (Expr ID: 94512345871032)
[your_program] Resolver: Resolving local variable 'baz' at line 17
[your_program]   'baz' not found in any scope, assuming global
[your_program] Undefined variable 'baz'. [line 17]
[tester::#FB4] [test-4] ✓ 4 line(s) match on stdout
[tester::#FB4] [test-4] ✓ Received exit code 70.
[tester::#FB4] Test passed.
[tester::#VR5] Running tests for Stage #VR5 (Statements & State - Block syntax)
[tester::#VR5] [test-1] Running test case: 1
[tester::#VR5] [test-1] Writing contents to ./test.lox:
[tester::#VR5] [test-1.lox] // This program tests that curly braces can be used to group multiple statements into blocks
[tester::#VR5] [test-1.lox] {
[tester::#VR5] [test-1.lox]     var baz = "bar";
[tester::#VR5] [test-1.lox]     print baz;
[tester::#VR5] [test-1.lox] }
[tester::#VR5] [test-1] $ ./your_program.sh run test.lox
[your_program] bar
[your_program] Resolver: Resolving local variable 'baz' at line 4
[your_program]   Checking scope 0: ["baz"]
[your_program]   Found 'baz' at distance 0 (Expr ID: 94409120526392)
[tester::#VR5] [test-1] ✓ 1 line(s) match on stdout
[tester::#VR5] [test-1] ✓ Received exit code 0.
[tester::#VR5] [test-2] Running test case: 2
[tester::#VR5] [test-2] Writing contents to ./test.lox:
[tester::#VR5] [test-2.lox] // This program tests that blocks can be used to group statements and variables
[tester::#VR5] [test-2.lox] // creating local scopes
[tester::#VR5] [test-2.lox] {
[tester::#VR5] [test-2.lox]     var bar = "before";
[tester::#VR5] [test-2.lox]     print bar;
[tester::#VR5] [test-2.lox] }
[tester::#VR5] [test-2.lox] {
[tester::#VR5] [test-2.lox]     var bar = "after";
[tester::#VR5] [test-2.lox]     print bar;
[tester::#VR5] [test-2.lox] }
[tester::#VR5] [test-2.lox] 
[tester::#VR5] [test-2] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'bar' at line 5
[your_program]   Checking scope 0: ["bar"]
[your_program]   Found 'bar' at distance 0 (Expr ID: 93912613883208)
[your_program] Resolver: Resolving local variable 'bar' at line 9
[your_program]   Checking scope 0: ["bar"]
[your_program]   Found 'bar' at distance 0 (Expr ID: 93912613887432)
[your_program] before
[your_program] after
[tester::#VR5] [test-2] ✓ 2 line(s) match on stdout
[tester::#VR5] [test-2] ✓ Received exit code 0.
[tester::#VR5] [test-3] Running test case: 3
[tester::#VR5] [test-3] Writing contents to ./test.lox:
[tester::#VR5] [test-3.lox] // This program tests that scopes can be nested
[tester::#VR5] [test-3.lox] {
[tester::#VR5] [test-3.lox]     var baz = 66;
[tester::#VR5] [test-3.lox]     {
[tester::#VR5] [test-3.lox]         var world = 66;
[tester::#VR5] [test-3.lox]         print world;
[tester::#VR5] [test-3.lox]     }
[tester::#VR5] [test-3.lox]     print baz;
[tester::#VR5] [test-3.lox] }
[tester::#VR5] [test-3] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'world' at line 6
[your_program]   Checking scope 0: ["world"]
[your_program] 66
[your_program] 66
[your_program]   Found 'world' at distance 0 (Expr ID: 93955095126184)
[your_program] Resolver: Resolving local variable 'baz' at line 8
[your_program]   Checking scope 0: ["baz"]
[your_program]   Found 'baz' at distance 0 (Expr ID: 93955095125496)
[tester::#VR5] [test-3] ✓ 2 line(s) match on stdout
[tester::#VR5] [test-3] ✓ Received exit code 0.
[tester::#VR5] [test-4] Running test case: 4
[tester::#VR5] [test-4] Writing contents to ./test.lox:
[tester::#VR5] [test-4.lox] // This program tests that scopes are properly closed
[tester::#VR5] [test-4.lox] // Here the inner scope is missing a closing curly brace
[tester::#VR5] [test-4.lox] // Which leads to a compilation error
[tester::#VR5] [test-4.lox] {
[tester::#VR5] [test-4.lox]     var hello = 20;
[tester::#VR5] [test-4.lox]     var foo = 20;
[tester::#VR5] [test-4.lox]     {
[tester::#VR5] [test-4.lox]         print hello + foo;
[tester::#VR5] [test-4.lox] }
[tester::#VR5] [test-4] $ ./your_program.sh run test.lox
[your_program] Error: Expect '}' after block.
[tester::#VR5] [test-4] ✓ 1 line(s) match on stdout
[tester::#VR5] [test-4] ✓ Received exit code 65.
[tester::#VR5] Test passed.
[tester::#PL3] Running tests for Stage #PL3 (Statements & State - Assignment operation)
[tester::#PL3] [test-1] Running test case: 1
[tester::#PL3] [test-1] Writing contents to ./test.lox:
[tester::#PL3] [test-1.lox] // This program tests that the assignment operator returns the value that was assigned
[tester::#PL3] [test-1.lox] // And prints the value of the variable after each assignment
[tester::#PL3] [test-1.lox] var foo;
[tester::#PL3] [test-1.lox] foo = 1;
[tester::#PL3] [test-1.lox] print foo;
[tester::#PL3] [test-1.lox] print foo = 2;
[tester::#PL3] [test-1.lox] print foo;
[tester::#PL3] [test-1] $ ./your_program.sh run test.lox
[your_program] 1
[your_program] 2
[your_program] 2
[your_program] Resolver: Resolving local variable 'foo' at line 4
[your_program]   'foo' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'foo' at line 5
[your_program]   'foo' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'foo' at line 6
[your_program]   'foo' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'foo' at line 7
[your_program]   'foo' not found in any scope, assuming global
[tester::#PL3] [test-1] ✓ 3 line(s) match on stdout
[tester::#PL3] [test-1] ✓ Received exit code 0.
[tester::#PL3] [test-2] Running test case: 2
[tester::#PL3] [test-2] Writing contents to ./test.lox:
[tester::#PL3] [test-2.lox] // This program tests that the assignment operator works on any declared variable
[tester::#PL3] [test-2.lox] var quz = 93;
[tester::#PL3] [test-2.lox] var bar = 93;
[tester::#PL3] [test-2.lox] bar = quz;
[tester::#PL3] [test-2.lox] quz = bar;
[tester::#PL3] [test-2.lox] print quz + bar;
[tester::#PL3] [test-2] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'quz' at line 4
[your_program]   'quz' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'bar' at line 4
[your_program] 186
[your_program]   'bar' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'bar' at line 5
[your_program]   'bar' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'quz' at line 5
[your_program]   'quz' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'quz' at line 6
[your_program]   'quz' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'bar' at line 6
[your_program]   'bar' not found in any scope, assuming global
[tester::#PL3] [test-2] ✓ 1 line(s) match on stdout
[tester::#PL3] [test-2] ✓ Received exit code 0.
[tester::#PL3] [test-3] Running test case: 3
[tester::#PL3] [test-3] Writing contents to ./test.lox:
[tester::#PL3] [test-3.lox] // This program tests that the assignment operator returns the value that was assigned
[tester::#PL3] [test-3.lox] // So, it can be used multiple times in a single statement
[tester::#PL3] [test-3.lox] var world;
[tester::#PL3] [test-3.lox] var quz;
[tester::#PL3] [test-3.lox] 
[tester::#PL3] [test-3.lox] world = quz = 13 + 28 * 85;
[tester::#PL3] [test-3.lox] print world;
[tester::#PL3] [test-3.lox] print quz;
[tester::#PL3] [test-3] $ ./your_program.sh run test.lox
[your_program] 2393
[your_program] 2393
[your_program] Resolver: Resolving local variable 'quz' at line 6
[your_program]   'quz' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'world' at line 6
[your_program]   'world' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'world' at line 7
[your_program]   'world' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'quz' at line 8
[your_program]   'quz' not found in any scope, assuming global
[tester::#PL3] [test-3] ✓ 2 line(s) match on stdout
[tester::#PL3] [test-3] ✓ Received exit code 0.
[tester::#PL3] [test-4] Running test case: 4
[tester::#PL3] [test-4] Writing contents to ./test.lox:
[tester::#PL3] [test-4.lox] // This program tests that the assignment operator returns the value that was assigned
[tester::#PL3] [test-4.lox] // So, it can be used multiple times in a single statement
[tester::#PL3] [test-4.lox] var quz = 43;
[tester::#PL3] [test-4.lox] var hello;
[tester::#PL3] [test-4.lox] var baz;
[tester::#PL3] [test-4.lox] 
[tester::#PL3] [test-4.lox] quz = hello = baz = quz * 2;
[tester::#PL3] [test-4.lox] print quz;
[tester::#PL3] [test-4.lox] print hello;
[tester::#PL3] [test-4.lox] print hello;
[tester::#PL3] [test-4] $ ./your_program.sh run test.lox
[your_program] 86
[your_program] 86
[your_program] 86
[your_program] Resolver: Resolving local variable 'quz' at line 7
[your_program]   'quz' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'baz' at line 7
[your_program]   'baz' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'hello' at line 7
[your_program]   'hello' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'quz' at line 7
[your_program]   'quz' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'quz' at line 8
[your_program]   'quz' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'hello' at line 9
[your_program]   'hello' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'hello' at line 10
[your_program]   'hello' not found in any scope, assuming global
[tester::#PL3] [test-4] ✓ 3 line(s) match on stdout
[tester::#PL3] [test-4] ✓ Received exit code 0.
[tester::#PL3] Test passed.
[tester::#DW9] Running tests for Stage #DW9 (Statements & State - Variables: Redeclare variables)
[tester::#DW9] [test-1] Running test case: 1
[tester::#DW9] [test-1] Writing contents to ./test.lox:
[tester::#DW9] [test-1.lox] // This program declares a variable and prints its value
[tester::#DW9] [test-1.lox] // It then redeclares the variable and prints its value again
[tester::#DW9] [test-1.lox] var world = "before";
[tester::#DW9] [test-1.lox] print world;
[tester::#DW9] [test-1.lox] var world = "after";
[tester::#DW9] [test-1.lox] print world;
[tester::#DW9] [test-1] $ ./your_program.sh run test.lox
[your_program] before
[your_program] after
[your_program] Resolver: Resolving local variable 'world' at line 4
[your_program]   'world' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'world' at line 6
[your_program]   'world' not found in any scope, assuming global
[tester::#DW9] [test-1] ✓ 2 line(s) match on stdout
[tester::#DW9] [test-1] ✓ Received exit code 0.
[tester::#DW9] [test-2] Running test case: 2
[tester::#DW9] [test-2] Writing contents to ./test.lox:
[tester::#DW9] [test-2.lox] // This program declares a variable and prints its value
[tester::#DW9] [test-2.lox] // It also uses a previously declared variable's value to initialize a new variable
[tester::#DW9] [test-2.lox] var foo = "after";
[tester::#DW9] [test-2.lox] var foo = "before";
[tester::#DW9] [test-2.lox] var foo = foo;
[tester::#DW9] [test-2.lox] print foo;
[tester::#DW9] [test-2] $ ./your_program.sh run test.lox
[your_program] before
[your_program] Resolver: Resolving local variable 'foo' at line 5
[your_program]   'foo' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'foo' at line 6
[your_program]   'foo' not found in any scope, assuming global
[tester::#DW9] [test-2] ✓ 1 line(s) match on stdout
[tester::#DW9] [test-2] ✓ Received exit code 0.
[tester::#DW9] [test-3] Running test case: 3
[tester::#DW9] [test-3] Writing contents to ./test.lox:
[tester::#DW9] [test-3.lox] // This program declares and initializes multiple variables and prints their values
[tester::#DW9] [test-3.lox] var world = 2;
[tester::#DW9] [test-3.lox] print world;
[tester::#DW9] [test-3.lox] var world = 3;
[tester::#DW9] [test-3.lox] print world;
[tester::#DW9] [test-3.lox] var hello = 5;
[tester::#DW9] [test-3.lox] print hello;
[tester::#DW9] [test-3.lox] var world = hello;
[tester::#DW9] [test-3.lox] print world;
[tester::#DW9] [test-3.lox] 
[tester::#DW9] [test-3] $ ./your_program.sh run test.lox
[your_program] 2
[your_program] 3
[your_program] 5
[your_program] 5
[your_program] Resolver: Resolving local variable 'world' at line 3
[your_program]   'world' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'world' at line 5
[your_program]   'world' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'hello' at line 7
[your_program]   'hello' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'hello' at line 8
[your_program]   'hello' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'world' at line 9
[your_program]   'world' not found in any scope, assuming global
[tester::#DW9] [test-3] ✓ 4 line(s) match on stdout
[tester::#DW9] [test-3] ✓ Received exit code 0.
[tester::#DW9] [test-4] Running test case: 4
[tester::#DW9] [test-4] Writing contents to ./test.lox:
[tester::#DW9] [test-4.lox] // This program declares a variable and initializes it with the value of another variable
[tester::#DW9] [test-4.lox] // But as the variable is not declared before it is used it leads to a runtime error
[tester::#DW9] [test-4.lox] var hello = world;
[tester::#DW9] [test-4] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'world' at line 3
[your_program]   'world' not found in any scope, assuming global
[your_program] Undefined variable 'world'. [line 3]
[tester::#DW9] [test-4] ✓ 1 line(s) match on stdout
[tester::#DW9] [test-4] ✓ Received exit code 70.
[tester::#DW9] Test passed.
[tester::#BC1] Running tests for Stage #BC1 (Statements & State - Variables: Initialize variables)
[tester::#BC1] [test-1] Running test case: 1
[tester::#BC1] [test-1] Writing contents to ./test.lox:
[tester::#BC1] [test-1.lox] // This program declares a variable but doesn't initialize it
[tester::#BC1] [test-1.lox] // It prints the variable's value, which should be nil
[tester::#BC1] [test-1.lox] var foo;
[tester::#BC1] [test-1.lox] print foo;
[tester::#BC1] [test-1] $ ./your_program.sh run test.lox
[your_program] nil
[your_program] Resolver: Resolving local variable 'foo' at line 4
[your_program]   'foo' not found in any scope, assuming global
[tester::#BC1] [test-1] ✓ 1 line(s) match on stdout
[tester::#BC1] [test-1] ✓ Received exit code 0.
[tester::#BC1] [test-2] Running test case: 2
[tester::#BC1] [test-2] Writing contents to ./test.lox:
[tester::#BC1] [test-2.lox] // This program declares a variable but doesn't initialize it
[tester::#BC1] [test-2.lox] // It prints the variable's value
[tester::#BC1] [test-2.lox] var baz = "world";
[tester::#BC1] [test-2.lox] var quz;
[tester::#BC1] [test-2.lox] print quz;
[tester::#BC1] [test-2] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'quz' at line 5
[your_program]   'quz' not found in any scope, assuming global
[your_program] nil
[tester::#BC1] [test-2] ✓ 1 line(s) match on stdout
[tester::#BC1] [test-2] ✓ Received exit code 0.
[tester::#BC1] [test-3] Running test case: 3
[tester::#BC1] [test-3] Writing contents to ./test.lox:
[tester::#BC1] [test-3.lox] // This program declares a variable but doesn't initialize it
[tester::#BC1] [test-3.lox] // It prints the variable's value
[tester::#BC1] [test-3.lox] var foo = 57;
[tester::#BC1] [test-3.lox] var quz;
[tester::#BC1] [test-3.lox] var hello;
[tester::#BC1] [test-3.lox] print quz;
[tester::#BC1] [test-3] $ ./your_program.sh run test.lox
[your_program] nil
[your_program] Resolver: Resolving local variable 'quz' at line 6
[your_program]   'quz' not found in any scope, assuming global
[tester::#BC1] [test-3] ✓ 1 line(s) match on stdout
[tester::#BC1] [test-3] ✓ Received exit code 0.
[tester::#BC1] [test-4] Running test case: 4
[tester::#BC1] [test-4] Writing contents to ./test.lox:
[tester::#BC1] [test-4.lox] // This program declares a variable but doesn't initialize it
[tester::#BC1] [test-4.lox] // It prints the variable's value
[tester::#BC1] [test-4.lox] var bar = 74 + 87 * 59;
[tester::#BC1] [test-4.lox] print bar;
[tester::#BC1] [test-4.lox] var hello = 87 * 59;
[tester::#BC1] [test-4.lox] print bar + hello;
[tester::#BC1] [test-4.lox] var quz;
[tester::#BC1] [test-4.lox] print quz;
[tester::#BC1] [test-4] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'bar' at line 4
[your_program]   'bar' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'bar' at line 6
[your_program]   'bar' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'hello' at line 6
[your_program]   'hello' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'quz' at line 8
[your_program]   'quz' not found in any scope, assuming global
[your_program] 5207
[your_program] 10340
[your_program] nil
[tester::#BC1] [test-4] ✓ 3 line(s) match on stdout
[tester::#BC1] [test-4] ✓ Received exit code 0.
[tester::#BC1] Test passed.
[tester::#SV7] Running tests for Stage #SV7 (Statements & State - Variables: Runtime Errors)
[tester::#SV7] [test-1] Running test case: 1
[tester::#SV7] [test-1] Writing contents to ./test.lox:
[tester::#SV7] [test-1.lox] // This program tries to access a variable before it is declared
[tester::#SV7] [test-1.lox] // It leads to a runtime error
[tester::#SV7] [test-1.lox] print 92;
[tester::#SV7] [test-1.lox] print x;
[tester::#SV7] [test-1] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'x' at line 4
[your_program]   'x' not found in any scope, assuming global
[your_program] Undefined variable 'x'. [line 4]
[your_program] 92
[tester::#SV7] [test-1] ✓ 1 line(s) match on stdout
[tester::#SV7] [test-1] ✓ Received exit code 70.
[tester::#SV7] [test-2] Running test case: 2
[tester::#SV7] [test-2] Writing contents to ./test.lox:
[tester::#SV7] [test-2.lox] // This program tries to access a variable before it is declared
[tester::#SV7] [test-2.lox] // It leads to a runtime error
[tester::#SV7] [test-2.lox] var baz = 81;
[tester::#SV7] [test-2.lox] print bar;
[tester::#SV7] [test-2] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'bar' at line 4
[your_program]   'bar' not found in any scope, assuming global
[your_program] Undefined variable 'bar'. [line 4]
[tester::#SV7] [test-2] ✓ 1 line(s) match on stdout
[tester::#SV7] [test-2] ✓ Received exit code 70.
[tester::#SV7] [test-3] Running test case: 3
[tester::#SV7] [test-3] Writing contents to ./test.lox:
[tester::#SV7] [test-3.lox] // This program tries to access a variable before it is declared
[tester::#SV7] [test-3.lox] // It leads to a runtime error
[tester::#SV7] [test-3.lox] var foo = 21;
[tester::#SV7] [test-3.lox] var result = (foo + quz) / bar;
[tester::#SV7] [test-3.lox] print result;
[tester::#SV7] [test-3] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'foo' at line 4
[your_program]   'foo' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'quz' at line 4
[your_program]   'quz' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'bar' at line 4
[your_program]   'bar' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'result' at line 5
[your_program]   'result' not found in any scope, assuming global
[your_program] Undefined variable 'quz'. [line 4]
[tester::#SV7] [test-3] ✓ 1 line(s) match on stdout
[tester::#SV7] [test-3] ✓ Received exit code 70.
[tester::#SV7] [test-4] Running test case: 4
[tester::#SV7] [test-4] Writing contents to ./test.lox:
[tester::#SV7] [test-4.lox] // This program tries to access a variable before it is declared
[tester::#SV7] [test-4.lox] // It leads to a runtime error
[tester::#SV7] [test-4.lox] var baz = 11;
[tester::#SV7] [test-4.lox] var hello = 26;
[tester::#SV7] [test-4.lox] var bar = 19;
[tester::#SV7] [test-4.lox] print baz + hello + bar + world; print 91;
[tester::#SV7] [test-4] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'baz' at line 6
[your_program]   'baz' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'hello' at line 6
[your_program]   'hello' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'bar' at line 6
[your_program]   'bar' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'world' at line 6
[your_program]   'world' not found in any scope, assuming global
[your_program] Undefined variable 'world'. [line 6]
[tester::#SV7] [test-4] ✓ 1 line(s) match on stdout
[tester::#SV7] [test-4] ✓ Received exit code 70.
[tester::#SV7] Test passed.
[tester::#YG2] Running tests for Stage #YG2 (Statements & State - Variables: Declare variables)
[tester::#YG2] [test-1] Running test case: 1
[tester::#YG2] [test-1] Writing contents to ./test.lox:
[tester::#YG2] [test-1.lox] // This program tests that variables are initialized to the correct value
[tester::#YG2] [test-1.lox] var hello = 10;
[tester::#YG2] [test-1.lox] print hello;
[tester::#YG2] [test-1] $ ./your_program.sh run test.lox
[your_program] 10
[your_program] Resolver: Resolving local variable 'hello' at line 3
[your_program]   'hello' not found in any scope, assuming global
[tester::#YG2] [test-1] ✓ 1 line(s) match on stdout
[tester::#YG2] [test-1] ✓ Received exit code 0.
[tester::#YG2] [test-2] Running test case: 2
[tester::#YG2] [test-2] Writing contents to ./test.lox:
[tester::#YG2] [test-2.lox] // This program declares multiple variables and<|SPACE|>// prints the result of arithmetic operations on them
[tester::#YG2] [test-2.lox] var foo = 28;
[tester::#YG2] [test-2.lox] var hello = 28;
[tester::#YG2] [test-2.lox] print foo + hello;
[tester::#YG2] [test-2.lox] var world = 28;
[tester::#YG2] [test-2.lox] print foo + hello + world;
[tester::#YG2] [test-2] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'foo' at line 5
[your_program]   'foo' not found in any scope, assuming global
[your_program] 56
[your_program] 84
[your_program] Resolver: Resolving local variable 'hello' at line 5
[your_program]   'hello' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'foo' at line 7
[your_program]   'foo' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'hello' at line 7
[your_program]   'hello' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'world' at line 7
[your_program]   'world' not found in any scope, assuming global
[tester::#YG2] [test-2] ✓ 2 line(s) match on stdout
[tester::#YG2] [test-2] ✓ Received exit code 0.
[tester::#YG2] [test-3] Running test case: 3
[tester::#YG2] [test-3] Writing contents to ./test.lox:
[tester::#YG2] [test-3.lox] // This program assigns the result of an arithmetic expression to a variable
[tester::#YG2] [test-3.lox] // Then it prints the value of the variable
[tester::#YG2] [test-3.lox] var baz = (8 * (38 + 38)) / 4 + 38;
[tester::#YG2] [test-3.lox] print baz;
[tester::#YG2] [test-3] $ ./your_program.sh run test.lox
[your_program] 190
[your_program] Resolver: Resolving local variable 'baz' at line 4
[your_program]   'baz' not found in any scope, assuming global
[tester::#YG2] [test-3] ✓ 1 line(s) match on stdout
[tester::#YG2] [test-3] ✓ Received exit code 0.
[tester::#YG2] [test-4] Running test case: 4
[tester::#YG2] [test-4] Writing contents to ./test.lox:
[tester::#YG2] [test-4.lox] // This program declares variables and performs operations on them
[tester::#YG2] [test-4.lox] // Finally it prints the result of the operations
[tester::#YG2] [test-4.lox] var hello = 89;
[tester::#YG2] [test-4.lox] var foo = hello;
[tester::#YG2] [test-4.lox] print foo + hello;
[tester::#YG2] [test-4] $ ./your_program.sh run test.lox
[your_program] Resolver: Resolving local variable 'hello' at line 4
[your_program]   'hello' not found in any scope, assuming global
[your_program] 178
[your_program] Resolver: Resolving local variable 'foo' at line 5
[your_program]   'foo' not found in any scope, assuming global
[your_program] Resolver: Resolving local variable 'hello' at line 5
[your_program]   'hello' not found in any scope, assuming global
[tester::#YG2] [test-4] ✓ 1 line(s) match on stdout
[tester::#YG2] [test-4] ✓ Received exit code 0.
[tester::#YG2] Test passed.
[tester::#FI3] Running tests for Stage #FI3 (Statements & State - Expression statements)
[tester::#FI3] [test-1] Running test case: 1
[tester::#FI3] [test-1] Writing contents to ./test.lox:
[tester::#FI3] [test-1.lox] // This program tests that statements are executed even if they don't have any side effects
[tester::#FI3] [test-1.lox] // It also tests complex arithmetic expressions and string concatenation
[tester::#FI3] [test-1.lox] (59 + 28 - 16) > (75 - 59) * 2;
[tester::#FI3] [test-1.lox] print !true;
[tester::#FI3] [test-1.lox] "baz" + "hello" + "world" + "quz" == "bazhelloworldquz";
[tester::#FI3] [test-1.lox] print !true;
[tester::#FI3] [test-1] $ ./your_program.sh run test.lox
[your_program] false
[your_program] false
[tester::#FI3] [test-1] ✓ 2 line(s) match on stdout
[tester::#FI3] [test-1] ✓ Received exit code 0.
[tester::#FI3] [test-2] Running test case: 2
[tester::#FI3] [test-2] Writing contents to ./test.lox:
[tester::#FI3] [test-2.lox] // This program tests statements that don't have any side effects
[tester::#FI3] [test-2.lox] 96 - 25 >= -59 * 2 / 59 + 79;
[tester::#FI3] [test-2.lox] false == false;
[tester::#FI3] [test-2.lox] ("hello" == "bar") == ("foo" != "baz");
[tester::#FI3] [test-2.lox] print false;
[tester::#FI3] [test-2] $ ./your_program.sh run test.lox
[your_program] false
[tester::#FI3] [test-2] ✓ 1 line(s) match on stdout
[tester::#FI3] [test-2] ✓ Received exit code 0.
[tester::#FI3] [test-3] Running test case: 3
[tester::#FI3] [test-3] Writing contents to ./test.lox:
[tester::#FI3] [test-3.lox] // This program tests that the + operator is only supported when both operands are numbers or both are strings
[tester::#FI3] [test-3.lox] print "the expression below is invalid";
[tester::#FI3] [test-3.lox] 98 + "bar";
[tester::#FI3] [test-3.lox] print "this should not be printed";
[tester::#FI3] [test-3] $ ./your_program.sh run test.lox
[your_program] the expression below is invalid
[your_program] Operands must be two numbers or two strings. [line 3]
[tester::#FI3] [test-3] ✓ 1 line(s) match on stdout
[tester::#FI3] [test-3] ✓ Received exit code 70.
[tester::#FI3] [test-4] Running test case: 4
[tester::#FI3] [test-4] Writing contents to ./test.lox:
[tester::#FI3] [test-4.lox] // This program tests that the * operator is only supported when both operands are numbers
[tester::#FI3] [test-4.lox] print "11" + "world";
[tester::#FI3] [test-4.lox] print false * (91 + 35);
[tester::#FI3] [test-4] $ ./your_program.sh run test.lox
[your_program] 11world
[your_program] Operands must be numbers. [line 3]
[tester::#FI3] [test-4] ✓ 1 line(s) match on stdout
[tester::#FI3] [test-4] ✓ Received exit code 70.
[tester::#FI3] Test passed.
[tester::#OE4] Running tests for Stage #OE4 (Statements & State - Print: Multiple statements)
[tester::#OE4] [test-1] Running test case: 1
[tester::#OE4] [test-1] Writing contents to ./test.lox:
[tester::#OE4] [test-1.lox] // This program prints the result of arithmetic operations involving strings and integers
[tester::#OE4] [test-1.lox] print "baz" + "hello" + "bar";
[tester::#OE4] [test-1.lox] print 35 - 63;
[tester::#OE4] [test-1.lox] print "bar" == "quz";
[tester::#OE4] [test-1] $ ./your_program.sh run test.lox
[your_program] bazhellobar
[your_program] -28
[your_program] false
[tester::#OE4] [test-1] ✓ 3 line(s) match on stdout
[tester::#OE4] [test-1] ✓ Received exit code 0.
[tester::#OE4] [test-2] Running test case: 2
[tester::#OE4] [test-2] Writing contents to ./test.lox:
[tester::#OE4] [test-2.lox] // This program tests the syntax of multiple statements in a single line
[tester::#OE4] [test-2.lox] print "baz"; print false;
[tester::#OE4] [test-2.lox] print true;
[tester::#OE4] [test-2.lox] print "foo"; print 75;
[tester::#OE4] [test-2] $ ./your_program.sh run test.lox
[your_program] baz
[your_program] false
[your_program] true
[your_program] foo
[your_program] 75
[tester::#OE4] [test-2] ✓ 5 line(s) match on stdout
[tester::#OE4] [test-2] ✓ Received exit code 0.
[tester::#OE4] [test-3] Running test case: 3
[tester::#OE4] [test-3] Writing contents to ./test.lox:
[tester::#OE4] [test-3.lox] // This program tests that leading whitespace are ignored while executing
[tester::#OE4] [test-3.lox] print 70;
[tester::#OE4] [test-3.lox]     print 70 + 66;
[tester::#OE4] [test-3.lox]         print 70 + 66 + 68;
[tester::#OE4] [test-3] $ ./your_program.sh run test.lox
[your_program] 70
[your_program] 136
[your_program] 204
[tester::#OE4] [test-3] ✓ 3 line(s) match on stdout
[tester::#OE4] [test-3] ✓ Received exit code 0.
[tester::#OE4] [test-4] Running test case: 4
[tester::#OE4] [test-4] Writing contents to ./test.lox:
[tester::#OE4] [test-4.lox] // This program prints the result of a comparison operation
[tester::#OE4] [test-4.lox] // It also tests multi-line strings and non-ASCII characters
[tester::#OE4] [test-4.lox] print false != true;
[tester::#OE4] [test-4.lox] 
[tester::#OE4] [test-4.lox] print "39
[tester::#OE4] [test-4.lox] 97
[tester::#OE4] [test-4.lox] 15
[tester::#OE4] [test-4.lox] ";
[tester::#OE4] [test-4.lox] 
[tester::#OE4] [test-4.lox] print "There should be an empty line above this.";
[tester::#OE4] [test-4.lox] 
[tester::#OE4] [test-4.lox] print "(" + "" + ")";
[tester::#OE4] [test-4.lox] 
[tester::#OE4] [test-4.lox] print "non-ascii: ॐ";
[tester::#OE4] [test-4.lox] 
[tester::#OE4] [test-4] $ ./your_program.sh run test.lox
[your_program] true
[your_program] 39
[your_program] 97
[your_program] 15
[your_program] 
[your_program] There should be an empty line above this.
[your_program] ()
[your_program] non-ascii: ॐ
[tester::#OE4] [test-4] ✓ 8 line(s) match on stdout
[tester::#OE4] [test-4] ✓ Received exit code 0.
[tester::#OE4] Test passed.
[tester::#XY1] Running tests for Stage #XY1 (Statements & State - Print: Generate output)
[tester::#XY1] [test-1] Running test case: 1
[tester::#XY1] [test-1] Writing contents to ./test.lox:
[tester::#XY1] [test-1.lox] // This program prints a boolean
[tester::#XY1] [test-1.lox] print true;
[tester::#XY1] [test-1] $ ./your_program.sh run test.lox
[your_program] true
[tester::#XY1] [test-1] ✓ 1 line(s) match on stdout
[tester::#XY1] [test-1] ✓ Received exit code 0.
[tester::#XY1] [test-2] Running test case: 2
[tester::#XY1] [test-2] Writing contents to ./test.lox:
[tester::#XY1] [test-2.lox] // This program prints the result of the concatenation of three strings
[tester::#XY1] [test-2.lox] print "hello" + "baz" + "foo";
[tester::#XY1] [test-2] $ ./your_program.sh run test.lox
[your_program] hellobazfoo
[tester::#XY1] [test-2] ✓ 1 line(s) match on stdout
[tester::#XY1] [test-2] ✓ Received exit code 0.
[tester::#XY1] [test-3] Running test case: 3
[tester::#XY1] [test-3] Writing contents to ./test.lox:
[tester::#XY1] [test-3.lox] // This program prints the result of an arithmetic expression
[tester::#XY1] [test-3.lox] print (76 * 2 + 64 * 2) / (2);
[tester::#XY1] [test-3] $ ./your_program.sh run test.lox
[your_program] 140
[tester::#XY1] [test-3] ✓ 1 line(s) match on stdout
[tester::#XY1] [test-3] ✓ Received exit code 0.
[tester::#XY1] [test-4] Running test case: 4
[tester::#XY1] [test-4] Writing contents to ./test.lox:
[tester::#XY1] [test-4.lox] // Print statements expect an expression
[tester::#XY1] [test-4.lox] // So, this program leads to a compilation error
[tester::#XY1] [test-4.lox] print;
[tester::#XY1] [test-4] $ ./your_program.sh run test.lox
[your_program] Error: Expected expression, found token type SemiColon at line 3
[tester::#XY1] [test-4] ✓ 1 line(s) match on stdout
[tester::#XY1] [test-4] ✓ Received exit code 65.
[tester::#XY1] Test passed.
[tester::#IB5] Running tests for Stage #IB5 (Evaluating Expressions - Runtime Errors: Relational Operators)
[tester::#IB5] [test-1] Running test case: 1
[tester::#IB5] [test-1] Writing contents to ./test.lox:
[tester::#IB5] [test-1.lox] "world" < false
[tester::#IB5] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] Operands must be numbers. [line 1]
[tester::#IB5] [test-1] ✓ 1 line(s) match on stdout
[tester::#IB5] [test-1] ✓ Received exit code 70.
[tester::#IB5] [test-2] Running test case: 2
[tester::#IB5] [test-2] Writing contents to ./test.lox:
[tester::#IB5] [test-2.lox] false <= (92 + 91)
[tester::#IB5] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] Operands must be numbers. [line 1]
[tester::#IB5] [test-2] ✓ 1 line(s) match on stdout
[tester::#IB5] [test-2] ✓ Received exit code 70.
[tester::#IB5] [test-3] Running test case: 3
[tester::#IB5] [test-3] Writing contents to ./test.lox:
[tester::#IB5] [test-3.lox] 98 > ("foo" + "hello")
[tester::#IB5] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] Operands must be numbers. [line 1]
[tester::#IB5] [test-3] ✓ 1 line(s) match on stdout
[tester::#IB5] [test-3] ✓ Received exit code 70.
[tester::#IB5] [test-4] Running test case: 4
[tester::#IB5] [test-4] Writing contents to ./test.lox:
[tester::#IB5] [test-4.lox] true >= true
[tester::#IB5] [test-4] $ ./your_program.sh evaluate test.lox
[your_program] Operands must be numbers. [line 1]
[tester::#IB5] [test-4] ✓ 1 line(s) match on stdout
[tester::#IB5] [test-4] ✓ Received exit code 70.
[tester::#IB5] Test passed.
[tester::#CQ1] Running tests for Stage #CQ1 (Evaluating Expressions - Runtime Errors: Binary Operators (2/2))
[tester::#CQ1] [test-1] Running test case: 1
[tester::#CQ1] [test-1] Writing contents to ./test.lox:
[tester::#CQ1] [test-1.lox] "bar" + true
[tester::#CQ1] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] Operands must be two numbers or two strings. [line 1]
[tester::#CQ1] [test-1] ✓ 1 line(s) match on stdout
[tester::#CQ1] [test-1] ✓ Received exit code 70.
[tester::#CQ1] [test-2] Running test case: 2
[tester::#CQ1] [test-2] Writing contents to ./test.lox:
[tester::#CQ1] [test-2.lox] 56 + "baz" + 82
[tester::#CQ1] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] Operands must be two numbers or two strings. [line 1]
[tester::#CQ1] [test-2] ✓ 1 line(s) match on stdout
[tester::#CQ1] [test-2] ✓ Received exit code 70.
[tester::#CQ1] [test-3] Running test case: 3
[tester::#CQ1] [test-3] Writing contents to ./test.lox:
[tester::#CQ1] [test-3.lox] 77 - true
[tester::#CQ1] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] Operands must be numbers. [line 1]
[tester::#CQ1] [test-3] ✓ 1 line(s) match on stdout
[tester::#CQ1] [test-3] ✓ Received exit code 70.
[tester::#CQ1] [test-4] Running test case: 4
[tester::#CQ1] [test-4] Writing contents to ./test.lox:
[tester::#CQ1] [test-4.lox] false - ("quz" + "bar")
[tester::#CQ1] [test-4] $ ./your_program.sh evaluate test.lox
[your_program] Operands must be numbers. [line 1]
[tester::#CQ1] [test-4] ✓ 1 line(s) match on stdout
[tester::#CQ1] [test-4] ✓ Received exit code 70.
[tester::#CQ1] Test passed.
[tester::#YU6] Running tests for Stage #YU6 (Evaluating Expressions - Runtime Errors: Binary Operators (1/2))
[tester::#YU6] [test-1] Running test case: 1
[tester::#YU6] [test-1] Writing contents to ./test.lox:
[tester::#YU6] [test-1.lox] 50 * "quz"
[tester::#YU6] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] Operands must be numbers. [line 1]
[tester::#YU6] [test-1] ✓ 1 line(s) match on stdout
[tester::#YU6] [test-1] ✓ Received exit code 70.
[tester::#YU6] [test-2] Running test case: 2
[tester::#YU6] [test-2] Writing contents to ./test.lox:
[tester::#YU6] [test-2.lox] "quz" / 71
[tester::#YU6] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] Operands must be numbers. [line 1]
[tester::#YU6] [test-2] ✓ 1 line(s) match on stdout
[tester::#YU6] [test-2] ✓ Received exit code 70.
[tester::#YU6] [test-3] Running test case: 3
[tester::#YU6] [test-3] Writing contents to ./test.lox:
[tester::#YU6] [test-3.lox] false / false
[tester::#YU6] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] Operands must be numbers. [line 1]
[tester::#YU6] [test-3] ✓ 1 line(s) match on stdout
[tester::#YU6] [test-3] ✓ Received exit code 70.
[tester::#YU6] [test-4] Running test case: 4
[tester::#YU6] [test-4] Writing contents to ./test.lox:
[tester::#YU6] [test-4.lox] ("baz" + "quz") * ("quz" + "bar")
[tester::#YU6] [test-4] $ ./your_program.sh evaluate test.lox
[your_program] Operands must be numbers. [line 1]
[tester::#YU6] [test-4] ✓ 1 line(s) match on stdout
[tester::#YU6] [test-4] ✓ Received exit code 70.
[tester::#YU6] Test passed.
[tester::#GJ9] Running tests for Stage #GJ9 (Evaluating Expressions - Runtime Errors: Unary Operators)
[tester::#GJ9] [test-1] Running test case: 1
[tester::#GJ9] [test-1] Writing contents to ./test.lox:
[tester::#GJ9] [test-1.lox] -"hello"
[tester::#GJ9] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] Operand must be a number. [line 1]
[tester::#GJ9] [test-1] ✓ 1 line(s) match on stdout
[tester::#GJ9] [test-1] ✓ Received exit code 70.
[tester::#GJ9] [test-2] Running test case: 2
[tester::#GJ9] [test-2] Writing contents to ./test.lox:
[tester::#GJ9] [test-2.lox] -true
[tester::#GJ9] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] Operand must be a number. [line 1]
[tester::#GJ9] [test-2] ✓ 1 line(s) match on stdout
[tester::#GJ9] [test-2] ✓ Received exit code 70.
[tester::#GJ9] [test-3] Running test case: 3
[tester::#GJ9] [test-3] Writing contents to ./test.lox:
[tester::#GJ9] [test-3.lox] -false
[tester::#GJ9] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] Operand must be a number. [line 1]
[tester::#GJ9] [test-3] ✓ 1 line(s) match on stdout
[tester::#GJ9] [test-3] ✓ Received exit code 70.
[tester::#GJ9] [test-4] Running test case: 4
[tester::#GJ9] [test-4] Writing contents to ./test.lox:
[tester::#GJ9] [test-4.lox] -("baz" + "bar")
[tester::#GJ9] [test-4] $ ./your_program.sh evaluate test.lox
[your_program] Operand must be a number. [line 1]
[tester::#GJ9] [test-4] ✓ 1 line(s) match on stdout
[tester::#GJ9] [test-4] ✓ Received exit code 70.
[tester::#GJ9] Test passed.
[tester::#HW7] Running tests for Stage #HW7 (Evaluating Expressions - Equality Operators)
[tester::#HW7] [test-1] Running test case: 1
[tester::#HW7] [test-1] Writing contents to ./test.lox:
[tester::#HW7] [test-1.lox] "bar" != "hello"
[tester::#HW7] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#HW7] [test-1] ✓ 1 line(s) match on stdout
[tester::#HW7] [test-1] ✓ Received exit code 0.
[tester::#HW7] [test-2] Running test case: 2
[tester::#HW7] [test-2] Writing contents to ./test.lox:
[tester::#HW7] [test-2.lox] "bar" == "bar"
[tester::#HW7] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#HW7] [test-2] ✓ 1 line(s) match on stdout
[tester::#HW7] [test-2] ✓ Received exit code 0.
[tester::#HW7] [test-3] Running test case: 3
[tester::#HW7] [test-3] Writing contents to ./test.lox:
[tester::#HW7] [test-3.lox] 22 == "22"
[tester::#HW7] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] false
[tester::#HW7] [test-3] ✓ 1 line(s) match on stdout
[tester::#HW7] [test-3] ✓ Received exit code 0.
[tester::#HW7] [test-4] Running test case: 4
[tester::#HW7] [test-4] Writing contents to ./test.lox:
[tester::#HW7] [test-4.lox] 111 == (97 + 14)
[tester::#HW7] [test-4] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#HW7] [test-4] ✓ 1 line(s) match on stdout
[tester::#HW7] [test-4] ✓ Received exit code 0.
[tester::#HW7] Test passed.
[tester::#ET4] Running tests for Stage #ET4 (Evaluating Expressions - Relational Operators)
[tester::#ET4] [test-1] Running test case: 1
[tester::#ET4] [test-1] Writing contents to ./test.lox:
[tester::#ET4] [test-1.lox] 30 > -46
[tester::#ET4] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#ET4] [test-1] ✓ 1 line(s) match on stdout
[tester::#ET4] [test-1] ✓ Received exit code 0.
[tester::#ET4] [test-2] Running test case: 2
[tester::#ET4] [test-2] Writing contents to ./test.lox:
[tester::#ET4] [test-2.lox] 30 <= 88
[tester::#ET4] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#ET4] [test-2] ✓ 1 line(s) match on stdout
[tester::#ET4] [test-2] ✓ Received exit code 0.
[tester::#ET4] [test-3] Running test case: 3
[tester::#ET4] [test-3] Writing contents to ./test.lox:
[tester::#ET4] [test-3.lox] 42 >= 42
[tester::#ET4] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#ET4] [test-3] ✓ 1 line(s) match on stdout
[tester::#ET4] [test-3] ✓ Received exit code 0.
[tester::#ET4] [test-4] Running test case: 4
[tester::#ET4] [test-4] Writing contents to ./test.lox:
[tester::#ET4] [test-4.lox] (75 - 92) >= -(60 / 30 + 56)
[tester::#ET4] [test-4] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#ET4] [test-4] ✓ 1 line(s) match on stdout
[tester::#ET4] [test-4] ✓ Received exit code 0.
[tester::#ET4] Test passed.
[tester::#JX8] Running tests for Stage #JX8 (Evaluating Expressions - String Concatenation)
[tester::#JX8] [test-1] Running test case: 1
[tester::#JX8] [test-1] Writing contents to ./test.lox:
[tester::#JX8] [test-1.lox] "quz" + "bar"
[tester::#JX8] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] quzbar
[tester::#JX8] [test-1] ✓ 1 line(s) match on stdout
[tester::#JX8] [test-1] ✓ Received exit code 0.
[tester::#JX8] [test-2] Running test case: 2
[tester::#JX8] [test-2] Writing contents to ./test.lox:
[tester::#JX8] [test-2.lox] "foo" + "36"
[tester::#JX8] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] foo36
[tester::#JX8] [test-2] ✓ 1 line(s) match on stdout
[tester::#JX8] [test-2] ✓ Received exit code 0.
[tester::#JX8] [test-3] Running test case: 3
[tester::#JX8] [test-3] Writing contents to ./test.lox:
[tester::#JX8] [test-3.lox] "foo" + "bar" + "world"
[tester::#JX8] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] foobarworld
[tester::#JX8] [test-3] ✓ 1 line(s) match on stdout
[tester::#JX8] [test-3] ✓ Received exit code 0.
[tester::#JX8] [test-4] Running test case: 4
[tester::#JX8] [test-4] Writing contents to ./test.lox:
[tester::#JX8] [test-4.lox] ("quz" + "world") + ("baz" + "world")
[tester::#JX8] [test-4] $ ./your_program.sh evaluate test.lox
[your_program] quzworldbazworld
[tester::#JX8] [test-4] ✓ 1 line(s) match on stdout
[tester::#JX8] [test-4] ✓ Received exit code 0.
[tester::#JX8] Test passed.
[tester::#JY2] Running tests for Stage #JY2 (Evaluating Expressions - Arithmetic Operators (2/2))
[tester::#JY2] [test-1] Running test case: 1
[tester::#JY2] [test-1] Writing contents to ./test.lox:
[tester::#JY2] [test-1.lox] 62 - 59
[tester::#JY2] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] 3
[tester::#JY2] [test-1] ✓ 1 line(s) match on stdout
[tester::#JY2] [test-1] ✓ Received exit code 0.
[tester::#JY2] [test-2] Running test case: 2
[tester::#JY2] [test-2] Writing contents to ./test.lox:
[tester::#JY2] [test-2.lox] 46 + 57 - 49
[tester::#JY2] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] 54
[tester::#JY2] [test-2] ✓ 1 line(s) match on stdout
[tester::#JY2] [test-2] ✓ Received exit code 0.
[tester::#JY2] [test-3] Running test case: 3
[tester::#JY2] [test-3] Writing contents to ./test.lox:
[tester::#JY2] [test-3.lox] 78 + 69 - (-(76 - 80))
[tester::#JY2] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] 143
[tester::#JY2] [test-3] ✓ 1 line(s) match on stdout
[tester::#JY2] [test-3] ✓ Received exit code 0.
[tester::#JY2] [test-4] Running test case: 4
[tester::#JY2] [test-4] Writing contents to ./test.lox:
[tester::#JY2] [test-4.lox] (-81 + 81) * (43 * 81) / (1 + 4)
[tester::#JY2] [test-4] $ ./your_program.sh evaluate test.lox
[your_program] 0
[tester::#JY2] [test-4] ✓ 1 line(s) match on stdout
[tester::#JY2] [test-4] ✓ Received exit code 0.
[tester::#JY2] Test passed.
[tester::#BP3] Running tests for Stage #BP3 (Evaluating Expressions - Arithmetic Operators (1/2))
[tester::#BP3] [test-1] Running test case: 1
[tester::#BP3] [test-1] Writing contents to ./test.lox:
[tester::#BP3] [test-1.lox] 52 * 84
[tester::#BP3] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] 4368
[tester::#BP3] [test-1] ✓ 1 line(s) match on stdout
[tester::#BP3] [test-1] ✓ Received exit code 0.
[tester::#BP3] [test-2] Running test case: 2
[tester::#BP3] [test-2] Writing contents to ./test.lox:
[tester::#BP3] [test-2.lox] 68 / 5
[tester::#BP3] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] 13.6
[tester::#BP3] [test-2] ✓ 1 line(s) match on stdout
[tester::#BP3] [test-2] ✓ Received exit code 0.
[tester::#BP3] [test-3] Running test case: 3
[tester::#BP3] [test-3] Writing contents to ./test.lox:
[tester::#BP3] [test-3.lox] 7 * 4 / 7 / 1
[tester::#BP3] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] 4
[tester::#BP3] [test-3] ✓ 1 line(s) match on stdout
[tester::#BP3] [test-3] ✓ Received exit code 0.
[tester::#BP3] [test-4] Running test case: 4
[tester::#BP3] [test-4] Writing contents to ./test.lox:
[tester::#BP3] [test-4.lox] (18 * 4 / (3 * 6))
[tester::#BP3] [test-4] $ ./your_program.sh evaluate test.lox
[your_program] 4
[tester::#BP3] [test-4] ✓ 1 line(s) match on stdout
[tester::#BP3] [test-4] ✓ Received exit code 0.
[tester::#BP3] Test passed.
[tester::#DC1] Running tests for Stage #DC1 (Evaluating Expressions - Unary Operators: Negation & Not)
[tester::#DC1] [test-1] Running test case: 1
[tester::#DC1] [test-1] Writing contents to ./test.lox:
[tester::#DC1] [test-1.lox] -16
[tester::#DC1] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] -16
[tester::#DC1] [test-1] ✓ 1 line(s) match on stdout
[tester::#DC1] [test-1] ✓ Received exit code 0.
[tester::#DC1] [test-2] Running test case: 2
[tester::#DC1] [test-2] Writing contents to ./test.lox:
[tester::#DC1] [test-2.lox] !false
[tester::#DC1] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#DC1] [test-2] ✓ 1 line(s) match on stdout
[tester::#DC1] [test-2] ✓ Received exit code 0.
[tester::#DC1] [test-3] Running test case: 3
[tester::#DC1] [test-3] Writing contents to ./test.lox:
[tester::#DC1] [test-3.lox] !nil
[tester::#DC1] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#DC1] [test-3] ✓ 1 line(s) match on stdout
[tester::#DC1] [test-3] ✓ Received exit code 0.
[tester::#DC1] [test-4] Running test case: 4
[tester::#DC1] [test-4] Writing contents to ./test.lox:
[tester::#DC1] [test-4.lox] (!!67)
[tester::#DC1] [test-4] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#DC1] [test-4] ✓ 1 line(s) match on stdout
[tester::#DC1] [test-4] ✓ Received exit code 0.
[tester::#DC1] Test passed.
[tester::#OQ9] Running tests for Stage #OQ9 (Evaluating Expressions - Parentheses)
[tester::#OQ9] [test-1] Running test case: 1
[tester::#OQ9] [test-1] Writing contents to ./test.lox:
[tester::#OQ9] [test-1.lox] (true)
[tester::#OQ9] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#OQ9] [test-1] ✓ 1 line(s) match on stdout
[tester::#OQ9] [test-1] ✓ Received exit code 0.
[tester::#OQ9] [test-2] Running test case: 2
[tester::#OQ9] [test-2] Writing contents to ./test.lox:
[tester::#OQ9] [test-2.lox] (85)
[tester::#OQ9] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] 85
[tester::#OQ9] [test-2] ✓ 1 line(s) match on stdout
[tester::#OQ9] [test-2] ✓ Received exit code 0.
[tester::#OQ9] [test-3] Running test case: 3
[tester::#OQ9] [test-3] Writing contents to ./test.lox:
[tester::#OQ9] [test-3.lox] ("baz hello")
[tester::#OQ9] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] baz hello
[tester::#OQ9] [test-3] ✓ 1 line(s) match on stdout
[tester::#OQ9] [test-3] ✓ Received exit code 0.
[tester::#OQ9] [test-4] Running test case: 4
[tester::#OQ9] [test-4] Writing contents to ./test.lox:
[tester::#OQ9] [test-4.lox] ((false))
[tester::#OQ9] [test-4] $ ./your_program.sh evaluate test.lox
[your_program] false
[tester::#OQ9] [test-4] ✓ 1 line(s) match on stdout
[tester::#OQ9] [test-4] ✓ Received exit code 0.
[tester::#OQ9] Test passed.
[tester::#LV1] Running tests for Stage #LV1 (Evaluating Expressions - Literals: Strings & Numbers)
[tester::#LV1] [test-1] Running test case: 1
[tester::#LV1] [test-1] Writing contents to ./test.lox:
[tester::#LV1] [test-1.lox] 21
[tester::#LV1] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] 21
[tester::#LV1] [test-1] ✓ 1 line(s) match on stdout
[tester::#LV1] [test-1] ✓ Received exit code 0.
[tester::#LV1] [test-2] Running test case: 2
[tester::#LV1] [test-2] Writing contents to ./test.lox:
[tester::#LV1] [test-2.lox] 94.14
[tester::#LV1] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] 94.14
[tester::#LV1] [test-2] ✓ 1 line(s) match on stdout
[tester::#LV1] [test-2] ✓ Received exit code 0.
[tester::#LV1] [test-3] Running test case: 3
[tester::#LV1] [test-3] Writing contents to ./test.lox:
[tester::#LV1] [test-3.lox] "bar quz"
[tester::#LV1] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] bar quz
[tester::#LV1] [test-3] ✓ 1 line(s) match on stdout
[tester::#LV1] [test-3] ✓ Received exit code 0.
[tester::#LV1] [test-4] Running test case: 4
[tester::#LV1] [test-4] Writing contents to ./test.lox:
[tester::#LV1] [test-4.lox] "95"
[tester::#LV1] [test-4] $ ./your_program.sh evaluate test.lox
[your_program] 95
[tester::#LV1] [test-4] ✓ 1 line(s) match on stdout
[tester::#LV1] [test-4] ✓ Received exit code 0.
[tester::#LV1] Test passed.
[tester::#IZ6] Running tests for Stage #IZ6 (Evaluating Expressions - Literals: Booleans & Nil)
[tester::#IZ6] [test-1] Running test case: 1
[tester::#IZ6] [test-1] Writing contents to ./test.lox:
[tester::#IZ6] [test-1.lox] true
[tester::#IZ6] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#IZ6] [test-1] ✓ 1 line(s) match on stdout
[tester::#IZ6] [test-1] ✓ Received exit code 0.
[tester::#IZ6] [test-2] Running test case: 2
[tester::#IZ6] [test-2] Writing contents to ./test.lox:
[tester::#IZ6] [test-2.lox] false
[tester::#IZ6] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] false
[tester::#IZ6] [test-2] ✓ 1 line(s) match on stdout
[tester::#IZ6] [test-2] ✓ Received exit code 0.
[tester::#IZ6] [test-3] Running test case: 3
[tester::#IZ6] [test-3] Writing contents to ./test.lox:
[tester::#IZ6] [test-3.lox] nil
[tester::#IZ6] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] nil
[tester::#IZ6] [test-3] ✓ 1 line(s) match on stdout
[tester::#IZ6] [test-3] ✓ Received exit code 0.
[tester::#IZ6] Test passed.
[tester::#WZ8] Running tests for Stage #WZ8 (Parsing Expressions - Syntactic errors)
[tester::#WZ8] [test-1] Running test case: 1
[tester::#WZ8] [test-1] Writing contents to ./test.lox:
[tester::#WZ8] [test-1.lox] "hello
[tester::#WZ8] [test-1] $ ./your_program.sh parse test.lox
[your_program] [line 1] Error: Unterminated string.
[your_program] Error: Tokenization error
[tester::#WZ8] [test-1] ✓ 1 line(s) match on stdout
[tester::#WZ8] [test-1] ✓ Received exit code 65.
[tester::#WZ8] [test-2] Running test case: 2
[tester::#WZ8] [test-2] Writing contents to ./test.lox:
[tester::#WZ8] [test-2.lox] (foo
[tester::#WZ8] [test-2] $ ./your_program.sh parse test.lox
[your_program] Error: Expected ')' after expression
[tester::#WZ8] [test-2] ✓ 1 line(s) match on stdout
[tester::#WZ8] [test-2] ✓ Received exit code 65.
[tester::#WZ8] [test-3] Running test case: 3
[tester::#WZ8] [test-3] Writing contents to ./test.lox:
[tester::#WZ8] [test-3.lox] (37 +)
[tester::#WZ8] [test-3] $ ./your_program.sh parse test.lox
[your_program] Error: Expected expression, found token type RightParen at line 1
[tester::#WZ8] [test-3] ✓ 1 line(s) match on stdout
[tester::#WZ8] [test-3] ✓ Received exit code 65.
[tester::#WZ8] [test-4] Running test case: 4
[tester::#WZ8] [test-4] Writing contents to ./test.lox:
[tester::#WZ8] [test-4.lox] +
[tester::#WZ8] [test-4] $ ./your_program.sh parse test.lox
[your_program] Error: Expected expression, found token type Plus at line 1
[tester::#WZ8] [test-4] ✓ 1 line(s) match on stdout
[tester::#WZ8] [test-4] ✓ Received exit code 65.
[tester::#WZ8] Test passed.
[tester::#HT8] Running tests for Stage #HT8 (Parsing Expressions - Equality operators)
[tester::#HT8] [test-1] Running test case: 1
[tester::#HT8] [test-1] Writing contents to ./test.lox:
[tester::#HT8] [test-1.lox] "world"!="hello"
[tester::#HT8] [test-1] $ ./your_program.sh parse test.lox
[your_program] (!= world hello)
[tester::#HT8] [test-1] ✓ 1 line(s) match on stdout
[tester::#HT8] [test-1] ✓ Received exit code 0.
[tester::#HT8] [test-2] Running test case: 2
[tester::#HT8] [test-2] Writing contents to ./test.lox:
[tester::#HT8] [test-2.lox] "baz" == "baz"
[tester::#HT8] [test-2] $ ./your_program.sh parse test.lox
[your_program] (== baz baz)
[tester::#HT8] [test-2] ✓ 1 line(s) match on stdout
[tester::#HT8] [test-2] ✓ Received exit code 0.
[tester::#HT8] [test-3] Running test case: 3
[tester::#HT8] [test-3] Writing contents to ./test.lox:
[tester::#HT8] [test-3.lox] 30 == 42
[tester::#HT8] [test-3] $ ./your_program.sh parse test.lox
[your_program] (== 30.0 42.0)
[tester::#HT8] [test-3] ✓ 1 line(s) match on stdout
[tester::#HT8] [test-3] ✓ Received exit code 0.
[tester::#HT8] [test-4] Running test case: 4
[tester::#HT8] [test-4] Writing contents to ./test.lox:
[tester::#HT8] [test-4.lox] (38 != 29) == ((-62 + 21) >= (32 * 77))
[tester::#HT8] [test-4] $ ./your_program.sh parse test.lox
[your_program] (== (group (!= 38.0 29.0)) (group (>= (group (+ (- 62.0) 21.0)) (group (* 32.0 77.0)))))
[tester::#HT8] [test-4] ✓ 1 line(s) match on stdout
[tester::#HT8] [test-4] ✓ Received exit code 0.
[tester::#HT8] Test passed.
[tester::#UH4] Running tests for Stage #UH4 (Parsing Expressions - Comparison operators)
[tester::#UH4] [test-1] Running test case: 1
[tester::#UH4] [test-1] Writing contents to ./test.lox:
[tester::#UH4] [test-1.lox] 48 > 22
[tester::#UH4] [test-1] $ ./your_program.sh parse test.lox
[your_program] (> 48.0 22.0)
[tester::#UH4] [test-1] ✓ 1 line(s) match on stdout
[tester::#UH4] [test-1] ✓ Received exit code 0.
[tester::#UH4] [test-2] Running test case: 2
[tester::#UH4] [test-2] Writing contents to ./test.lox:
[tester::#UH4] [test-2.lox] 26 <= 74
[tester::#UH4] [test-2] $ ./your_program.sh parse test.lox
[your_program] (<= 26.0 74.0)
[tester::#UH4] [test-2] ✓ 1 line(s) match on stdout
[tester::#UH4] [test-2] ✓ Received exit code 0.
[tester::#UH4] [test-3] Running test case: 3
[tester::#UH4] [test-3] Writing contents to ./test.lox:
[tester::#UH4] [test-3.lox] 48 < 74 < 100
[tester::#UH4] [test-3] $ ./your_program.sh parse test.lox
[your_program] (< (< 48.0 74.0) 100.0)
[tester::#UH4] [test-3] ✓ 1 line(s) match on stdout
[tester::#UH4] [test-3] ✓ Received exit code 0.
[tester::#UH4] [test-4] Running test case: 4
[tester::#UH4] [test-4] Writing contents to ./test.lox:
[tester::#UH4] [test-4.lox] (14 - 47) >= -(90 / 26 + 12)
[tester::#UH4] [test-4] $ ./your_program.sh parse test.lox
[your_program] (>= (group (- 14.0 47.0)) (- (group (+ (/ 90.0 26.0) 12.0))))
[tester::#UH4] [test-4] ✓ 1 line(s) match on stdout
[tester::#UH4] [test-4] ✓ Received exit code 0.
[tester::#UH4] Test passed.
[tester::#YF2] Running tests for Stage #YF2 (Parsing Expressions - Arithmetic operators (2/2))
[tester::#YF2] [test-1] Running test case: 1
[tester::#YF2] [test-1] Writing contents to ./test.lox:
[tester::#YF2] [test-1.lox] "hello" + "world"
[tester::#YF2] [test-1] $ ./your_program.sh parse test.lox
[your_program] (+ hello world)
[tester::#YF2] [test-1] ✓ 1 line(s) match on stdout
[tester::#YF2] [test-1] ✓ Received exit code 0.
[tester::#YF2] [test-2] Running test case: 2
[tester::#YF2] [test-2] Writing contents to ./test.lox:
[tester::#YF2] [test-2.lox] 30 - 61 * 82 - 18
[tester::#YF2] [test-2] $ ./your_program.sh parse test.lox
[your_program] (- (- 30.0 (* 61.0 82.0)) 18.0)
[tester::#YF2] [test-2] ✓ 1 line(s) match on stdout
[tester::#YF2] [test-2] ✓ Received exit code 0.
[tester::#YF2] [test-3] Running test case: 3
[tester::#YF2] [test-3] Writing contents to ./test.lox:
[tester::#YF2] [test-3.lox] 84 + 57 - 66 / 13
[tester::#YF2] [test-3] $ ./your_program.sh parse test.lox
[your_program] (- (+ 84.0 57.0) (/ 66.0 13.0))
[tester::#YF2] [test-3] ✓ 1 line(s) match on stdout
[tester::#YF2] [test-3] ✓ Received exit code 0.
[tester::#YF2] [test-4] Running test case: 4
[tester::#YF2] [test-4] Writing contents to ./test.lox:
[tester::#YF2] [test-4.lox] (-66 + 14) * (41 * 20) / (46 + 13)
[tester::#YF2] [test-4] $ ./your_program.sh parse test.lox
[your_program] (/ (* (group (+ (- 66.0) 14.0)) (group (* 41.0 20.0))) (group (+ 46.0 13.0)))
[tester::#YF2] [test-4] ✓ 1 line(s) match on stdout
[tester::#YF2] [test-4] ✓ Received exit code 0.
[tester::#YF2] Test passed.
[tester::#WA9] Running tests for Stage #WA9 (Parsing Expressions - Arithmetic operators (1/2))
[tester::#WA9] [test-1] Running test case: 1
[tester::#WA9] [test-1] Writing contents to ./test.lox:
[tester::#WA9] [test-1.lox] 64 * 68 / 12
[tester::#WA9] [test-1] $ ./your_program.sh parse test.lox
[your_program] (/ (* 64.0 68.0) 12.0)
[tester::#WA9] [test-1] ✓ 1 line(s) match on stdout
[tester::#WA9] [test-1] ✓ Received exit code 0.
[tester::#WA9] [test-2] Running test case: 2
[tester::#WA9] [test-2] Writing contents to ./test.lox:
[tester::#WA9] [test-2.lox] 20 / 90 / 89
[tester::#WA9] [test-2] $ ./your_program.sh parse test.lox
[your_program] (/ (/ 20.0 90.0) 89.0)
[tester::#WA9] [test-2] ✓ 1 line(s) match on stdout
[tester::#WA9] [test-2] ✓ Received exit code 0.
[tester::#WA9] [test-3] Running test case: 3
[tester::#WA9] [test-3] Writing contents to ./test.lox:
[tester::#WA9] [test-3.lox] 45 * 60 * 63 / 72
[tester::#WA9] [test-3] $ ./your_program.sh parse test.lox
[your_program] (/ (* (* 45.0 60.0) 63.0) 72.0)
[tester::#WA9] [test-3] ✓ 1 line(s) match on stdout
[tester::#WA9] [test-3] ✓ Received exit code 0.
[tester::#WA9] [test-4] Running test case: 4
[tester::#WA9] [test-4] Writing contents to ./test.lox:
[tester::#WA9] [test-4.lox] (13 * -17 / (26 * 37))
[tester::#WA9] [test-4] $ ./your_program.sh parse test.lox
[your_program] (group (/ (* 13.0 (- 17.0)) (group (* 26.0 37.0))))
[tester::#WA9] [test-4] ✓ 1 line(s) match on stdout
[tester::#WA9] [test-4] ✓ Received exit code 0.
[tester::#WA9] Test passed.
[tester::#MQ1] Running tests for Stage #MQ1 (Parsing Expressions - Unary Operators)
[tester::#MQ1] [test-1] Running test case: 1
[tester::#MQ1] [test-1] Writing contents to ./test.lox:
[tester::#MQ1] [test-1.lox] !false
[tester::#MQ1] [test-1] $ ./your_program.sh parse test.lox
[your_program] (! false)
[tester::#MQ1] [test-1] ✓ 1 line(s) match on stdout
[tester::#MQ1] [test-1] ✓ Received exit code 0.
[tester::#MQ1] [test-2] Running test case: 2
[tester::#MQ1] [test-2] Writing contents to ./test.lox:
[tester::#MQ1] [test-2.lox] -24
[tester::#MQ1] [test-2] $ ./your_program.sh parse test.lox
[your_program] (- 24.0)
[tester::#MQ1] [test-2] ✓ 1 line(s) match on stdout
[tester::#MQ1] [test-2] ✓ Received exit code 0.
[tester::#MQ1] [test-3] Running test case: 3
[tester::#MQ1] [test-3] Writing contents to ./test.lox:
[tester::#MQ1] [test-3.lox] !!false
[tester::#MQ1] [test-3] $ ./your_program.sh parse test.lox
[your_program] (! (! false))
[tester::#MQ1] [test-3] ✓ 1 line(s) match on stdout
[tester::#MQ1] [test-3] ✓ Received exit code 0.
[tester::#MQ1] [test-4] Running test case: 4
[tester::#MQ1] [test-4] Writing contents to ./test.lox:
[tester::#MQ1] [test-4.lox] (!!(false))
[tester::#MQ1] [test-4] $ ./your_program.sh parse test.lox
[your_program] (group (! (! (group false))))
[tester::#MQ1] [test-4] ✓ 1 line(s) match on stdout
[tester::#MQ1] [test-4] ✓ Received exit code 0.
[tester::#MQ1] Test passed.
[tester::#XE6] Running tests for Stage #XE6 (Parsing Expressions - Parentheses)
[tester::#XE6] [test-1] Running test case: 1
[tester::#XE6] [test-1] Writing contents to ./test.lox:
[tester::#XE6] [test-1.lox] ("foo")
[tester::#XE6] [test-1] $ ./your_program.sh parse test.lox
[your_program] (group foo)
[tester::#XE6] [test-1] ✓ 1 line(s) match on stdout
[tester::#XE6] [test-1] ✓ Received exit code 0.
[tester::#XE6] [test-2] Running test case: 2
[tester::#XE6] [test-2] Writing contents to ./test.lox:
[tester::#XE6] [test-2.lox] ((true))
[tester::#XE6] [test-2] $ ./your_program.sh parse test.lox
[your_program] (group (group true))
[tester::#XE6] [test-2] ✓ 1 line(s) match on stdout
[tester::#XE6] [test-2] ✓ Received exit code 0.
[tester::#XE6] [test-3] Running test case: 3
[tester::#XE6] [test-3] Writing contents to ./test.lox:
[tester::#XE6] [test-3.lox] (nil)
[tester::#XE6] [test-3] $ ./your_program.sh parse test.lox
[your_program] (group nil)
[tester::#XE6] [test-3] ✓ 1 line(s) match on stdout
[tester::#XE6] [test-3] ✓ Received exit code 0.
[tester::#XE6] [test-4] Running test case: 4
[tester::#XE6] [test-4] Writing contents to ./test.lox:
[tester::#XE6] [test-4.lox] (21.44)
[tester::#XE6] [test-4] $ ./your_program.sh parse test.lox
[your_program] (group 21.44)
[tester::#XE6] [test-4] ✓ 1 line(s) match on stdout
[tester::#XE6] [test-4] ✓ Received exit code 0.
[tester::#XE6] Test passed.
[tester::#TH5] Running tests for Stage #TH5 (Parsing Expressions - String literals)
[tester::#TH5] [test-1] Running test case: 1
[tester::#TH5] [test-1] Writing contents to ./test.lox:
[tester::#TH5] [test-1.lox] "foo world"
[tester::#TH5] [test-1] $ ./your_program.sh parse test.lox
[your_program] foo world
[tester::#TH5] [test-1] ✓ 1 line(s) match on stdout
[tester::#TH5] [test-1] ✓ Received exit code 0.
[tester::#TH5] [test-2] Running test case: 2
[tester::#TH5] [test-2] Writing contents to ./test.lox:
[tester::#TH5] [test-2.lox] "'foo'"
[tester::#TH5] [test-2] $ ./your_program.sh parse test.lox
[your_program] 'foo'
[tester::#TH5] [test-2] ✓ 1 line(s) match on stdout
[tester::#TH5] [test-2] ✓ Received exit code 0.
[tester::#TH5] [test-3] Running test case: 3
[tester::#TH5] [test-3] Writing contents to ./test.lox:
[tester::#TH5] [test-3.lox] "// world"
[tester::#TH5] [test-3] $ ./your_program.sh parse test.lox
[your_program] // world
[tester::#TH5] [test-3] ✓ 1 line(s) match on stdout
[tester::#TH5] [test-3] ✓ Received exit code 0.
[tester::#TH5] [test-4] Running test case: 4
[tester::#TH5] [test-4] Writing contents to ./test.lox:
[tester::#TH5] [test-4.lox] "27"
[tester::#TH5] [test-4] $ ./your_program.sh parse test.lox
[your_program] 27
[tester::#TH5] [test-4] ✓ 1 line(s) match on stdout
[tester::#TH5] [test-4] ✓ Received exit code 0.
[tester::#TH5] Test passed.
[tester::#RA8] Running tests for Stage #RA8 (Parsing Expressions - Number literals)
[tester::#RA8] [test-1] Running test case: 1
[tester::#RA8] [test-1] Writing contents to ./test.lox:
[tester::#RA8] [test-1.lox] 21
[tester::#RA8] [test-1] $ ./your_program.sh parse test.lox
[your_program] 21.0
[tester::#RA8] [test-1] ✓ 1 line(s) match on stdout
[tester::#RA8] [test-1] ✓ Received exit code 0.
[tester::#RA8] [test-2] Running test case: 2
[tester::#RA8] [test-2] Writing contents to ./test.lox:
[tester::#RA8] [test-2.lox] 0.0
[tester::#RA8] [test-2] $ ./your_program.sh parse test.lox
[your_program] 0.0
[tester::#RA8] [test-2] ✓ 1 line(s) match on stdout
[tester::#RA8] [test-2] ✓ Received exit code 0.
[tester::#RA8] [test-3] Running test case: 3
[tester::#RA8] [test-3] Writing contents to ./test.lox:
[tester::#RA8] [test-3.lox] 48.24
[tester::#RA8] [test-3] $ ./your_program.sh parse test.lox
[your_program] 48.24
[tester::#RA8] [test-3] ✓ 1 line(s) match on stdout
[tester::#RA8] [test-3] ✓ Received exit code 0.
[tester::#RA8] Test passed.
[tester::#SC2] Running tests for Stage #SC2 (Parsing Expressions - Booleans & Nil)
[tester::#SC2] [test-1] Running test case: 1
[tester::#SC2] [test-1] Writing contents to ./test.lox:
[tester::#SC2] [test-1.lox] true
[tester::#SC2] [test-1] $ ./your_program.sh parse test.lox
[your_program] true
[tester::#SC2] [test-1] ✓ 1 line(s) match on stdout
[tester::#SC2] [test-1] ✓ Received exit code 0.
[tester::#SC2] [test-2] Running test case: 2
[tester::#SC2] [test-2] Writing contents to ./test.lox:
[tester::#SC2] [test-2.lox] false
[tester::#SC2] [test-2] $ ./your_program.sh parse test.lox
[your_program] false
[tester::#SC2] [test-2] ✓ 1 line(s) match on stdout
[tester::#SC2] [test-2] ✓ Received exit code 0.
[tester::#SC2] [test-3] Running test case: 3
[tester::#SC2] [test-3] Writing contents to ./test.lox:
[tester::#SC2] [test-3.lox] nil
[tester::#SC2] [test-3] $ ./your_program.sh parse test.lox
[your_program] nil
[tester::#SC2] [test-3] ✓ 1 line(s) match on stdout
[tester::#SC2] [test-3] ✓ Received exit code 0.
[tester::#SC2] Test passed.
[tester::#PQ5] Running tests for Stage #PQ5 (Scanning: Reserved words)
[tester::#PQ5] [test-1] Running test case: 1
[tester::#PQ5] [test-1] Writing contents to ./test.lox:
[tester::#PQ5] [test-1.lox] nil
[tester::#PQ5] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] NIL nil null
[your_program] EOF  null
[tester::#PQ5] [test-1] ✓ 2 line(s) match on stdout
[tester::#PQ5] [test-1] ✓ Received exit code 0.
[tester::#PQ5] [test-2] Running test case: 2
[tester::#PQ5] [test-2] Writing contents to ./test.lox:
[tester::#PQ5] [test-2.lox] this else and super class print return ELSE TRUE SUPER false IF var if AND FOR PRINT FALSE nil or NIL RETURN fun THIS true WHILE while VAR OR for FUN CLASS
[tester::#PQ5] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] THIS this null
[your_program] ELSE else null
[your_program] AND and null
[your_program] SUPER super null
[your_program] CLASS class null
[your_program] PRINT print null
[your_program] RETURN return null
[your_program] IDENTIFIER ELSE null
[your_program] IDENTIFIER TRUE null
[your_program] IDENTIFIER SUPER null
[your_program] FALSE false null
[your_program] IDENTIFIER IF null
[your_program] VAR var null
[your_program] IF if null
[your_program] IDENTIFIER AND null
[your_program] IDENTIFIER FOR null
[your_program] IDENTIFIER PRINT null
[your_program] IDENTIFIER FALSE null
[your_program] NIL nil null
[your_program] OR or null
[your_program] IDENTIFIER NIL null
[your_program] IDENTIFIER RETURN null
[your_program] FUN fun null
[your_program] IDENTIFIER THIS null
[your_program] TRUE true null
[your_program] IDENTIFIER WHILE null
[your_program] WHILE while null
[your_program] IDENTIFIER VAR null
[your_program] IDENTIFIER OR null
[your_program] FOR for null
[your_program] IDENTIFIER FUN null
[your_program] IDENTIFIER CLASS null
[your_program] EOF  null
[tester::#PQ5] [test-2] ✓ 33 line(s) match on stdout
[tester::#PQ5] [test-2] ✓ Received exit code 0.
[tester::#PQ5] [test-3] Running test case: 3
[tester::#PQ5] [test-3] Writing contents to ./test.lox:
[tester::#PQ5] [test-3.lox] var greeting = "Hello"
[tester::#PQ5] [test-3.lox] if (greeting == "Hello") {
[tester::#PQ5] [test-3.lox]     return true
[tester::#PQ5] [test-3.lox] } else {
[tester::#PQ5] [test-3.lox]     return false
[tester::#PQ5] [test-3.lox] }
[tester::#PQ5] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] VAR var null
[your_program] IDENTIFIER greeting null
[your_program] EQUAL = null
[your_program] STRING "Hello" Hello
[your_program] IF if null
[your_program] LEFT_PAREN ( null
[your_program] IDENTIFIER greeting null
[your_program] EQUAL_EQUAL == null
[your_program] STRING "Hello" Hello
[your_program] RIGHT_PAREN ) null
[your_program] LEFT_BRACE { null
[your_program] RETURN return null
[your_program] TRUE true null
[your_program] RIGHT_BRACE } null
[your_program] ELSE else null
[your_program] LEFT_BRACE { null
[your_program] RETURN return null
[your_program] FALSE false null
[your_program] RIGHT_BRACE } null
[your_program] EOF  null
[tester::#PQ5] [test-3] ✓ 20 line(s) match on stdout
[tester::#PQ5] [test-3] ✓ Received exit code 0.
[tester::#PQ5] [test-4] Running test case: 4
[tester::#PQ5] [test-4] Writing contents to ./test.lox:
[tester::#PQ5] [test-4.lox] var result = (a + b) > 7 or "Success" != "Failure" or x >= 5
[tester::#PQ5] [test-4.lox] while (result) {
[tester::#PQ5] [test-4.lox]     var counter = 0
[tester::#PQ5] [test-4.lox]     counter = counter + 1
[tester::#PQ5] [test-4.lox]     if (counter == 10) {
[tester::#PQ5] [test-4.lox]         return nil
[tester::#PQ5] [test-4.lox]     }
[tester::#PQ5] [test-4.lox] }
[tester::#PQ5] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] VAR var null
[your_program] IDENTIFIER result null
[your_program] EQUAL = null
[your_program] LEFT_PAREN ( null
[your_program] IDENTIFIER a null
[your_program] PLUS + null
[your_program] IDENTIFIER b null
[your_program] RIGHT_PAREN ) null
[your_program] GREATER > null
[your_program] NUMBER 7 7.0
[your_program] OR or null
[your_program] STRING "Success" Success
[your_program] BANG_EQUAL != null
[your_program] STRING "Failure" Failure
[your_program] OR or null
[your_program] IDENTIFIER x null
[your_program] GREATER_EQUAL >= null
[your_program] NUMBER 5 5.0
[your_program] WHILE while null
[your_program] LEFT_PAREN ( null
[your_program] IDENTIFIER result null
[your_program] RIGHT_PAREN ) null
[your_program] LEFT_BRACE { null
[your_program] VAR var null
[your_program] IDENTIFIER counter null
[your_program] EQUAL = null
[your_program] NUMBER 0 0.0
[your_program] IDENTIFIER counter null
[your_program] EQUAL = null
[your_program] IDENTIFIER counter null
[your_program] PLUS + null
[your_program] NUMBER 1 1.0
[your_program] IF if null
[your_program] LEFT_PAREN ( null
[your_program] IDENTIFIER counter null
[your_program] EQUAL_EQUAL == null
[your_program] NUMBER 10 10.0
[your_program] RIGHT_PAREN ) null
[your_program] LEFT_BRACE { null
[your_program] RETURN return null
[your_program] NIL nil null
[your_program] RIGHT_BRACE } null
[your_program] RIGHT_BRACE } null
[your_program] EOF  null
[tester::#PQ5] [test-4] ✓ 44 line(s) match on stdout
[tester::#PQ5] [test-4] ✓ Received exit code 0.
[tester::#PQ5] Test passed.
[tester::#EY7] Running tests for Stage #EY7 (Scanning: Identifiers)
[tester::#EY7] [test-1] Running test case: 1
[tester::#EY7] [test-1] Writing contents to ./test.lox:
[tester::#EY7] [test-1.lox] baz bar
[tester::#EY7] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] IDENTIFIER baz null
[your_program] IDENTIFIER bar null
[your_program] EOF  null
[tester::#EY7] [test-1] ✓ 3 line(s) match on stdout
[tester::#EY7] [test-1] ✓ Received exit code 0.
[tester::#EY7] [test-2] Running test case: 2
[tester::#EY7] [test-2] Writing contents to ./test.lox:
[tester::#EY7] [test-2.lox] _123world_ f00 baz _hello foo
[tester::#EY7] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] IDENTIFIER _123world_ null
[your_program] IDENTIFIER f00 null
[your_program] IDENTIFIER baz null
[your_program] IDENTIFIER _hello null
[your_program] IDENTIFIER foo null
[your_program] EOF  null
[tester::#EY7] [test-2] ✓ 6 line(s) match on stdout
[tester::#EY7] [test-2] ✓ Received exit code 0.
[tester::#EY7] [test-3] Running test case: 3
[tester::#EY7] [test-3] Writing contents to ./test.lox:
[tester::#EY7] [test-3.lox] message = "Hello, World!"
[tester::#EY7] [test-3.lox] number = 123
[tester::#EY7] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] IDENTIFIER message null
[your_program] EQUAL = null
[your_program] STRING "Hello, World!" Hello, World!
[your_program] IDENTIFIER number null
[your_program] EQUAL = null
[your_program] NUMBER 123 123.0
[your_program] EOF  null
[tester::#EY7] [test-3] ✓ 7 line(s) match on stdout
[tester::#EY7] [test-3] ✓ Received exit code 0.
[tester::#EY7] [test-4] Running test case: 4
[tester::#EY7] [test-4] Writing contents to ./test.lox:
[tester::#EY7] [test-4.lox] {
[tester::#EY7] [test-4.lox] // This is a complex test case
[tester::#EY7] [test-4.lox] str1 = "Test"
[tester::#EY7] [test-4.lox] str2 = "Case"
[tester::#EY7] [test-4.lox] num1 = 100
[tester::#EY7] [test-4.lox] num2 = 200.00
[tester::#EY7] [test-4.lox] result = (str1 == str2) != ((num1 + num2) >= 300)
[tester::#EY7] [test-4.lox] }
[tester::#EY7] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_BRACE { null
[your_program] IDENTIFIER str1 null
[your_program] EQUAL = null
[your_program] STRING "Test" Test
[your_program] IDENTIFIER str2 null
[your_program] EQUAL = null
[your_program] STRING "Case" Case
[your_program] IDENTIFIER num1 null
[your_program] EQUAL = null
[your_program] NUMBER 100 100.0
[your_program] IDENTIFIER num2 null
[your_program] EQUAL = null
[your_program] NUMBER 200.00 200.0
[your_program] IDENTIFIER result null
[your_program] EQUAL = null
[your_program] LEFT_PAREN ( null
[your_program] IDENTIFIER str1 null
[your_program] EQUAL_EQUAL == null
[your_program] IDENTIFIER str2 null
[your_program] RIGHT_PAREN ) null
[your_program] BANG_EQUAL != null
[your_program] LEFT_PAREN ( null
[your_program] LEFT_PAREN ( null
[your_program] IDENTIFIER num1 null
[your_program] PLUS + null
[your_program] IDENTIFIER num2 null
[your_program] RIGHT_PAREN ) null
[your_program] GREATER_EQUAL >= null
[your_program] NUMBER 300 300.0
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_BRACE } null
[your_program] EOF  null
[tester::#EY7] [test-4] ✓ 32 line(s) match on stdout
[tester::#EY7] [test-4] ✓ Received exit code 0.
[tester::#EY7] Test passed.
[tester::#KJ0] Running tests for Stage #KJ0 (Scanning: Number literals)
[tester::#KJ0] [test-1] Running test case: 1
[tester::#KJ0] [test-1] Writing contents to ./test.lox:
[tester::#KJ0] [test-1.lox] 88
[tester::#KJ0] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] NUMBER 88 88.0
[your_program] EOF  null
[tester::#KJ0] [test-1] ✓ 2 line(s) match on stdout
[tester::#KJ0] [test-1] ✓ Received exit code 0.
[tester::#KJ0] [test-2] Running test case: 2
[tester::#KJ0] [test-2] Writing contents to ./test.lox:
[tester::#KJ0] [test-2.lox] 7657.9584
[tester::#KJ0] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] NUMBER 7657.9584 7657.9584
[your_program] EOF  null
[tester::#KJ0] [test-2] ✓ 2 line(s) match on stdout
[tester::#KJ0] [test-2] ✓ Received exit code 0.
[tester::#KJ0] [test-3] Running test case: 3
[tester::#KJ0] [test-3] Writing contents to ./test.lox:
[tester::#KJ0] [test-3.lox] 48.0000
[tester::#KJ0] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] NUMBER 48.0000 48.0
[your_program] EOF  null
[tester::#KJ0] [test-3] ✓ 2 line(s) match on stdout
[tester::#KJ0] [test-3] ✓ Received exit code 0.
[tester::#KJ0] [test-4] Running test case: 4
[tester::#KJ0] [test-4] Writing contents to ./test.lox:
[tester::#KJ0] [test-4.lox] (42+75) > 73 != ("Success" != "Failure") != (89 >= 13)
[tester::#KJ0] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] NUMBER 42 42.0
[your_program] PLUS + null
[your_program] NUMBER 75 75.0
[your_program] RIGHT_PAREN ) null
[your_program] GREATER > null
[your_program] NUMBER 73 73.0
[your_program] BANG_EQUAL != null
[your_program] LEFT_PAREN ( null
[your_program] STRING "Success" Success
[your_program] BANG_EQUAL != null
[your_program] STRING "Failure" Failure
[your_program] RIGHT_PAREN ) null
[your_program] BANG_EQUAL != null
[your_program] LEFT_PAREN ( null
[your_program] NUMBER 89 89.0
[your_program] GREATER_EQUAL >= null
[your_program] NUMBER 13 13.0
[your_program] RIGHT_PAREN ) null
[your_program] EOF  null
[tester::#KJ0] [test-4] ✓ 20 line(s) match on stdout
[tester::#KJ0] [test-4] ✓ Received exit code 0.
[tester::#KJ0] Test passed.
[tester::#UE7] Running tests for Stage #UE7 (Scanning: String literals)
[tester::#UE7] [test-1] Running test case: 1
[tester::#UE7] [test-1] Writing contents to ./test.lox:
[tester::#UE7] [test-1.lox] "hello"
[tester::#UE7] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] STRING "hello" hello
[your_program] EOF  null
[tester::#UE7] [test-1] ✓ 2 line(s) match on stdout
[tester::#UE7] [test-1] ✓ Received exit code 0.
[tester::#UE7] [test-2] Running test case: 2
[tester::#UE7] [test-2] Writing contents to ./test.lox:
[tester::#UE7] [test-2.lox] "foo" "unterminated
[tester::#UE7] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] [line 1] Error: Unterminated string.
[your_program] STRING "foo" foo
[your_program] EOF  null
[tester::#UE7] [test-2] ✓ 1 line(s) match on stderr
[tester::#UE7] [test-2] ✓ 2 line(s) match on stdout
[tester::#UE7] [test-2] ✓ Received exit code 65.
[tester::#UE7] [test-3] Running test case: 3
[tester::#UE7] [test-3] Writing contents to ./test.lox:
[tester::#UE7] [test-3.lox] "foo <|TAB|>bar 123 // hello world!"
[tester::#UE7] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] STRING "foo 	bar 123 // hello world!" foo 	bar 123 // hello world!
[your_program] EOF  null
[tester::#UE7] [test-3] ✓ 2 line(s) match on stdout
[tester::#UE7] [test-3] ✓ Received exit code 0.
[tester::#UE7] [test-4] Running test case: 4
[tester::#UE7] [test-4] Writing contents to ./test.lox:
[tester::#UE7] [test-4.lox] ("baz"+"foo") != "other_string"
[tester::#UE7] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] STRING "baz" baz
[your_program] PLUS + null
[your_program] STRING "foo" foo
[your_program] RIGHT_PAREN ) null
[your_program] BANG_EQUAL != null
[your_program] STRING "other_string" other_string
[your_program] EOF  null
[tester::#UE7] [test-4] ✓ 8 line(s) match on stdout
[tester::#UE7] [test-4] ✓ Received exit code 0.
[tester::#UE7] Test passed.
[tester::#TZ7] Running tests for Stage #TZ7 (Scanning: Multi-line errors)
[tester::#TZ7] [test-1] Running test case: 1
[tester::#TZ7] [test-1] Writing contents to ./test.lox:
[tester::#TZ7] [test-1.lox] ()<|SPACE|><|TAB|>@
[tester::#TZ7] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] RIGHT_PAREN ) null
[your_program] EOF  null
[your_program] [line 2] Error: Unexpected character: @
[tester::#TZ7] [test-1] ✓ 1 line(s) match on stderr
[tester::#TZ7] [test-1] ✓ 3 line(s) match on stdout
[tester::#TZ7] [test-1] ✓ Received exit code 65.
[tester::#TZ7] [test-2] Running test case: 2
[tester::#TZ7] [test-2] Writing contents to ./test.lox:
[tester::#TZ7] [test-2.lox] #@$<|TAB|>
[tester::#TZ7] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] EOF  null
[your_program] [line 1] Error: Unexpected character: #
[your_program] [line 1] Error: Unexpected character: @
[your_program] [line 1] Error: Unexpected character: $
[tester::#TZ7] [test-2] ✓ 3 line(s) match on stderr
[tester::#TZ7] [test-2] ✓ 1 line(s) match on stdout
[tester::#TZ7] [test-2] ✓ Received exit code 65.
[tester::#TZ7] [test-3] Running test case: 3
[tester::#TZ7] [test-3] Writing contents to ./test.lox:
[tester::#TZ7] [test-3.lox] ()  #<|TAB|>{}
[tester::#TZ7] [test-3.lox] @
[tester::#TZ7] [test-3.lox] $
[tester::#TZ7] [test-3.lox] +++
[tester::#TZ7] [test-3.lox] // Let's Go!
[tester::#TZ7] [test-3.lox] +++
[tester::#TZ7] [test-3.lox] #
[tester::#TZ7] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] [line 1] Error: Unexpected character: #
[your_program] LEFT_PAREN ( null
[your_program] [line 2] Error: Unexpected character: @
[your_program] [line 3] Error: Unexpected character: $
[your_program] RIGHT_PAREN ) null
[your_program] LEFT_BRACE { null
[your_program] [line 7] Error: Unexpected character: #
[your_program] RIGHT_BRACE } null
[your_program] PLUS + null
[your_program] PLUS + null
[your_program] PLUS + null
[your_program] PLUS + null
[your_program] PLUS + null
[your_program] PLUS + null
[your_program] EOF  null
[tester::#TZ7] [test-3] ✓ 4 line(s) match on stderr
[tester::#TZ7] [test-3] ✓ 11 line(s) match on stdout
[tester::#TZ7] [test-3] ✓ Received exit code 65.
[tester::#TZ7] [test-4] Running test case: 4
[tester::#TZ7] [test-4] Writing contents to ./test.lox:
[tester::#TZ7] [test-4.lox] ({, $})
[tester::#TZ7] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] LEFT_BRACE { null
[your_program] COMMA , null
[your_program] RIGHT_BRACE } null
[your_program] RIGHT_PAREN ) null
[your_program] EOF  null
[your_program] [line 1] Error: Unexpected character: $
[tester::#TZ7] [test-4] ✓ 1 line(s) match on stderr
[tester::#TZ7] [test-4] ✓ 6 line(s) match on stdout
[tester::#TZ7] [test-4] ✓ Received exit code 65.
[tester::#TZ7] Test passed.
[tester::#ER2] Running tests for Stage #ER2 (Scanning: Whitespace)
[tester::#ER2] [test-1] Running test case: 1
[tester::#ER2] [test-1] Writing contents to ./test.lox:
[tester::#ER2] [test-1.lox] <|SPACE|>
[tester::#ER2] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] EOF  null
[tester::#ER2] [test-1] ✓ 1 line(s) match on stdout
[tester::#ER2] [test-1] ✓ Received exit code 0.
[tester::#ER2] [test-2] Running test case: 2
[tester::#ER2] [test-2] Writing contents to ./test.lox:
[tester::#ER2] [test-2.lox]  <|TAB|>
[tester::#ER2] [test-2.lox] <|SPACE|>
[tester::#ER2] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] EOF  null
[tester::#ER2] [test-2] ✓ 1 line(s) match on stdout
[tester::#ER2] [test-2] ✓ Received exit code 0.
[tester::#ER2] [test-3] Running test case: 3
[tester::#ER2] [test-3] Writing contents to ./test.lox:
[tester::#ER2] [test-3.lox] {<|TAB|> }
[tester::#ER2] [test-3.lox] ((*+-
[tester::#ER2] [test-3.lox] ,))
[tester::#ER2] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_BRACE { null
[your_program] RIGHT_BRACE } null
[your_program] LEFT_PAREN ( null
[your_program] LEFT_PAREN ( null
[your_program] STAR * null
[your_program] PLUS + null
[your_program] MINUS - null
[your_program] COMMA , null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_PAREN ) null
[your_program] EOF  null
[tester::#ER2] [test-3] ✓ 11 line(s) match on stdout
[tester::#ER2] [test-3] ✓ Received exit code 0.
[tester::#ER2] [test-4] Running test case: 4
[tester::#ER2] [test-4] Writing contents to ./test.lox:
[tester::#ER2] [test-4.lox] { <|TAB|>
[tester::#ER2] [test-4.lox] <|TAB|>
[tester::#ER2] [test-4.lox] }
[tester::#ER2] [test-4.lox] ((< ,
[tester::#ER2] [test-4.lox] >=))
[tester::#ER2] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_BRACE { null
[your_program] RIGHT_BRACE } null
[your_program] LEFT_PAREN ( null
[your_program] LEFT_PAREN ( null
[your_program] LESS < null
[your_program] COMMA , null
[your_program] GREATER_EQUAL >= null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_PAREN ) null
[your_program] EOF  null
[tester::#ER2] [test-4] ✓ 10 line(s) match on stdout
[tester::#ER2] [test-4] ✓ Received exit code 0.
[tester::#ER2] Test passed.
[tester::#ML2] Running tests for Stage #ML2 (Scanning: Division operator & comments)
[tester::#ML2] [test-1] Running test case: 1
[tester::#ML2] [test-1] Writing contents to ./test.lox:
[tester::#ML2] [test-1.lox] //Comment
[tester::#ML2] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] EOF  null
[tester::#ML2] [test-1] ✓ 1 line(s) match on stdout
[tester::#ML2] [test-1] ✓ Received exit code 0.
[tester::#ML2] [test-2] Running test case: 2
[tester::#ML2] [test-2] Writing contents to ./test.lox:
[tester::#ML2] [test-2.lox] (///Unicode:£§᯽☺♣)
[tester::#ML2] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] EOF  null
[tester::#ML2] [test-2] ✓ 2 line(s) match on stdout
[tester::#ML2] [test-2] ✓ Received exit code 0.
[tester::#ML2] [test-3] Running test case: 3
[tester::#ML2] [test-3] Writing contents to ./test.lox:
[tester::#ML2] [test-3.lox] /
[tester::#ML2] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] SLASH / null
[your_program] EOF  null
[tester::#ML2] [test-3] ✓ 2 line(s) match on stdout
[tester::#ML2] [test-3] ✓ Received exit code 0.
[tester::#ML2] [test-4] Running test case: 4
[tester::#ML2] [test-4] Writing contents to ./test.lox:
[tester::#ML2] [test-4.lox] ({(+-<=)})//Comment
[tester::#ML2] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] LEFT_BRACE { null
[your_program] LEFT_PAREN ( null
[your_program] PLUS + null
[your_program] MINUS - null
[your_program] LESS_EQUAL <= null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_BRACE } null
[your_program] RIGHT_PAREN ) null
[your_program] EOF  null
[tester::#ML2] [test-4] ✓ 10 line(s) match on stdout
[tester::#ML2] [test-4] ✓ Received exit code 0.
[tester::#ML2] Test passed.
[tester::#ET2] Running tests for Stage #ET2 (Scanning: Relational operators)
[tester::#ET2] [test-1] Running test case: 1
[tester::#ET2] [test-1] Writing contents to ./test.lox:
[tester::#ET2] [test-1.lox] >=
[tester::#ET2] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] GREATER_EQUAL >= null
[your_program] EOF  null
[tester::#ET2] [test-1] ✓ 2 line(s) match on stdout
[tester::#ET2] [test-1] ✓ Received exit code 0.
[tester::#ET2] [test-2] Running test case: 2
[tester::#ET2] [test-2] Writing contents to ./test.lox:
[tester::#ET2] [test-2.lox] <<<=>>>=
[tester::#ET2] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] LESS < null
[your_program] LESS < null
[your_program] LESS_EQUAL <= null
[your_program] GREATER > null
[your_program] GREATER > null
[your_program] GREATER_EQUAL >= null
[your_program] EOF  null
[tester::#ET2] [test-2] ✓ 7 line(s) match on stdout
[tester::#ET2] [test-2] ✓ Received exit code 0.
[tester::#ET2] [test-3] Running test case: 3
[tester::#ET2] [test-3] Writing contents to ./test.lox:
[tester::#ET2] [test-3.lox] >=>=><<
[tester::#ET2] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] GREATER_EQUAL >= null
[your_program] GREATER_EQUAL >= null
[your_program] GREATER > null
[your_program] LESS < null
[your_program] LESS < null
[your_program] EOF  null
[tester::#ET2] [test-3] ✓ 6 line(s) match on stdout
[tester::#ET2] [test-3] ✓ Received exit code 0.
[tester::#ET2] [test-4] Running test case: 4
[tester::#ET2] [test-4] Writing contents to ./test.lox:
[tester::#ET2] [test-4.lox] (){><=!}
[tester::#ET2] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] RIGHT_PAREN ) null
[your_program] LEFT_BRACE { null
[your_program] GREATER > null
[your_program] LESS_EQUAL <= null
[your_program] BANG ! null
[your_program] RIGHT_BRACE } null
[your_program] EOF  null
[tester::#ET2] [test-4] ✓ 8 line(s) match on stdout
[tester::#ET2] [test-4] ✓ Received exit code 0.
[tester::#ET2] Test passed.
[tester::#BU3] Running tests for Stage #BU3 (Scanning: Negation & inequality operators)
[tester::#BU3] [test-1] Running test case: 1
[tester::#BU3] [test-1] Writing contents to ./test.lox:
[tester::#BU3] [test-1.lox] !=
[tester::#BU3] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] BANG_EQUAL != null
[your_program] EOF  null
[tester::#BU3] [test-1] ✓ 2 line(s) match on stdout
[tester::#BU3] [test-1] ✓ Received exit code 0.
[tester::#BU3] [test-2] Running test case: 2
[tester::#BU3] [test-2] Writing contents to ./test.lox:
[tester::#BU3] [test-2.lox] !!===
[tester::#BU3] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] BANG ! null
[your_program] BANG_EQUAL != null
[your_program] EQUAL_EQUAL == null
[your_program] EOF  null
[tester::#BU3] [test-2] ✓ 4 line(s) match on stdout
[tester::#BU3] [test-2] ✓ Received exit code 0.
[tester::#BU3] [test-3] Running test case: 3
[tester::#BU3] [test-3] Writing contents to ./test.lox:
[tester::#BU3] [test-3.lox] !{!}(!===)=
[tester::#BU3] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] BANG ! null
[your_program] LEFT_BRACE { null
[your_program] BANG ! null
[your_program] RIGHT_BRACE } null
[your_program] LEFT_PAREN ( null
[your_program] BANG_EQUAL != null
[your_program] EQUAL_EQUAL == null
[your_program] RIGHT_PAREN ) null
[your_program] EQUAL = null
[your_program] EOF  null
[tester::#BU3] [test-3] ✓ 10 line(s) match on stdout
[tester::#BU3] [test-3] ✓ Received exit code 0.
[tester::#BU3] [test-4] Running test case: 4
[tester::#BU3] [test-4] Writing contents to ./test.lox:
[tester::#BU3] [test-4.lox] {(#!==$==)}
[tester::#BU3] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] [line 1] Error: Unexpected character: #
[your_program] [line 1] Error: Unexpected character: $
[your_program] LEFT_BRACE { null
[your_program] LEFT_PAREN ( null
[your_program] BANG_EQUAL != null
[your_program] EQUAL = null
[your_program] EQUAL_EQUAL == null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_BRACE } null
[your_program] EOF  null
[tester::#BU3] [test-4] ✓ 2 line(s) match on stderr
[tester::#BU3] [test-4] ✓ 8 line(s) match on stdout
[tester::#BU3] [test-4] ✓ Received exit code 65.
[tester::#BU3] Test passed.
[tester::#MP7] Running tests for Stage #MP7 (Scanning: Assignment & equality Operators)
[tester::#MP7] [test-1] Running test case: 1
[tester::#MP7] [test-1] Writing contents to ./test.lox:
[tester::#MP7] [test-1.lox] =
[tester::#MP7] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] EQUAL = null
[your_program] EOF  null
[tester::#MP7] [test-1] ✓ 2 line(s) match on stdout
[tester::#MP7] [test-1] ✓ Received exit code 0.
[tester::#MP7] [test-2] Running test case: 2
[tester::#MP7] [test-2] Writing contents to ./test.lox:
[tester::#MP7] [test-2.lox] ==
[tester::#MP7] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] EQUAL_EQUAL == null
[your_program] EOF  null
[tester::#MP7] [test-2] ✓ 2 line(s) match on stdout
[tester::#MP7] [test-2] ✓ Received exit code 0.
[tester::#MP7] [test-3] Running test case: 3
[tester::#MP7] [test-3] Writing contents to ./test.lox:
[tester::#MP7] [test-3.lox] ({=}){==}
[tester::#MP7] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] LEFT_BRACE { null
[your_program] EQUAL = null
[your_program] RIGHT_BRACE } null
[your_program] RIGHT_PAREN ) null
[your_program] LEFT_BRACE { null
[your_program] EQUAL_EQUAL == null
[your_program] RIGHT_BRACE } null
[your_program] EOF  null
[tester::#MP7] [test-3] ✓ 9 line(s) match on stdout
[tester::#MP7] [test-3] ✓ Received exit code 0.
[tester::#MP7] [test-4] Running test case: 4
[tester::#MP7] [test-4] Writing contents to ./test.lox:
[tester::#MP7] [test-4.lox] ((#===@$))
[tester::#MP7] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] LEFT_PAREN ( null
[your_program] EQUAL_EQUAL == null
[your_program] EQUAL = null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_PAREN ) null
[your_program] EOF  null
[your_program] [line 1] Error: Unexpected character: #
[your_program] [line 1] Error: Unexpected character: @
[your_program] [line 1] Error: Unexpected character: $
[tester::#MP7] [test-4] ✓ 3 line(s) match on stderr
[tester::#MP7] [test-4] ✓ 7 line(s) match on stdout
[tester::#MP7] [test-4] ✓ Received exit code 65.
[tester::#MP7] Test passed.
[tester::#EA6] Running tests for Stage #EA6 (Scanning: Lexical errors)
[tester::#EA6] [test-1] Running test case: 1
[tester::#EA6] [test-1] Writing contents to ./test.lox:
[tester::#EA6] [test-1.lox] @
[tester::#EA6] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] [line 1] Error: Unexpected character: @
[your_program] EOF  null
[tester::#EA6] [test-1] ✓ 1 line(s) match on stderr
[tester::#EA6] [test-1] ✓ 1 line(s) match on stdout
[tester::#EA6] [test-1] ✓ Received exit code 65.
[tester::#EA6] [test-2] Running test case: 2
[tester::#EA6] [test-2] Writing contents to ./test.lox:
[tester::#EA6] [test-2.lox] ,.$(#
[tester::#EA6] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] [line 1] Error: Unexpected character: $
[your_program] [line 1] Error: Unexpected character: #
[your_program] COMMA , null
[your_program] DOT . null
[your_program] LEFT_PAREN ( null
[your_program] EOF  null
[tester::#EA6] [test-2] ✓ 2 line(s) match on stderr
[tester::#EA6] [test-2] ✓ 4 line(s) match on stdout
[tester::#EA6] [test-2] ✓ Received exit code 65.
[tester::#EA6] [test-3] Running test case: 3
[tester::#EA6] [test-3] Writing contents to ./test.lox:
[tester::#EA6] [test-3.lox] %$@#@
[tester::#EA6] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] EOF  null
[your_program] [line 1] Error: Unexpected character: %
[your_program] [line 1] Error: Unexpected character: $
[your_program] [line 1] Error: Unexpected character: @
[your_program] [line 1] Error: Unexpected character: #
[your_program] [line 1] Error: Unexpected character: @
[tester::#EA6] [test-3] ✓ 5 line(s) match on stderr
[tester::#EA6] [test-3] ✓ 1 line(s) match on stdout
[tester::#EA6] [test-3] ✓ Received exit code 65.
[tester::#EA6] [test-4] Running test case: 4
[tester::#EA6] [test-4] Writing contents to ./test.lox:
[tester::#EA6] [test-4.lox] {(.%+;-$*)}
[tester::#EA6] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_BRACE { null
[your_program] [line 1] Error: Unexpected character: %
[your_program] [line 1] Error: Unexpected character: $
[your_program] LEFT_PAREN ( null
[your_program] DOT . null
[your_program] PLUS + null
[your_program] SEMICOLON ; null
[your_program] MINUS - null
[your_program] STAR * null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_BRACE } null
[your_program] EOF  null
[tester::#EA6] [test-4] ✓ 2 line(s) match on stderr
[tester::#EA6] [test-4] ✓ 10 line(s) match on stdout
[tester::#EA6] [test-4] ✓ Received exit code 65.
[tester::#EA6] Test passed.
[tester::#XC5] Running tests for Stage #XC5 (Scanning: Other single-character tokens)
[tester::#XC5] [test-1] Running test case: 1
[tester::#XC5] [test-1] Writing contents to ./test.lox:
[tester::#XC5] [test-1.lox] +-
[tester::#XC5] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] PLUS + null
[your_program] MINUS - null
[your_program] EOF  null
[tester::#XC5] [test-1] ✓ 3 line(s) match on stdout
[tester::#XC5] [test-1] ✓ Received exit code 0.
[tester::#XC5] [test-2] Running test case: 2
[tester::#XC5] [test-2] Writing contents to ./test.lox:
[tester::#XC5] [test-2.lox] ++--**..,,;;
[tester::#XC5] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] PLUS + null
[your_program] PLUS + null
[your_program] MINUS - null
[your_program] MINUS - null
[your_program] STAR * null
[your_program] STAR * null
[your_program] DOT . null
[your_program] DOT . null
[your_program] COMMA , null
[your_program] COMMA , null
[your_program] SEMICOLON ; null
[your_program] SEMICOLON ; null
[your_program] EOF  null
[tester::#XC5] [test-2] ✓ 13 line(s) match on stdout
[tester::#XC5] [test-2] ✓ Received exit code 0.
[tester::#XC5] [test-3] Running test case: 3
[tester::#XC5] [test-3] Writing contents to ./test.lox:
[tester::#XC5] [test-3.lox] ;.*,+-;
[tester::#XC5] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] SEMICOLON ; null
[your_program] DOT . null
[your_program] STAR * null
[your_program] COMMA , null
[your_program] PLUS + null
[your_program] MINUS - null
[your_program] SEMICOLON ; null
[your_program] EOF  null
[tester::#XC5] [test-3] ✓ 8 line(s) match on stdout
[tester::#XC5] [test-3] ✓ Received exit code 0.
[tester::#XC5] [test-4] Running test case: 4
[tester::#XC5] [test-4] Writing contents to ./test.lox:
[tester::#XC5] [test-4.lox] ({-+.;*})
[tester::#XC5] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] LEFT_BRACE { null
[your_program] MINUS - null
[your_program] PLUS + null
[your_program] DOT . null
[your_program] SEMICOLON ; null
[your_program] STAR * null
[your_program] RIGHT_BRACE } null
[your_program] RIGHT_PAREN ) null
[your_program] EOF  null
[tester::#XC5] [test-4] ✓ 10 line(s) match on stdout
[tester::#XC5] [test-4] ✓ Received exit code 0.
[tester::#XC5] Test passed.
[tester::#OE8] Running tests for Stage #OE8 (Scanning: Braces)
[tester::#OE8] [test-1] Running test case: 1
[tester::#OE8] [test-1] Writing contents to ./test.lox:
[tester::#OE8] [test-1.lox] }
[tester::#OE8] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] RIGHT_BRACE } null
[your_program] EOF  null
[tester::#OE8] [test-1] ✓ 2 line(s) match on stdout
[tester::#OE8] [test-1] ✓ Received exit code 0.
[tester::#OE8] [test-2] Running test case: 2
[tester::#OE8] [test-2] Writing contents to ./test.lox:
[tester::#OE8] [test-2.lox] {{}}
[tester::#OE8] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_BRACE { null
[your_program] LEFT_BRACE { null
[your_program] RIGHT_BRACE } null
[your_program] RIGHT_BRACE } null
[your_program] EOF  null
[tester::#OE8] [test-2] ✓ 5 line(s) match on stdout
[tester::#OE8] [test-2] ✓ Received exit code 0.
[tester::#OE8] [test-3] Running test case: 3
[tester::#OE8] [test-3] Writing contents to ./test.lox:
[tester::#OE8] [test-3.lox] }}{{{
[tester::#OE8] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] RIGHT_BRACE } null
[your_program] RIGHT_BRACE } null
[your_program] LEFT_BRACE { null
[your_program] LEFT_BRACE { null
[your_program] LEFT_BRACE { null
[your_program] EOF  null
[tester::#OE8] [test-3] ✓ 6 line(s) match on stdout
[tester::#OE8] [test-3] ✓ Received exit code 0.
[tester::#OE8] [test-4] Running test case: 4
[tester::#OE8] [test-4] Writing contents to ./test.lox:
[tester::#OE8] [test-4.lox] {)})}{(
[tester::#OE8] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_BRACE { null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_BRACE } null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_BRACE } null
[your_program] LEFT_BRACE { null
[your_program] LEFT_PAREN ( null
[your_program] EOF  null
[tester::#OE8] [test-4] ✓ 8 line(s) match on stdout
[tester::#OE8] [test-4] ✓ Received exit code 0.
[tester::#OE8] Test passed.
[tester::#OL4] Running tests for Stage #OL4 (Scanning: Parentheses)
[tester::#OL4] [test-1] Running test case: 1
[tester::#OL4] [test-1] Writing contents to ./test.lox:
[tester::#OL4] [test-1.lox] (
[tester::#OL4] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] EOF  null
[tester::#OL4] [test-1] ✓ 2 line(s) match on stdout
[tester::#OL4] [test-1] ✓ Received exit code 0.
[tester::#OL4] [test-2] Running test case: 2
[tester::#OL4] [test-2] Writing contents to ./test.lox:
[tester::#OL4] [test-2.lox] ))
[tester::#OL4] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_PAREN ) null
[your_program] EOF  null
[tester::#OL4] [test-2] ✓ 3 line(s) match on stdout
[tester::#OL4] [test-2] ✓ Received exit code 0.
[tester::#OL4] [test-3] Running test case: 3
[tester::#OL4] [test-3] Writing contents to ./test.lox:
[tester::#OL4] [test-3.lox] )()))
[tester::#OL4] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] RIGHT_PAREN ) null
[your_program] LEFT_PAREN ( null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_PAREN ) null
[your_program] EOF  null
[tester::#OL4] [test-3] ✓ 6 line(s) match on stdout
[tester::#OL4] [test-3] ✓ Received exit code 0.
[tester::#OL4] [test-4] Running test case: 4
[tester::#OL4] [test-4] Writing contents to ./test.lox:
[tester::#OL4] [test-4.lox] )()))((
[tester::#OL4] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] RIGHT_PAREN ) null
[your_program] LEFT_PAREN ( null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_PAREN ) null
[your_program] LEFT_PAREN ( null
[your_program] LEFT_PAREN ( null
[your_program] EOF  null
[tester::#OL4] [test-4] ✓ 8 line(s) match on stdout
[tester::#OL4] [test-4] ✓ Received exit code 0.
[tester::#OL4] Test passed.
[tester::#RY8] Running tests for Stage #RY8 (Scanning: Empty file)
[tester::#RY8] [test-1] Writing contents to ./test.lox:
[tester::#RY8] [test-1.lox] <|EMPTY FILE|>
[tester::#RY8] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] EOF  null
[tester::#RY8] [test-1] ✓ 1 line(s) match on stdout
[tester::#RY8] [test-1] ✓ Received exit code 0.
[tester::#RY8] Test passed.
All tests passed! Commit and push your code to move to the next stage.
Tests passed!
Hide logs
